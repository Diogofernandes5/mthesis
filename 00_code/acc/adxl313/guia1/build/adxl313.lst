ARM GAS  /tmp/cctdo2D3.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"adxl313.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.checkPartId,"ax",%progbits
  17              		.align	1
  18              		.global	checkPartId
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	checkPartId:
  26              	.LVL0:
  27              	.LFB147:
  28              		.file 1 "../Core/Src/adxl313.c"
   1:../Core/Src/adxl313.c **** #include "adxl313.h"
   2:../Core/Src/adxl313.c **** #include "usart.h"
   3:../Core/Src/adxl313.c **** 
   4:../Core/Src/adxl313.c **** #include <stdlib.h>
   5:../Core/Src/adxl313.c **** #include <math.h>
   6:../Core/Src/adxl313.c **** 
   7:../Core/Src/adxl313.c **** #define ADXL313_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis
   8:../Core/Src/adxl313.c **** 
   9:../Core/Src/adxl313.c **** /*****************************************************/
  10:../Core/Src/adxl313.c **** 
  11:../Core/Src/adxl313.c **** double gains[3] = { 0.00376390, 0.00376009, 0.00349265 };				// Counts to Gs
  12:../Core/Src/adxl313.c **** 
  13:../Core/Src/adxl313.c **** /******************************************************************************/
  14:../Core/Src/adxl313.c **** /************************ Functions Declarations ******************************/
  15:../Core/Src/adxl313.c **** /******************************************************************************/
  16:../Core/Src/adxl313.c **** bool checkPartId( spi_comm_desc *_spi_desc);
  17:../Core/Src/adxl313.c **** 
  18:../Core/Src/adxl313.c **** void setRegisterBit( adxl313_dev *dev, uint8_t regAdress, int bitPos, bool state);
  19:../Core/Src/adxl313.c **** bool getRegisterBit( adxl313_dev *dev, uint8_t regAdress, int bitPos);
  20:../Core/Src/adxl313.c **** 
  21:../Core/Src/adxl313.c **** static inline uint8_t mask_reg(uint8_t __reg, uint8_t __mask)
  22:../Core/Src/adxl313.c **** {
  23:../Core/Src/adxl313.c **** 	return (uint8_t)(__reg & __mask);
  24:../Core/Src/adxl313.c **** }
  25:../Core/Src/adxl313.c **** 
  26:../Core/Src/adxl313.c **** static inline int constrain(int __val, int __min, int __max)
  27:../Core/Src/adxl313.c **** {
  28:../Core/Src/adxl313.c **** 	return (int)((__val < __min) ? __min : ((__val > __max) ? __max : __val));
  29:../Core/Src/adxl313.c **** }
  30:../Core/Src/adxl313.c **** 
ARM GAS  /tmp/cctdo2D3.s 			page 2


  31:../Core/Src/adxl313.c **** /******************************************************************************/
  32:../Core/Src/adxl313.c **** /************************ Functions Definitions *******************************/
  33:../Core/Src/adxl313.c **** /******************************************************************************/
  34:../Core/Src/adxl313.c **** bool begin(adxl313_dev *dev, enum adxl313_comm_type comm_type, enum adxl313_range range, 
  35:../Core/Src/adxl313.c **** 			enum adxl313_resolution resolution, uint16_t odr)
  36:../Core/Src/adxl313.c **** {
  37:../Core/Src/adxl313.c **** 	adxl313_dev _dev;
  38:../Core/Src/adxl313.c **** 	spi_comm_desc _spi_desc = {.hspi = &hspi1,
  39:../Core/Src/adxl313.c **** 								.CS_port = GPIOE,
  40:../Core/Src/adxl313.c **** 								.CS_pin = GPIO_PIN_2 };
  41:../Core/Src/adxl313.c **** 
  42:../Core/Src/adxl313.c **** 	bool ret = checkPartId(&_spi_desc); // PE2
  43:../Core/Src/adxl313.c **** 	if(!ret)
  44:../Core/Src/adxl313.c **** 	{
  45:../Core/Src/adxl313.c **** 		UART_puts("ADXL313 device not found in SPI interface. Check connection and try again.\n\r");
  46:../Core/Src/adxl313.c **** 		return (false);
  47:../Core/Src/adxl313.c **** 	}
  48:../Core/Src/adxl313.c **** 	else
  49:../Core/Src/adxl313.c **** 		UART_puts("ADXL313 device initialized using SPI interface!\n\r");
  50:../Core/Src/adxl313.c **** 
  51:../Core/Src/adxl313.c **** 	_dev.range = range;
  52:../Core/Src/adxl313.c **** 	_dev.comm_type = comm_type;
  53:../Core/Src/adxl313.c **** 	_dev.resolution = resolution;
  54:../Core/Src/adxl313.c **** 	_dev.odr = odr;
  55:../Core/Src/adxl313.c **** 	_dev.spi_desc = &_spi_desc;
  56:../Core/Src/adxl313.c **** 	_dev.error_code = ADXL313_NO_ERROR;
  57:../Core/Src/adxl313.c **** 	_dev.status = ADXL313_OK;
  58:../Core/Src/adxl313.c **** 
  59:../Core/Src/adxl313.c **** 	dev = &_dev; 
  60:../Core/Src/adxl313.c **** 
  61:../Core/Src/adxl313.c **** 	// Set DATA_READY interrupt
  62:../Core/Src/adxl313.c **** 	setInterrupt(dev, ADXL313_INT_DATA_READY_BIT, true);
  63:../Core/Src/adxl313.c **** 	measureModeOn(dev);
  64:../Core/Src/adxl313.c **** 
  65:../Core/Src/adxl313.c **** 	return (true);
  66:../Core/Src/adxl313.c **** }
  67:../Core/Src/adxl313.c **** 
  68:../Core/Src/adxl313.c **** /**********************************************************
  69:../Core/Src/adxl313.c ****  * @brief Check Part ID from sensor 
  70:../Core/Src/adxl313.c ****  * 
  71:../Core/Src/adxl313.c ****  * @param _spi_desc - pointer to the spi descritor struct
  72:../Core/Src/adxl313.c ****  * 
  73:../Core/Src/adxl313.c ****  * @return true if device's part ID register is correct
  74:../Core/Src/adxl313.c ****  **********************************************************/
  75:../Core/Src/adxl313.c **** bool checkPartId( spi_comm_desc *_spi_desc) 
  76:../Core/Src/adxl313.c **** {
  29              		.loc 1 76 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		.loc 1 76 1 is_stmt 0 view .LVU1
  34 0000 00B5     		push	{lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 14, -4
  38 0002 83B0     		sub	sp, sp, #12
  39              	.LCFI1:
ARM GAS  /tmp/cctdo2D3.s 			page 3


  40              		.cfi_def_cfa_offset 16
  77:../Core/Src/adxl313.c **** 	uint8_t _b;
  41              		.loc 1 77 2 is_stmt 1 view .LVU2
  78:../Core/Src/adxl313.c **** 	
  79:../Core/Src/adxl313.c **** 	spi_read(_spi_desc, ADXL313_PARTID, 1, &_b);
  42              		.loc 1 79 2 view .LVU3
  43 0004 0DF10703 		add	r3, sp, #7
  44 0008 0122     		movs	r2, #1
  45 000a 0221     		movs	r1, #2
  46 000c FFF7FEFF 		bl	spi_read
  47              	.LVL1:
  80:../Core/Src/adxl313.c **** 	if(_b == ADXL313_PARTID_RSP_EXPECTED)
  48              		.loc 1 80 2 view .LVU4
  49              		.loc 1 80 8 is_stmt 0 view .LVU5
  50 0010 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
  51              		.loc 1 80 4 view .LVU6
  52 0014 CB2B     		cmp	r3, #203
  53 0016 03D0     		beq	.L3
  81:../Core/Src/adxl313.c **** 		return (true);
  82:../Core/Src/adxl313.c **** 	
  83:../Core/Src/adxl313.c **** 	return (false);
  54              		.loc 1 83 9 view .LVU7
  55 0018 0020     		movs	r0, #0
  56              	.L2:
  84:../Core/Src/adxl313.c **** }
  57              		.loc 1 84 1 view .LVU8
  58 001a 03B0     		add	sp, sp, #12
  59              	.LCFI2:
  60              		.cfi_remember_state
  61              		.cfi_def_cfa_offset 4
  62              		@ sp needed
  63 001c 5DF804FB 		ldr	pc, [sp], #4
  64              	.L3:
  65              	.LCFI3:
  66              		.cfi_restore_state
  81:../Core/Src/adxl313.c **** 		return (true);
  67              		.loc 1 81 10 view .LVU9
  68 0020 0120     		movs	r0, #1
  69 0022 FAE7     		b	.L2
  70              		.cfi_endproc
  71              	.LFE147:
  73              		.section	.text.updateIntSourceStatuses,"ax",%progbits
  74              		.align	1
  75              		.global	updateIntSourceStatuses
  76              		.syntax unified
  77              		.thumb
  78              		.thumb_func
  79              		.fpu fpv5-d16
  81              	updateIntSourceStatuses:
  82              	.LVL2:
  83              	.LFB149:
  85:../Core/Src/adxl313.c **** 
  86:../Core/Src/adxl313.c **** bool dataReady( adxl313_dev *dev) {
  87:../Core/Src/adxl313.c **** 	return getRegisterBit(dev, ADXL313_INT_SOURCE, ADXL313_INT_DATA_READY_BIT);	// check the dataReady
  88:../Core/Src/adxl313.c **** }
  89:../Core/Src/adxl313.c **** 
  90:../Core/Src/adxl313.c **** void updateIntSourceStatuses( adxl313_dev *dev) {
ARM GAS  /tmp/cctdo2D3.s 			page 4


  84              		.loc 1 90 49 is_stmt 1 view -0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 8
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              		.loc 1 90 49 is_stmt 0 view .LVU11
  89 0000 10B5     		push	{r4, lr}
  90              	.LCFI4:
  91              		.cfi_def_cfa_offset 8
  92              		.cfi_offset 4, -8
  93              		.cfi_offset 14, -4
  94 0002 82B0     		sub	sp, sp, #8
  95              	.LCFI5:
  96              		.cfi_def_cfa_offset 16
  97 0004 0446     		mov	r4, r0
  91:../Core/Src/adxl313.c **** 	uint8_t _b;
  98              		.loc 1 91 2 is_stmt 1 view .LVU12
  92:../Core/Src/adxl313.c **** 
  93:../Core/Src/adxl313.c **** 	spi_read(dev->spi_desc, ADXL313_INT_SOURCE, 1, &_b);
  99              		.loc 1 93 2 view .LVU13
 100 0006 0DF10703 		add	r3, sp, #7
 101 000a 0122     		movs	r2, #1
 102 000c 3021     		movs	r1, #48
 103 000e 006B     		ldr	r0, [r0, #48]
 104              	.LVL3:
 105              		.loc 1 93 2 is_stmt 0 view .LVU14
 106 0010 FFF7FEFF 		bl	spi_read
 107              	.LVL4:
  94:../Core/Src/adxl313.c **** 
  95:../Core/Src/adxl313.c **** 	dev->intSource.data_ready = ((_b >> ADXL313_INT_DATA_READY_BIT) & 1);
 108              		.loc 1 95 2 is_stmt 1 view .LVU15
 109              		.loc 1 95 66 is_stmt 0 view .LVU16
 110 0014 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 111              		.loc 1 95 28 view .LVU17
 112 0018 DA09     		lsrs	r2, r3, #7
 113 001a 84F83620 		strb	r2, [r4, #54]
  96:../Core/Src/adxl313.c **** 	dev->intSource.activity = ((_b >> ADXL313_INT_ACTIVITY_BIT) & 1);
 114              		.loc 1 96 2 is_stmt 1 view .LVU18
 115              		.loc 1 96 62 is_stmt 0 view .LVU19
 116 001e C3F30012 		ubfx	r2, r3, #4, #1
 117              		.loc 1 96 26 view .LVU20
 118 0022 84F83720 		strb	r2, [r4, #55]
  97:../Core/Src/adxl313.c **** 	dev->intSource.inactivity = ((_b >> ADXL313_INT_INACTIVITY_BIT) & 1);
 119              		.loc 1 97 2 is_stmt 1 view .LVU21
 120              		.loc 1 97 66 is_stmt 0 view .LVU22
 121 0026 C3F3C002 		ubfx	r2, r3, #3, #1
 122              		.loc 1 97 28 view .LVU23
 123 002a 84F83820 		strb	r2, [r4, #56]
  98:../Core/Src/adxl313.c **** 	dev->intSource.watermark = ((_b >> ADXL313_INT_WATERMARK_BIT) & 1);
 124              		.loc 1 98 2 is_stmt 1 view .LVU24
 125              		.loc 1 98 64 is_stmt 0 view .LVU25
 126 002e C3F34002 		ubfx	r2, r3, #1, #1
 127              		.loc 1 98 27 view .LVU26
 128 0032 84F83920 		strb	r2, [r4, #57]
  99:../Core/Src/adxl313.c **** 	dev->intSource.over_run = ((_b >> ADXL313_INT_OVERRUN_BIT) & 1);
 129              		.loc 1 99 2 is_stmt 1 view .LVU27
 130              		.loc 1 99 61 is_stmt 0 view .LVU28
 131 0036 03F00103 		and	r3, r3, #1
ARM GAS  /tmp/cctdo2D3.s 			page 5


 132              		.loc 1 99 26 view .LVU29
 133 003a 84F83A30 		strb	r3, [r4, #58]
 100:../Core/Src/adxl313.c **** }
 134              		.loc 1 100 1 view .LVU30
 135 003e 02B0     		add	sp, sp, #8
 136              	.LCFI6:
 137              		.cfi_def_cfa_offset 8
 138              		@ sp needed
 139 0040 10BD     		pop	{r4, pc}
 140              		.loc 1 100 1 view .LVU31
 141              		.cfi_endproc
 142              	.LFE149:
 144              		.section	.text.softReset,"ax",%progbits
 145              		.align	1
 146              		.global	softReset
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu fpv5-d16
 152              	softReset:
 153              	.LVL5:
 154              	.LFB152:
 101:../Core/Src/adxl313.c **** 
 102:../Core/Src/adxl313.c **** bool standby( adxl313_dev *dev) {
 103:../Core/Src/adxl313.c **** 	// clears the measure bit, putting decive in standby mode, ready for configuration
 104:../Core/Src/adxl313.c **** 	setRegisterBit(dev, ADXL313_POWER_CTL, ADXL313_MEASURE_BIT, false);
 105:../Core/Src/adxl313.c **** 	return (true);
 106:../Core/Src/adxl313.c **** }
 107:../Core/Src/adxl313.c **** 
 108:../Core/Src/adxl313.c **** bool measureModeOn( adxl313_dev *dev) {
 109:../Core/Src/adxl313.c **** 	// sets the measure bit, putting decive in measure mode, ready for reading data
 110:../Core/Src/adxl313.c **** 	setRegisterBit(dev, ADXL313_POWER_CTL, ADXL313_MEASURE_BIT, true);
 111:../Core/Src/adxl313.c **** 	return (true);
 112:../Core/Src/adxl313.c **** }
 113:../Core/Src/adxl313.c **** 
 114:../Core/Src/adxl313.c **** bool softReset( adxl313_dev *dev) {
 155              		.loc 1 114 35 is_stmt 1 view -0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 0, uses_anonymous_args = 0
 159              		.loc 1 114 35 is_stmt 0 view .LVU33
 160 0000 08B5     		push	{r3, lr}
 161              	.LCFI7:
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 3, -8
 164              		.cfi_offset 14, -4
 115:../Core/Src/adxl313.c **** 	// soft reset clears all settings, and puts it in standby mode
 116:../Core/Src/adxl313.c **** 	spi_write(dev->spi_desc, ADXL313_SOFT_RESET, ADXL313_SOFT_RESET_WRITE, 1);
 165              		.loc 1 116 2 is_stmt 1 view .LVU34
 166 0002 0123     		movs	r3, #1
 167 0004 5222     		movs	r2, #82
 168 0006 1821     		movs	r1, #24
 169 0008 006B     		ldr	r0, [r0, #48]
 170              	.LVL6:
 171              		.loc 1 116 2 is_stmt 0 view .LVU35
 172 000a FFF7FEFF 		bl	spi_write
 173              	.LVL7:
ARM GAS  /tmp/cctdo2D3.s 			page 6


 117:../Core/Src/adxl313.c **** 	return (true);
 174              		.loc 1 117 2 is_stmt 1 view .LVU36
 118:../Core/Src/adxl313.c **** }
 175              		.loc 1 118 1 is_stmt 0 view .LVU37
 176 000e 0120     		movs	r0, #1
 177 0010 08BD     		pop	{r3, pc}
 178              		.cfi_endproc
 179              	.LFE152:
 181              		.section	.text.readAccel,"ax",%progbits
 182              		.align	1
 183              		.global	readAccel
 184              		.syntax unified
 185              		.thumb
 186              		.thumb_func
 187              		.fpu fpv5-d16
 189              	readAccel:
 190              	.LVL8:
 191              	.LFB153:
 119:../Core/Src/adxl313.c **** 
 120:../Core/Src/adxl313.c **** /*********************** READING ACCELERATION ***********************/
 121:../Core/Src/adxl313.c **** /*    Reads Acceleration into Three Class Variables:  x, y and z          */
 122:../Core/Src/adxl313.c **** 
 123:../Core/Src/adxl313.c **** void readAccel( adxl313_dev *dev, uint16_t *x, uint16_t *y, uint16_t *z) {
 192              		.loc 1 123 74 is_stmt 1 view -0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 0
 195              		@ frame_needed = 0, uses_anonymous_args = 0
 196              		.loc 1 123 74 is_stmt 0 view .LVU39
 197 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 198              	.LCFI8:
 199              		.cfi_def_cfa_offset 24
 200              		.cfi_offset 3, -24
 201              		.cfi_offset 4, -20
 202              		.cfi_offset 5, -16
 203              		.cfi_offset 6, -12
 204              		.cfi_offset 7, -8
 205              		.cfi_offset 14, -4
 206 0002 0446     		mov	r4, r0
 207 0004 0F46     		mov	r7, r1
 208 0006 1646     		mov	r6, r2
 209 0008 1D46     		mov	r5, r3
 124:../Core/Src/adxl313.c **** 	spi_read(dev->spi_desc, ADXL313_DATA_X0, ADXL313_TO_READ, dev->comm_buff);
 210              		.loc 1 124 2 is_stmt 1 view .LVU40
 211 000a 00F11003 		add	r3, r0, #16
 212              	.LVL9:
 213              		.loc 1 124 2 is_stmt 0 view .LVU41
 214 000e 0622     		movs	r2, #6
 215              	.LVL10:
 216              		.loc 1 124 2 view .LVU42
 217 0010 3221     		movs	r1, #50
 218              	.LVL11:
 219              		.loc 1 124 2 view .LVU43
 220 0012 006B     		ldr	r0, [r0, #48]
 221              	.LVL12:
 222              		.loc 1 124 2 view .LVU44
 223 0014 FFF7FEFF 		bl	spi_read
 224              	.LVL13:
ARM GAS  /tmp/cctdo2D3.s 			page 7


 125:../Core/Src/adxl313.c **** 
 126:../Core/Src/adxl313.c **** 	// Each Axis @ All g Ranges: 10 Bit Resolution (2 Bytes)
 127:../Core/Src/adxl313.c **** 	*x = (int16_t)((((int)dev->comm_buff[1]) << 8) | dev->comm_buff[0]);
 225              		.loc 1 127 2 is_stmt 1 view .LVU45
 226              		.loc 1 127 38 is_stmt 0 view .LVU46
 227 0018 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 228              		.loc 1 127 65 view .LVU47
 229 001a 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 230              		.loc 1 127 7 view .LVU48
 231 001c 43EA0223 		orr	r3, r3, r2, lsl #8
 232              		.loc 1 127 5 view .LVU49
 233 0020 3B80     		strh	r3, [r7]	@ movhi
 128:../Core/Src/adxl313.c **** 	*y = (int16_t)((((int)dev->comm_buff[3]) << 8) | dev->comm_buff[2]);
 234              		.loc 1 128 2 is_stmt 1 view .LVU50
 235              		.loc 1 128 38 is_stmt 0 view .LVU51
 236 0022 E27C     		ldrb	r2, [r4, #19]	@ zero_extendqisi2
 237              		.loc 1 128 65 view .LVU52
 238 0024 A37C     		ldrb	r3, [r4, #18]	@ zero_extendqisi2
 239              		.loc 1 128 7 view .LVU53
 240 0026 43EA0223 		orr	r3, r3, r2, lsl #8
 241              		.loc 1 128 5 view .LVU54
 242 002a 3380     		strh	r3, [r6]	@ movhi
 129:../Core/Src/adxl313.c **** 	*z = (int16_t)((((int)dev->comm_buff[5]) << 8) | dev->comm_buff[4]);
 243              		.loc 1 129 2 is_stmt 1 view .LVU55
 244              		.loc 1 129 38 is_stmt 0 view .LVU56
 245 002c 627D     		ldrb	r2, [r4, #21]	@ zero_extendqisi2
 246              		.loc 1 129 65 view .LVU57
 247 002e 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 248              		.loc 1 129 7 view .LVU58
 249 0030 43EA0223 		orr	r3, r3, r2, lsl #8
 250              		.loc 1 129 5 view .LVU59
 251 0034 2B80     		strh	r3, [r5]	@ movhi
 130:../Core/Src/adxl313.c **** 
 131:../Core/Src/adxl313.c **** 	// store last axis values 
 132:../Core/Src/adxl313.c **** 	dev->x = *x;
 252              		.loc 1 132 2 is_stmt 1 view .LVU60
 253              		.loc 1 132 11 is_stmt 0 view .LVU61
 254 0036 B7F90030 		ldrsh	r3, [r7]
 255              		.loc 1 132 9 view .LVU62
 256 003a 2385     		strh	r3, [r4, #40]	@ movhi
 133:../Core/Src/adxl313.c **** 	dev->y = *y;
 257              		.loc 1 133 2 is_stmt 1 view .LVU63
 258              		.loc 1 133 11 is_stmt 0 view .LVU64
 259 003c B6F90030 		ldrsh	r3, [r6]
 260              		.loc 1 133 9 view .LVU65
 261 0040 6385     		strh	r3, [r4, #42]	@ movhi
 134:../Core/Src/adxl313.c **** 	dev->z = *z;
 262              		.loc 1 134 2 is_stmt 1 view .LVU66
 263              		.loc 1 134 11 is_stmt 0 view .LVU67
 264 0042 B5F90030 		ldrsh	r3, [r5]
 265              		.loc 1 134 9 view .LVU68
 266 0046 A385     		strh	r3, [r4, #44]	@ movhi
 135:../Core/Src/adxl313.c **** 
 136:../Core/Src/adxl313.c **** 	/* NOT HERE 
 137:../Core/Src/adxl313.c **** 		-> into the interrupt service routine of SPI_Receive()*/
 138:../Core/Src/adxl313.c **** 	dev->data_ready = true;
 267              		.loc 1 138 2 is_stmt 1 view .LVU69
ARM GAS  /tmp/cctdo2D3.s 			page 8


 268              		.loc 1 138 18 is_stmt 0 view .LVU70
 269 0048 0123     		movs	r3, #1
 270 004a 84F83B30 		strb	r3, [r4, #59]
 139:../Core/Src/adxl313.c **** }
 271              		.loc 1 139 1 view .LVU71
 272 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 273              		.loc 1 139 1 view .LVU72
 274              		.cfi_endproc
 275              	.LFE153:
 277              		.section	.text.getRange,"ax",%progbits
 278              		.align	1
 279              		.global	getRange
 280              		.syntax unified
 281              		.thumb
 282              		.thumb_func
 283              		.fpu fpv5-d16
 285              	getRange:
 286              	.LVL14:
 287              	.LFB154:
 140:../Core/Src/adxl313.c **** 
 141:../Core/Src/adxl313.c **** /*************************** RANGE SETTING **************************/
 142:../Core/Src/adxl313.c **** /*          	OPTIONS: 0.5g, 1g, 2g, 4g ~ GET & SET          		*/
 143:../Core/Src/adxl313.c **** float getRange( adxl313_dev *dev) {
 288              		.loc 1 143 35 is_stmt 1 view -0
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 8
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 292              		.loc 1 143 35 is_stmt 0 view .LVU74
 293 0000 10B5     		push	{r4, lr}
 294              	.LCFI9:
 295              		.cfi_def_cfa_offset 8
 296              		.cfi_offset 4, -8
 297              		.cfi_offset 14, -4
 298 0002 82B0     		sub	sp, sp, #8
 299              	.LCFI10:
 300              		.cfi_def_cfa_offset 16
 301 0004 0446     		mov	r4, r0
 144:../Core/Src/adxl313.c **** 	uint8_t _b;
 302              		.loc 1 144 2 is_stmt 1 view .LVU75
 145:../Core/Src/adxl313.c **** 
 146:../Core/Src/adxl313.c **** 	spi_read(dev->spi_desc, ADXL313_DATA_FORMAT, 1, &_b);
 303              		.loc 1 146 2 view .LVU76
 304 0006 0DF10703 		add	r3, sp, #7
 305 000a 0122     		movs	r2, #1
 306 000c 3121     		movs	r1, #49
 307 000e 006B     		ldr	r0, [r0, #48]
 308              	.LVL15:
 309              		.loc 1 146 2 is_stmt 0 view .LVU77
 310 0010 FFF7FEFF 		bl	spi_read
 311              	.LVL16:
 147:../Core/Src/adxl313.c **** 	dev->range = (enum adxl313_range)(mask_reg(_b, 0x3));
 312              		.loc 1 147 2 is_stmt 1 view .LVU78
 313              		.loc 1 147 15 is_stmt 0 view .LVU79
 314 0014 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 315              	.LVL17:
 316              	.LBB16:
 317              	.LBI16:
ARM GAS  /tmp/cctdo2D3.s 			page 9


  21:../Core/Src/adxl313.c **** {
 318              		.loc 1 21 23 is_stmt 1 view .LVU80
 319              	.LBB17:
  23:../Core/Src/adxl313.c **** }
 320              		.loc 1 23 2 view .LVU81
  23:../Core/Src/adxl313.c **** }
 321              		.loc 1 23 9 is_stmt 0 view .LVU82
 322 0018 03F00303 		and	r3, r3, #3
 323              	.LVL18:
  23:../Core/Src/adxl313.c **** }
 324              		.loc 1 23 9 view .LVU83
 325              	.LBE17:
 326              	.LBE16:
 327              		.loc 1 147 13 view .LVU84
 328 001c 2370     		strb	r3, [r4]
 148:../Core/Src/adxl313.c **** 
 149:../Core/Src/adxl313.c **** 	float range_val = 0;
 329              		.loc 1 149 2 is_stmt 1 view .LVU85
 330              	.LVL19:
 150:../Core/Src/adxl313.c **** 	switch (dev->range) {
 331              		.loc 1 150 2 view .LVU86
 332 001e 032B     		cmp	r3, #3
 333 0020 03D8     		bhi	.L12
 334 0022 DFE803F0 		tbb	[pc, r3]
 335              	.L14:
 336 0026 0E       		.byte	(.L18-.L14)/2
 337 0027 05       		.byte	(.L16-.L14)/2
 338 0028 08       		.byte	(.L15-.L14)/2
 339 0029 0B       		.byte	(.L13-.L14)/2
 340              		.p2align 1
 341              	.L12:
 342 002a 9FED080A 		vldr.32	s0, .L20
 343 002e 0AE0     		b	.L11
 344              	.L16:
 151:../Core/Src/adxl313.c **** 		case ADXL313_0_5G_RANGE:
 152:../Core/Src/adxl313.c **** 			range_val = 0.5;
 153:../Core/Src/adxl313.c **** 			break;
 154:../Core/Src/adxl313.c **** 		case ADXL313_1G_RANGE:
 155:../Core/Src/adxl313.c **** 			range_val = 1.0;
 345              		.loc 1 155 4 view .LVU87
 346              	.LVL20:
 156:../Core/Src/adxl313.c **** 			break;
 347              		.loc 1 156 4 view .LVU88
 155:../Core/Src/adxl313.c **** 			break;
 348              		.loc 1 155 14 is_stmt 0 view .LVU89
 349 0030 B7EE000A 		vmov.f32	s0, #1.0e+0
 350              		.loc 1 156 4 view .LVU90
 351 0034 07E0     		b	.L11
 352              	.LVL21:
 353              	.L15:
 157:../Core/Src/adxl313.c **** 		case ADXL313_2G_RANGE:
 158:../Core/Src/adxl313.c **** 			range_val = 2.0;
 354              		.loc 1 158 4 is_stmt 1 view .LVU91
 159:../Core/Src/adxl313.c **** 			break;
 355              		.loc 1 159 4 view .LVU92
 158:../Core/Src/adxl313.c **** 			break;
 356              		.loc 1 158 14 is_stmt 0 view .LVU93
ARM GAS  /tmp/cctdo2D3.s 			page 10


 357 0036 B0EE000A 		vmov.f32	s0, #2.0e+0
 358              		.loc 1 159 4 view .LVU94
 359 003a 04E0     		b	.L11
 360              	.LVL22:
 361              	.L13:
 160:../Core/Src/adxl313.c **** 		case ADXL313_4G_RANGE:
 161:../Core/Src/adxl313.c **** 			range_val = 4.0;
 362              		.loc 1 161 4 is_stmt 1 view .LVU95
 162:../Core/Src/adxl313.c **** 			break;
 363              		.loc 1 162 4 view .LVU96
 161:../Core/Src/adxl313.c **** 			break;
 364              		.loc 1 161 14 is_stmt 0 view .LVU97
 365 003c B1EE000A 		vmov.f32	s0, #4.0e+0
 366              		.loc 1 162 4 view .LVU98
 367 0040 01E0     		b	.L11
 368              	.LVL23:
 369              	.L18:
 152:../Core/Src/adxl313.c **** 			break;
 370              		.loc 1 152 14 view .LVU99
 371 0042 B6EE000A 		vmov.f32	s0, #5.0e-1
 372              	.LVL24:
 163:../Core/Src/adxl313.c **** 	}
 164:../Core/Src/adxl313.c **** 	return range_val;
 373              		.loc 1 164 2 is_stmt 1 view .LVU100
 374              	.L11:
 165:../Core/Src/adxl313.c **** }
 375              		.loc 1 165 1 is_stmt 0 view .LVU101
 376 0046 02B0     		add	sp, sp, #8
 377              	.LCFI11:
 378              		.cfi_def_cfa_offset 8
 379              		@ sp needed
 380 0048 10BD     		pop	{r4, pc}
 381              	.LVL25:
 382              	.L21:
 383              		.loc 1 165 1 view .LVU102
 384 004a 00BF     		.align	2
 385              	.L20:
 386 004c 00000000 		.word	0
 387              		.cfi_endproc
 388              	.LFE154:
 390              		.section	.text.setRange,"ax",%progbits
 391              		.align	1
 392              		.global	setRange
 393              		.syntax unified
 394              		.thumb
 395              		.thumb_func
 396              		.fpu fpv5-d16
 398              	setRange:
 399              	.LVL26:
 400              	.LFB155:
 166:../Core/Src/adxl313.c **** 
 167:../Core/Src/adxl313.c **** void setRange( adxl313_dev *dev, enum adxl313_range range) {
 401              		.loc 1 167 60 is_stmt 1 view -0
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 8
 404              		@ frame_needed = 0, uses_anonymous_args = 0
 405              		.loc 1 167 60 is_stmt 0 view .LVU104
ARM GAS  /tmp/cctdo2D3.s 			page 11


 406 0000 30B5     		push	{r4, r5, lr}
 407              	.LCFI12:
 408              		.cfi_def_cfa_offset 12
 409              		.cfi_offset 4, -12
 410              		.cfi_offset 5, -8
 411              		.cfi_offset 14, -4
 412 0002 83B0     		sub	sp, sp, #12
 413              	.LCFI13:
 414              		.cfi_def_cfa_offset 24
 415 0004 0446     		mov	r4, r0
 168:../Core/Src/adxl313.c **** 	uint8_t _s;
 416              		.loc 1 168 2 is_stmt 1 view .LVU105
 169:../Core/Src/adxl313.c **** 	uint8_t _b;
 417              		.loc 1 169 2 view .LVU106
 170:../Core/Src/adxl313.c **** 
 171:../Core/Src/adxl313.c **** 	_s = mask_reg(range, 0x3);
 418              		.loc 1 171 2 view .LVU107
 419              	.LVL27:
 420              	.LBB18:
 421              	.LBI18:
  21:../Core/Src/adxl313.c **** {
 422              		.loc 1 21 23 view .LVU108
 423              	.LBB19:
  23:../Core/Src/adxl313.c **** }
 424              		.loc 1 23 2 view .LVU109
  23:../Core/Src/adxl313.c **** }
 425              		.loc 1 23 9 is_stmt 0 view .LVU110
 426 0006 01F00305 		and	r5, r1, #3
 427              	.LVL28:
  23:../Core/Src/adxl313.c **** }
 428              		.loc 1 23 9 view .LVU111
 429              	.LBE19:
 430              	.LBE18:
 172:../Core/Src/adxl313.c **** 
 173:../Core/Src/adxl313.c **** 	spi_read(dev->spi_desc, ADXL313_DATA_FORMAT, 1, &_b);
 431              		.loc 1 173 2 is_stmt 1 view .LVU112
 432 000a 0DF10703 		add	r3, sp, #7
 433 000e 0122     		movs	r2, #1
 434 0010 3121     		movs	r1, #49
 435              	.LVL29:
 436              		.loc 1 173 2 is_stmt 0 view .LVU113
 437 0012 006B     		ldr	r0, [r0, #48]
 438              	.LVL30:
 439              		.loc 1 173 2 view .LVU114
 440 0014 FFF7FEFF 		bl	spi_read
 441              	.LVL31:
 174:../Core/Src/adxl313.c **** 	_s |= mask_reg(_b, 0xEC);
 442              		.loc 1 174 2 is_stmt 1 view .LVU115
 443              		.loc 1 174 8 is_stmt 0 view .LVU116
 444 0018 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 445              	.LVL32:
 446              	.LBB20:
 447              	.LBI20:
  21:../Core/Src/adxl313.c **** {
 448              		.loc 1 21 23 is_stmt 1 view .LVU117
 449              	.LBB21:
  23:../Core/Src/adxl313.c **** }
ARM GAS  /tmp/cctdo2D3.s 			page 12


 450              		.loc 1 23 2 view .LVU118
  23:../Core/Src/adxl313.c **** }
 451              		.loc 1 23 9 is_stmt 0 view .LVU119
 452 001c 02F0EC02 		and	r2, r2, #236
 453              	.LVL33:
  23:../Core/Src/adxl313.c **** }
 454              		.loc 1 23 9 view .LVU120
 455              	.LBE21:
 456              	.LBE20:
 175:../Core/Src/adxl313.c **** 
 176:../Core/Src/adxl313.c **** 	spi_write(dev->spi_desc, ADXL313_DATA_FORMAT, _s, 1);
 457              		.loc 1 176 2 is_stmt 1 view .LVU121
 458 0020 0123     		movs	r3, #1
 459 0022 2A43     		orrs	r2, r2, r5
 460              	.LVL34:
 461              		.loc 1 176 2 is_stmt 0 view .LVU122
 462 0024 3121     		movs	r1, #49
 463 0026 206B     		ldr	r0, [r4, #48]
 464 0028 FFF7FEFF 		bl	spi_write
 465              	.LVL35:
 177:../Core/Src/adxl313.c **** }
 466              		.loc 1 177 1 view .LVU123
 467 002c 03B0     		add	sp, sp, #12
 468              	.LCFI14:
 469              		.cfi_def_cfa_offset 12
 470              		@ sp needed
 471 002e 30BD     		pop	{r4, r5, pc}
 472              		.loc 1 177 1 view .LVU124
 473              		.cfi_endproc
 474              	.LFE155:
 476              		.section	.text.setRegisterBit,"ax",%progbits
 477              		.align	1
 478              		.global	setRegisterBit
 479              		.syntax unified
 480              		.thumb
 481              		.thumb_func
 482              		.fpu fpv5-d16
 484              	setRegisterBit:
 485              	.LVL36:
 486              	.LFB156:
 178:../Core/Src/adxl313.c **** 
 179:../Core/Src/adxl313.c **** /****************************************************************
 180:../Core/Src/adxl313.c ****  * @brief Set a bit in register.
 181:../Core/Src/adxl313.c ****  * 
 182:../Core/Src/adxl313.c ****  * @param dev 		- The device structure.
 183:../Core/Src/adxl313.c ****  * @param regAdress - The register address in the device.
 184:../Core/Src/adxl313.c ****  * @param bitPos 	- The position of the bit one wants to set.
 185:../Core/Src/adxl313.c ****  * @param state 	- State to set (1 or 0)
 186:../Core/Src/adxl313.c ****  ****************************************************************/
 187:../Core/Src/adxl313.c **** void setRegisterBit( adxl313_dev *dev, uint8_t regAdress, int bitPos, bool state) {
 487              		.loc 1 187 83 is_stmt 1 view -0
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 8
 490              		@ frame_needed = 0, uses_anonymous_args = 0
 491              		.loc 1 187 83 is_stmt 0 view .LVU126
 492 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 493              	.LCFI15:
ARM GAS  /tmp/cctdo2D3.s 			page 13


 494              		.cfi_def_cfa_offset 20
 495              		.cfi_offset 4, -20
 496              		.cfi_offset 5, -16
 497              		.cfi_offset 6, -12
 498              		.cfi_offset 7, -8
 499              		.cfi_offset 14, -4
 500 0002 83B0     		sub	sp, sp, #12
 501              	.LCFI16:
 502              		.cfi_def_cfa_offset 32
 503 0004 0446     		mov	r4, r0
 504 0006 0D46     		mov	r5, r1
 505 0008 1646     		mov	r6, r2
 506 000a 1F46     		mov	r7, r3
 188:../Core/Src/adxl313.c **** 	uint8_t _b;
 507              		.loc 1 188 2 is_stmt 1 view .LVU127
 189:../Core/Src/adxl313.c **** 	spi_read(dev->spi_desc, regAdress, 1, &_b);
 508              		.loc 1 189 2 view .LVU128
 509 000c 0DF10703 		add	r3, sp, #7
 510              	.LVL37:
 511              		.loc 1 189 2 is_stmt 0 view .LVU129
 512 0010 0122     		movs	r2, #1
 513              	.LVL38:
 514              		.loc 1 189 2 view .LVU130
 515 0012 006B     		ldr	r0, [r0, #48]
 516              	.LVL39:
 517              		.loc 1 189 2 view .LVU131
 518 0014 FFF7FEFF 		bl	spi_read
 519              	.LVL40:
 190:../Core/Src/adxl313.c **** 
 191:../Core/Src/adxl313.c **** 	(state == true) ? (_b |= (1 << bitPos)) : (_b &= ~(1 << bitPos));
 520              		.loc 1 191 2 is_stmt 1 view .LVU132
 521              		.loc 1 191 42 is_stmt 0 view .LVU133
 522 0018 012F     		cmp	r7, #1
 523 001a 10D0     		beq	.L28
 524              		.loc 1 191 55 discriminator 2 view .LVU134
 525 001c 0122     		movs	r2, #1
 526 001e B240     		lsls	r2, r2, r6
 527              		.loc 1 191 48 discriminator 2 view .LVU135
 528 0020 9DF80760 		ldrb	r6, [sp, #7]	@ zero_extendqisi2
 529              	.LVL41:
 530              		.loc 1 191 48 discriminator 2 view .LVU136
 531 0024 26EA0206 		bic	r6, r6, r2
 532 0028 8DF80760 		strb	r6, [sp, #7]
 533              	.L26:
 192:../Core/Src/adxl313.c **** 	
 193:../Core/Src/adxl313.c **** 	// if (state) {
 194:../Core/Src/adxl313.c **** 	// 	_b |= (1 << bitPos);  // Forces nth Bit of _b to 1. Other Bits Unchanged.
 195:../Core/Src/adxl313.c **** 	// }
 196:../Core/Src/adxl313.c **** 	// else {
 197:../Core/Src/adxl313.c **** 	// 	_b &= ~(1 << bitPos); // Forces nth Bit of _b to 0. Other Bits Unchanged.
 198:../Core/Src/adxl313.c **** 	// }
 199:../Core/Src/adxl313.c **** 	
 200:../Core/Src/adxl313.c **** 	spi_write(dev->spi_desc, regAdress, _b, 1);
 534              		.loc 1 200 2 is_stmt 1 view .LVU137
 535 002c 0123     		movs	r3, #1
 536 002e 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 537 0032 2946     		mov	r1, r5
ARM GAS  /tmp/cctdo2D3.s 			page 14


 538 0034 206B     		ldr	r0, [r4, #48]
 539 0036 FFF7FEFF 		bl	spi_write
 540              	.LVL42:
 201:../Core/Src/adxl313.c **** }
 541              		.loc 1 201 1 is_stmt 0 view .LVU138
 542 003a 03B0     		add	sp, sp, #12
 543              	.LCFI17:
 544              		.cfi_remember_state
 545              		.cfi_def_cfa_offset 20
 546              		@ sp needed
 547 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 548              	.LVL43:
 549              	.L28:
 550              	.LCFI18:
 551              		.cfi_restore_state
 191:../Core/Src/adxl313.c **** 	
 552              		.loc 1 191 30 discriminator 1 view .LVU139
 553 003e 0122     		movs	r2, #1
 554 0040 B240     		lsls	r2, r2, r6
 191:../Core/Src/adxl313.c **** 	
 555              		.loc 1 191 24 discriminator 1 view .LVU140
 556 0042 9DF80760 		ldrb	r6, [sp, #7]	@ zero_extendqisi2
 557              	.LVL44:
 191:../Core/Src/adxl313.c **** 	
 558              		.loc 1 191 24 discriminator 1 view .LVU141
 559 0046 1643     		orrs	r6, r6, r2
 560 0048 8DF80760 		strb	r6, [sp, #7]
 561 004c EEE7     		b	.L26
 562              		.cfi_endproc
 563              	.LFE156:
 565              		.section	.text.standby,"ax",%progbits
 566              		.align	1
 567              		.global	standby
 568              		.syntax unified
 569              		.thumb
 570              		.thumb_func
 571              		.fpu fpv5-d16
 573              	standby:
 574              	.LVL45:
 575              	.LFB150:
 102:../Core/Src/adxl313.c **** 	// clears the measure bit, putting decive in standby mode, ready for configuration
 576              		.loc 1 102 33 is_stmt 1 view -0
 577              		.cfi_startproc
 578              		@ args = 0, pretend = 0, frame = 0
 579              		@ frame_needed = 0, uses_anonymous_args = 0
 102:../Core/Src/adxl313.c **** 	// clears the measure bit, putting decive in standby mode, ready for configuration
 580              		.loc 1 102 33 is_stmt 0 view .LVU143
 581 0000 08B5     		push	{r3, lr}
 582              	.LCFI19:
 583              		.cfi_def_cfa_offset 8
 584              		.cfi_offset 3, -8
 585              		.cfi_offset 14, -4
 104:../Core/Src/adxl313.c **** 	return (true);
 586              		.loc 1 104 2 is_stmt 1 view .LVU144
 587 0002 0023     		movs	r3, #0
 588 0004 0322     		movs	r2, #3
 589 0006 2D21     		movs	r1, #45
ARM GAS  /tmp/cctdo2D3.s 			page 15


 590 0008 FFF7FEFF 		bl	setRegisterBit
 591              	.LVL46:
 105:../Core/Src/adxl313.c **** }
 592              		.loc 1 105 2 view .LVU145
 106:../Core/Src/adxl313.c **** 
 593              		.loc 1 106 1 is_stmt 0 view .LVU146
 594 000c 0120     		movs	r0, #1
 595 000e 08BD     		pop	{r3, pc}
 596              		.cfi_endproc
 597              	.LFE150:
 599              		.section	.text.measureModeOn,"ax",%progbits
 600              		.align	1
 601              		.global	measureModeOn
 602              		.syntax unified
 603              		.thumb
 604              		.thumb_func
 605              		.fpu fpv5-d16
 607              	measureModeOn:
 608              	.LVL47:
 609              	.LFB151:
 108:../Core/Src/adxl313.c **** 	// sets the measure bit, putting decive in measure mode, ready for reading data
 610              		.loc 1 108 39 is_stmt 1 view -0
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 0
 613              		@ frame_needed = 0, uses_anonymous_args = 0
 108:../Core/Src/adxl313.c **** 	// sets the measure bit, putting decive in measure mode, ready for reading data
 614              		.loc 1 108 39 is_stmt 0 view .LVU148
 615 0000 08B5     		push	{r3, lr}
 616              	.LCFI20:
 617              		.cfi_def_cfa_offset 8
 618              		.cfi_offset 3, -8
 619              		.cfi_offset 14, -4
 110:../Core/Src/adxl313.c **** 	return (true);
 620              		.loc 1 110 2 is_stmt 1 view .LVU149
 621 0002 0123     		movs	r3, #1
 622 0004 0322     		movs	r2, #3
 623 0006 2D21     		movs	r1, #45
 624 0008 FFF7FEFF 		bl	setRegisterBit
 625              	.LVL48:
 111:../Core/Src/adxl313.c **** }
 626              		.loc 1 111 2 view .LVU150
 112:../Core/Src/adxl313.c **** 
 627              		.loc 1 112 1 is_stmt 0 view .LVU151
 628 000c 0120     		movs	r0, #1
 629 000e 08BD     		pop	{r3, pc}
 630              		.cfi_endproc
 631              	.LFE151:
 633              		.section	.text.getRegisterBit,"ax",%progbits
 634              		.align	1
 635              		.global	getRegisterBit
 636              		.syntax unified
 637              		.thumb
 638              		.thumb_func
 639              		.fpu fpv5-d16
 641              	getRegisterBit:
 642              	.LVL49:
 643              	.LFB157:
ARM GAS  /tmp/cctdo2D3.s 			page 16


 202:../Core/Src/adxl313.c **** 
 203:../Core/Src/adxl313.c **** /****************************************************************
 204:../Core/Src/adxl313.c ****  * @brief Get a bit in register.
 205:../Core/Src/adxl313.c ****  * 
 206:../Core/Src/adxl313.c ****  * @param dev 		- The device structure.
 207:../Core/Src/adxl313.c ****  * @param regAdress - The register address in the device.
 208:../Core/Src/adxl313.c ****  * @param bitPos 	- The position of the bit one wants to get.
 209:../Core/Src/adxl313.c **** ****************************************************************/
 210:../Core/Src/adxl313.c **** bool getRegisterBit( adxl313_dev *dev, uint8_t regAdress, int bitPos) {
 644              		.loc 1 210 71 is_stmt 1 view -0
 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 8
 647              		@ frame_needed = 0, uses_anonymous_args = 0
 648              		.loc 1 210 71 is_stmt 0 view .LVU153
 649 0000 10B5     		push	{r4, lr}
 650              	.LCFI21:
 651              		.cfi_def_cfa_offset 8
 652              		.cfi_offset 4, -8
 653              		.cfi_offset 14, -4
 654 0002 82B0     		sub	sp, sp, #8
 655              	.LCFI22:
 656              		.cfi_def_cfa_offset 16
 657 0004 1446     		mov	r4, r2
 211:../Core/Src/adxl313.c **** 	uint8_t _b;
 658              		.loc 1 211 2 is_stmt 1 view .LVU154
 212:../Core/Src/adxl313.c **** 	spi_read(dev->spi_desc, regAdress, 1, &_b);
 659              		.loc 1 212 2 view .LVU155
 660 0006 0DF10703 		add	r3, sp, #7
 661 000a 0122     		movs	r2, #1
 662              	.LVL50:
 663              		.loc 1 212 2 is_stmt 0 view .LVU156
 664 000c 006B     		ldr	r0, [r0, #48]
 665              	.LVL51:
 666              		.loc 1 212 2 view .LVU157
 667 000e FFF7FEFF 		bl	spi_read
 668              	.LVL52:
 213:../Core/Src/adxl313.c **** 	return (mask_reg((_b >> bitPos), 1));
 669              		.loc 1 213 2 is_stmt 1 view .LVU158
 670              		.loc 1 213 23 is_stmt 0 view .LVU159
 671 0012 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 672 0016 2041     		asrs	r0, r0, r4
 673              	.LVL53:
 674              	.LBB22:
 675              	.LBI22:
  21:../Core/Src/adxl313.c **** {
 676              		.loc 1 21 23 is_stmt 1 view .LVU160
 677              	.LBB23:
  23:../Core/Src/adxl313.c **** }
 678              		.loc 1 23 2 view .LVU161
  23:../Core/Src/adxl313.c **** }
 679              		.loc 1 23 2 is_stmt 0 view .LVU162
 680              	.LBE23:
 681              	.LBE22:
 214:../Core/Src/adxl313.c **** }
 682              		.loc 1 214 1 view .LVU163
 683 0018 00F00100 		and	r0, r0, #1
 684 001c 02B0     		add	sp, sp, #8
ARM GAS  /tmp/cctdo2D3.s 			page 17


 685              	.LCFI23:
 686              		.cfi_def_cfa_offset 8
 687              		@ sp needed
 688 001e 10BD     		pop	{r4, pc}
 689              		.loc 1 214 1 view .LVU164
 690              		.cfi_endproc
 691              	.LFE157:
 693              		.section	.text.dataReady,"ax",%progbits
 694              		.align	1
 695              		.global	dataReady
 696              		.syntax unified
 697              		.thumb
 698              		.thumb_func
 699              		.fpu fpv5-d16
 701              	dataReady:
 702              	.LVL54:
 703              	.LFB148:
  86:../Core/Src/adxl313.c **** 	return getRegisterBit(dev, ADXL313_INT_SOURCE, ADXL313_INT_DATA_READY_BIT);	// check the dataReady
 704              		.loc 1 86 35 is_stmt 1 view -0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 0
 707              		@ frame_needed = 0, uses_anonymous_args = 0
  86:../Core/Src/adxl313.c **** 	return getRegisterBit(dev, ADXL313_INT_SOURCE, ADXL313_INT_DATA_READY_BIT);	// check the dataReady
 708              		.loc 1 86 35 is_stmt 0 view .LVU166
 709 0000 08B5     		push	{r3, lr}
 710              	.LCFI24:
 711              		.cfi_def_cfa_offset 8
 712              		.cfi_offset 3, -8
 713              		.cfi_offset 14, -4
  87:../Core/Src/adxl313.c **** }
 714              		.loc 1 87 2 is_stmt 1 view .LVU167
  87:../Core/Src/adxl313.c **** }
 715              		.loc 1 87 9 is_stmt 0 view .LVU168
 716 0002 0722     		movs	r2, #7
 717 0004 3021     		movs	r1, #48
 718 0006 FFF7FEFF 		bl	getRegisterBit
 719              	.LVL55:
  88:../Core/Src/adxl313.c **** 
 720              		.loc 1 88 1 view .LVU169
 721 000a 08BD     		pop	{r3, pc}
 722              		.cfi_endproc
 723              	.LFE148:
 725              		.section	.text.autosleepOn,"ax",%progbits
 726              		.align	1
 727              		.global	autosleepOn
 728              		.syntax unified
 729              		.thumb
 730              		.thumb_func
 731              		.fpu fpv5-d16
 733              	autosleepOn:
 734              	.LVL56:
 735              	.LFB158:
 215:../Core/Src/adxl313.c **** 
 216:../Core/Src/adxl313.c **** /*************************** AUTOSLEEP BIT **************************/
 217:../Core/Src/adxl313.c **** /*                            ~ ON & OFF                           	*/
 218:../Core/Src/adxl313.c **** void autosleepOn( adxl313_dev *dev) {
 736              		.loc 1 218 37 is_stmt 1 view -0
ARM GAS  /tmp/cctdo2D3.s 			page 18


 737              		.cfi_startproc
 738              		@ args = 0, pretend = 0, frame = 0
 739              		@ frame_needed = 0, uses_anonymous_args = 0
 740              		.loc 1 218 37 is_stmt 0 view .LVU171
 741 0000 10B5     		push	{r4, lr}
 742              	.LCFI25:
 743              		.cfi_def_cfa_offset 8
 744              		.cfi_offset 4, -8
 745              		.cfi_offset 14, -4
 746 0002 0446     		mov	r4, r0
 219:../Core/Src/adxl313.c **** 	// sets the autosleep bit
 220:../Core/Src/adxl313.c **** 	// note, prior to calling this, 
 221:../Core/Src/adxl313.c **** 	// you will need to set THRESH_INACT and TIME_INACT.
 222:../Core/Src/adxl313.c **** 	// set the link bit, to "link" activity and inactivity sensing
 223:../Core/Src/adxl313.c **** 	setRegisterBit(dev, ADXL313_POWER_CTL, ADXL313_LINK_BIT, true);
 747              		.loc 1 223 2 is_stmt 1 view .LVU172
 748 0004 0123     		movs	r3, #1
 749 0006 0522     		movs	r2, #5
 750 0008 2D21     		movs	r1, #45
 751 000a FFF7FEFF 		bl	setRegisterBit
 752              	.LVL57:
 224:../Core/Src/adxl313.c **** 	
 225:../Core/Src/adxl313.c **** 	// set the autosleep
 226:../Core/Src/adxl313.c **** 	setRegisterBit(dev, ADXL313_POWER_CTL, ADXL313_AUTOSLEEP_BIT, true);
 753              		.loc 1 226 2 view .LVU173
 754 000e 0123     		movs	r3, #1
 755 0010 0422     		movs	r2, #4
 756 0012 2D21     		movs	r1, #45
 757 0014 2046     		mov	r0, r4
 758 0016 FFF7FEFF 		bl	setRegisterBit
 759              	.LVL58:
 227:../Core/Src/adxl313.c **** }
 760              		.loc 1 227 1 is_stmt 0 view .LVU174
 761 001a 10BD     		pop	{r4, pc}
 762              		.loc 1 227 1 view .LVU175
 763              		.cfi_endproc
 764              	.LFE158:
 766              		.section	.text.autosleepOff,"ax",%progbits
 767              		.align	1
 768              		.global	autosleepOff
 769              		.syntax unified
 770              		.thumb
 771              		.thumb_func
 772              		.fpu fpv5-d16
 774              	autosleepOff:
 775              	.LVL59:
 776              	.LFB159:
 228:../Core/Src/adxl313.c **** 
 229:../Core/Src/adxl313.c **** void autosleepOff( adxl313_dev *dev) {
 777              		.loc 1 229 38 is_stmt 1 view -0
 778              		.cfi_startproc
 779              		@ args = 0, pretend = 0, frame = 0
 780              		@ frame_needed = 0, uses_anonymous_args = 0
 781              		.loc 1 229 38 is_stmt 0 view .LVU177
 782 0000 08B5     		push	{r3, lr}
 783              	.LCFI26:
 784              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cctdo2D3.s 			page 19


 785              		.cfi_offset 3, -8
 786              		.cfi_offset 14, -4
 230:../Core/Src/adxl313.c **** 	// clears the autosleep bit
 231:../Core/Src/adxl313.c **** 	setRegisterBit(dev, ADXL313_POWER_CTL, ADXL313_AUTOSLEEP_BIT, false);
 787              		.loc 1 231 2 is_stmt 1 view .LVU178
 788 0002 0023     		movs	r3, #0
 789 0004 0422     		movs	r2, #4
 790 0006 2D21     		movs	r1, #45
 791 0008 FFF7FEFF 		bl	setRegisterBit
 792              	.LVL60:
 232:../Core/Src/adxl313.c **** }
 793              		.loc 1 232 1 is_stmt 0 view .LVU179
 794 000c 08BD     		pop	{r3, pc}
 795              		.cfi_endproc
 796              	.LFE159:
 798              		.section	.text.getSelfTestBit,"ax",%progbits
 799              		.align	1
 800              		.global	getSelfTestBit
 801              		.syntax unified
 802              		.thumb
 803              		.thumb_func
 804              		.fpu fpv5-d16
 806              	getSelfTestBit:
 807              	.LVL61:
 808              	.LFB160:
 233:../Core/Src/adxl313.c **** 
 234:../Core/Src/adxl313.c **** /*************************** SELF_TEST BIT **************************/
 235:../Core/Src/adxl313.c **** /*                            ~ GET & SET                           */
 236:../Core/Src/adxl313.c **** bool getSelfTestBit( adxl313_dev *dev) {
 809              		.loc 1 236 40 is_stmt 1 view -0
 810              		.cfi_startproc
 811              		@ args = 0, pretend = 0, frame = 0
 812              		@ frame_needed = 0, uses_anonymous_args = 0
 813              		.loc 1 236 40 is_stmt 0 view .LVU181
 814 0000 08B5     		push	{r3, lr}
 815              	.LCFI27:
 816              		.cfi_def_cfa_offset 8
 817              		.cfi_offset 3, -8
 818              		.cfi_offset 14, -4
 237:../Core/Src/adxl313.c **** 	return getRegisterBit(dev, ADXL313_DATA_FORMAT, 7);
 819              		.loc 1 237 2 is_stmt 1 view .LVU182
 820              		.loc 1 237 9 is_stmt 0 view .LVU183
 821 0002 0722     		movs	r2, #7
 822 0004 3121     		movs	r1, #49
 823 0006 FFF7FEFF 		bl	getRegisterBit
 824              	.LVL62:
 238:../Core/Src/adxl313.c **** }
 825              		.loc 1 238 1 view .LVU184
 826 000a 08BD     		pop	{r3, pc}
 827              		.cfi_endproc
 828              	.LFE160:
 830              		.section	.text.setSelfTestBit,"ax",%progbits
 831              		.align	1
 832              		.global	setSelfTestBit
 833              		.syntax unified
 834              		.thumb
 835              		.thumb_func
ARM GAS  /tmp/cctdo2D3.s 			page 20


 836              		.fpu fpv5-d16
 838              	setSelfTestBit:
 839              	.LVL63:
 840              	.LFB161:
 239:../Core/Src/adxl313.c **** 
 240:../Core/Src/adxl313.c **** // If Set (1) Self-Test Applied. Electrostatic Force exerted on the sensor
 241:../Core/Src/adxl313.c **** //  causing a shift in the output data.
 242:../Core/Src/adxl313.c **** // If Set (0) Self-Test Disabled.
 243:../Core/Src/adxl313.c **** void setSelfTestBit( adxl313_dev *dev, bool selfTestBit) {
 841              		.loc 1 243 58 is_stmt 1 view -0
 842              		.cfi_startproc
 843              		@ args = 0, pretend = 0, frame = 0
 844              		@ frame_needed = 0, uses_anonymous_args = 0
 845              		.loc 1 243 58 is_stmt 0 view .LVU186
 846 0000 08B5     		push	{r3, lr}
 847              	.LCFI28:
 848              		.cfi_def_cfa_offset 8
 849              		.cfi_offset 3, -8
 850              		.cfi_offset 14, -4
 851 0002 0B46     		mov	r3, r1
 244:../Core/Src/adxl313.c **** 	setRegisterBit(dev, ADXL313_DATA_FORMAT, 7, selfTestBit);
 852              		.loc 1 244 2 is_stmt 1 view .LVU187
 853 0004 0722     		movs	r2, #7
 854 0006 3121     		movs	r1, #49
 855              	.LVL64:
 856              		.loc 1 244 2 is_stmt 0 view .LVU188
 857 0008 FFF7FEFF 		bl	setRegisterBit
 858              	.LVL65:
 245:../Core/Src/adxl313.c **** }
 859              		.loc 1 245 1 view .LVU189
 860 000c 08BD     		pop	{r3, pc}
 861              		.cfi_endproc
 862              	.LFE161:
 864              		.section	.text.getSpiBit,"ax",%progbits
 865              		.align	1
 866              		.global	getSpiBit
 867              		.syntax unified
 868              		.thumb
 869              		.thumb_func
 870              		.fpu fpv5-d16
 872              	getSpiBit:
 873              	.LVL66:
 874              	.LFB162:
 246:../Core/Src/adxl313.c **** 
 247:../Core/Src/adxl313.c **** /*************************** SPI BIT STATE **************************/
 248:../Core/Src/adxl313.c **** /*                           ~ GET & SET                            */
 249:../Core/Src/adxl313.c **** bool getSpiBit( adxl313_dev *dev) {
 875              		.loc 1 249 35 is_stmt 1 view -0
 876              		.cfi_startproc
 877              		@ args = 0, pretend = 0, frame = 0
 878              		@ frame_needed = 0, uses_anonymous_args = 0
 879              		.loc 1 249 35 is_stmt 0 view .LVU191
 880 0000 08B5     		push	{r3, lr}
 881              	.LCFI29:
 882              		.cfi_def_cfa_offset 8
 883              		.cfi_offset 3, -8
 884              		.cfi_offset 14, -4
ARM GAS  /tmp/cctdo2D3.s 			page 21


 250:../Core/Src/adxl313.c **** 	return getRegisterBit(dev, ADXL313_DATA_FORMAT, 6);
 885              		.loc 1 250 2 is_stmt 1 view .LVU192
 886              		.loc 1 250 9 is_stmt 0 view .LVU193
 887 0002 0622     		movs	r2, #6
 888 0004 3121     		movs	r1, #49
 889 0006 FFF7FEFF 		bl	getRegisterBit
 890              	.LVL67:
 251:../Core/Src/adxl313.c **** }
 891              		.loc 1 251 1 view .LVU194
 892 000a 08BD     		pop	{r3, pc}
 893              		.cfi_endproc
 894              	.LFE162:
 896              		.section	.text.setSpiBit,"ax",%progbits
 897              		.align	1
 898              		.global	setSpiBit
 899              		.syntax unified
 900              		.thumb
 901              		.thumb_func
 902              		.fpu fpv5-d16
 904              	setSpiBit:
 905              	.LVL68:
 906              	.LFB163:
 252:../Core/Src/adxl313.c **** 
 253:../Core/Src/adxl313.c **** // If Set (1) Puts Device in 3-wire Mode
 254:../Core/Src/adxl313.c **** // If Set (0) Puts Device in 4-wire SPI Mode
 255:../Core/Src/adxl313.c **** void setSpiBit( adxl313_dev *dev, bool spiBit) {
 907              		.loc 1 255 48 is_stmt 1 view -0
 908              		.cfi_startproc
 909              		@ args = 0, pretend = 0, frame = 0
 910              		@ frame_needed = 0, uses_anonymous_args = 0
 911              		.loc 1 255 48 is_stmt 0 view .LVU196
 912 0000 08B5     		push	{r3, lr}
 913              	.LCFI30:
 914              		.cfi_def_cfa_offset 8
 915              		.cfi_offset 3, -8
 916              		.cfi_offset 14, -4
 917 0002 0B46     		mov	r3, r1
 256:../Core/Src/adxl313.c **** 	setRegisterBit(dev, ADXL313_DATA_FORMAT, 6, spiBit);
 918              		.loc 1 256 2 is_stmt 1 view .LVU197
 919 0004 0622     		movs	r2, #6
 920 0006 3121     		movs	r1, #49
 921              	.LVL69:
 922              		.loc 1 256 2 is_stmt 0 view .LVU198
 923 0008 FFF7FEFF 		bl	setRegisterBit
 924              	.LVL70:
 257:../Core/Src/adxl313.c **** }
 925              		.loc 1 257 1 view .LVU199
 926 000c 08BD     		pop	{r3, pc}
 927              		.cfi_endproc
 928              	.LFE163:
 930              		.section	.text.getInterruptLevelBit,"ax",%progbits
 931              		.align	1
 932              		.global	getInterruptLevelBit
 933              		.syntax unified
 934              		.thumb
 935              		.thumb_func
 936              		.fpu fpv5-d16
ARM GAS  /tmp/cctdo2D3.s 			page 22


 938              	getInterruptLevelBit:
 939              	.LVL71:
 940              	.LFB164:
 258:../Core/Src/adxl313.c **** 
 259:../Core/Src/adxl313.c **** /*********************** INT_INVERT BIT STATE ***********************/
 260:../Core/Src/adxl313.c **** /*                           ~ GET & SET                            */
 261:../Core/Src/adxl313.c **** bool getInterruptLevelBit( adxl313_dev *dev) {
 941              		.loc 1 261 46 is_stmt 1 view -0
 942              		.cfi_startproc
 943              		@ args = 0, pretend = 0, frame = 0
 944              		@ frame_needed = 0, uses_anonymous_args = 0
 945              		.loc 1 261 46 is_stmt 0 view .LVU201
 946 0000 08B5     		push	{r3, lr}
 947              	.LCFI31:
 948              		.cfi_def_cfa_offset 8
 949              		.cfi_offset 3, -8
 950              		.cfi_offset 14, -4
 262:../Core/Src/adxl313.c **** 	return getRegisterBit(dev, ADXL313_DATA_FORMAT, 5);
 951              		.loc 1 262 2 is_stmt 1 view .LVU202
 952              		.loc 1 262 9 is_stmt 0 view .LVU203
 953 0002 0522     		movs	r2, #5
 954 0004 3121     		movs	r1, #49
 955 0006 FFF7FEFF 		bl	getRegisterBit
 956              	.LVL72:
 263:../Core/Src/adxl313.c **** }
 957              		.loc 1 263 1 view .LVU204
 958 000a 08BD     		pop	{r3, pc}
 959              		.cfi_endproc
 960              	.LFE164:
 962              		.section	.text.setInterruptLevelBit,"ax",%progbits
 963              		.align	1
 964              		.global	setInterruptLevelBit
 965              		.syntax unified
 966              		.thumb
 967              		.thumb_func
 968              		.fpu fpv5-d16
 970              	setInterruptLevelBit:
 971              	.LVL73:
 972              	.LFB165:
 264:../Core/Src/adxl313.c **** 
 265:../Core/Src/adxl313.c **** // If Set (0) Sets the Interrupts to Active HIGH
 266:../Core/Src/adxl313.c **** // If Set (1) Sets the Interrupts to Active LOW
 267:../Core/Src/adxl313.c **** void setInterruptLevelBit( adxl313_dev *dev, bool interruptLevelBit) {
 973              		.loc 1 267 70 is_stmt 1 view -0
 974              		.cfi_startproc
 975              		@ args = 0, pretend = 0, frame = 0
 976              		@ frame_needed = 0, uses_anonymous_args = 0
 977              		.loc 1 267 70 is_stmt 0 view .LVU206
 978 0000 08B5     		push	{r3, lr}
 979              	.LCFI32:
 980              		.cfi_def_cfa_offset 8
 981              		.cfi_offset 3, -8
 982              		.cfi_offset 14, -4
 983 0002 0B46     		mov	r3, r1
 268:../Core/Src/adxl313.c **** 	setRegisterBit(dev, ADXL313_DATA_FORMAT, 5, interruptLevelBit);
 984              		.loc 1 268 2 is_stmt 1 view .LVU207
 985 0004 0522     		movs	r2, #5
ARM GAS  /tmp/cctdo2D3.s 			page 23


 986 0006 3121     		movs	r1, #49
 987              	.LVL74:
 988              		.loc 1 268 2 is_stmt 0 view .LVU208
 989 0008 FFF7FEFF 		bl	setRegisterBit
 990              	.LVL75:
 269:../Core/Src/adxl313.c **** }
 991              		.loc 1 269 1 view .LVU209
 992 000c 08BD     		pop	{r3, pc}
 993              		.cfi_endproc
 994              	.LFE165:
 996              		.section	.text.getFullResBit,"ax",%progbits
 997              		.align	1
 998              		.global	getFullResBit
 999              		.syntax unified
 1000              		.thumb
 1001              		.thumb_func
 1002              		.fpu fpv5-d16
 1004              	getFullResBit:
 1005              	.LVL76:
 1006              	.LFB166:
 270:../Core/Src/adxl313.c **** 
 271:../Core/Src/adxl313.c **** /************************* FULL_RES BIT STATE ***********************/
 272:../Core/Src/adxl313.c **** /*                           ~ GET & SET                            */
 273:../Core/Src/adxl313.c **** bool getFullResBit( adxl313_dev *dev) {
 1007              		.loc 1 273 39 is_stmt 1 view -0
 1008              		.cfi_startproc
 1009              		@ args = 0, pretend = 0, frame = 0
 1010              		@ frame_needed = 0, uses_anonymous_args = 0
 1011              		.loc 1 273 39 is_stmt 0 view .LVU211
 1012 0000 08B5     		push	{r3, lr}
 1013              	.LCFI33:
 1014              		.cfi_def_cfa_offset 8
 1015              		.cfi_offset 3, -8
 1016              		.cfi_offset 14, -4
 274:../Core/Src/adxl313.c **** 	return getRegisterBit(dev, ADXL313_DATA_FORMAT, 3);
 1017              		.loc 1 274 2 is_stmt 1 view .LVU212
 1018              		.loc 1 274 9 is_stmt 0 view .LVU213
 1019 0002 0322     		movs	r2, #3
 1020 0004 3121     		movs	r1, #49
 1021 0006 FFF7FEFF 		bl	getRegisterBit
 1022              	.LVL77:
 275:../Core/Src/adxl313.c **** }
 1023              		.loc 1 275 1 view .LVU214
 1024 000a 08BD     		pop	{r3, pc}
 1025              		.cfi_endproc
 1026              	.LFE166:
 1028              		.section	.text.setFullResBit,"ax",%progbits
 1029              		.align	1
 1030              		.global	setFullResBit
 1031              		.syntax unified
 1032              		.thumb
 1033              		.thumb_func
 1034              		.fpu fpv5-d16
 1036              	setFullResBit:
 1037              	.LVL78:
 1038              	.LFB167:
 276:../Core/Src/adxl313.c **** 
ARM GAS  /tmp/cctdo2D3.s 			page 24


 277:../Core/Src/adxl313.c **** // If Set (1) Device is in Full Resolution Mode: Output Resolution Increase with G Range
 278:../Core/Src/adxl313.c **** //  Set by the Range Bits to Maintain a 4mg/LSB Scale Factor
 279:../Core/Src/adxl313.c **** // If Set (0) Device is in 10-bit Mode: Range Bits Determine Maximum G Range
 280:../Core/Src/adxl313.c **** //  And Scale Factor
 281:../Core/Src/adxl313.c **** void setFullResBit( adxl313_dev *dev, bool fullResBit) {
 1039              		.loc 1 281 56 is_stmt 1 view -0
 1040              		.cfi_startproc
 1041              		@ args = 0, pretend = 0, frame = 0
 1042              		@ frame_needed = 0, uses_anonymous_args = 0
 1043              		.loc 1 281 56 is_stmt 0 view .LVU216
 1044 0000 08B5     		push	{r3, lr}
 1045              	.LCFI34:
 1046              		.cfi_def_cfa_offset 8
 1047              		.cfi_offset 3, -8
 1048              		.cfi_offset 14, -4
 1049 0002 0B46     		mov	r3, r1
 282:../Core/Src/adxl313.c **** 	setRegisterBit(dev, ADXL313_DATA_FORMAT, 3, fullResBit);
 1050              		.loc 1 282 2 is_stmt 1 view .LVU217
 1051 0004 0322     		movs	r2, #3
 1052 0006 3121     		movs	r1, #49
 1053              	.LVL79:
 1054              		.loc 1 282 2 is_stmt 0 view .LVU218
 1055 0008 FFF7FEFF 		bl	setRegisterBit
 1056              	.LVL80:
 283:../Core/Src/adxl313.c **** }
 1057              		.loc 1 283 1 view .LVU219
 1058 000c 08BD     		pop	{r3, pc}
 1059              		.cfi_endproc
 1060              	.LFE167:
 1062              		.section	.text.getJustifyBit,"ax",%progbits
 1063              		.align	1
 1064              		.global	getJustifyBit
 1065              		.syntax unified
 1066              		.thumb
 1067              		.thumb_func
 1068              		.fpu fpv5-d16
 1070              	getJustifyBit:
 1071              	.LVL81:
 1072              	.LFB168:
 284:../Core/Src/adxl313.c **** 
 285:../Core/Src/adxl313.c **** /*************************** JUSTIFY BIT STATE **************************/
 286:../Core/Src/adxl313.c **** /*                           ~ GET & SET                            */
 287:../Core/Src/adxl313.c **** bool getJustifyBit( adxl313_dev *dev) {
 1073              		.loc 1 287 39 is_stmt 1 view -0
 1074              		.cfi_startproc
 1075              		@ args = 0, pretend = 0, frame = 0
 1076              		@ frame_needed = 0, uses_anonymous_args = 0
 1077              		.loc 1 287 39 is_stmt 0 view .LVU221
 1078 0000 08B5     		push	{r3, lr}
 1079              	.LCFI35:
 1080              		.cfi_def_cfa_offset 8
 1081              		.cfi_offset 3, -8
 1082              		.cfi_offset 14, -4
 288:../Core/Src/adxl313.c **** 	return getRegisterBit(dev, ADXL313_DATA_FORMAT, 2);
 1083              		.loc 1 288 2 is_stmt 1 view .LVU222
 1084              		.loc 1 288 9 is_stmt 0 view .LVU223
 1085 0002 0222     		movs	r2, #2
ARM GAS  /tmp/cctdo2D3.s 			page 25


 1086 0004 3121     		movs	r1, #49
 1087 0006 FFF7FEFF 		bl	getRegisterBit
 1088              	.LVL82:
 289:../Core/Src/adxl313.c **** }
 1089              		.loc 1 289 1 view .LVU224
 1090 000a 08BD     		pop	{r3, pc}
 1091              		.cfi_endproc
 1092              	.LFE168:
 1094              		.section	.text.setJustifyBit,"ax",%progbits
 1095              		.align	1
 1096              		.global	setJustifyBit
 1097              		.syntax unified
 1098              		.thumb
 1099              		.thumb_func
 1100              		.fpu fpv5-d16
 1102              	setJustifyBit:
 1103              	.LVL83:
 1104              	.LFB169:
 290:../Core/Src/adxl313.c **** 
 291:../Core/Src/adxl313.c **** // If Set (1) Selects the Left Justified Mode
 292:../Core/Src/adxl313.c **** // If Set (0) Selects Right Justified Mode with Sign Extension
 293:../Core/Src/adxl313.c **** void setJustifyBit( adxl313_dev *dev, bool justifyBit) {
 1105              		.loc 1 293 56 is_stmt 1 view -0
 1106              		.cfi_startproc
 1107              		@ args = 0, pretend = 0, frame = 0
 1108              		@ frame_needed = 0, uses_anonymous_args = 0
 1109              		.loc 1 293 56 is_stmt 0 view .LVU226
 1110 0000 08B5     		push	{r3, lr}
 1111              	.LCFI36:
 1112              		.cfi_def_cfa_offset 8
 1113              		.cfi_offset 3, -8
 1114              		.cfi_offset 14, -4
 1115 0002 0B46     		mov	r3, r1
 294:../Core/Src/adxl313.c **** 	setRegisterBit(dev, ADXL313_DATA_FORMAT, 2, justifyBit);
 1116              		.loc 1 294 2 is_stmt 1 view .LVU227
 1117 0004 0222     		movs	r2, #2
 1118 0006 3121     		movs	r1, #49
 1119              	.LVL84:
 1120              		.loc 1 294 2 is_stmt 0 view .LVU228
 1121 0008 FFF7FEFF 		bl	setRegisterBit
 1122              	.LVL85:
 295:../Core/Src/adxl313.c **** }
 1123              		.loc 1 295 1 view .LVU229
 1124 000c 08BD     		pop	{r3, pc}
 1125              		.cfi_endproc
 1126              	.LFE169:
 1128              		.section	.text.setAxisGains,"ax",%progbits
 1129              		.align	1
 1130              		.global	setAxisGains
 1131              		.syntax unified
 1132              		.thumb
 1133              		.thumb_func
 1134              		.fpu fpv5-d16
 1136              	setAxisGains:
 1137              	.LVL86:
 1138              	.LFB170:
 296:../Core/Src/adxl313.c **** 
ARM GAS  /tmp/cctdo2D3.s 			page 26


 297:../Core/Src/adxl313.c **** /****************** GAIN FOR EACH AXIS IN Gs / COUNT *****************/
 298:../Core/Src/adxl313.c **** /*                           ~ SET & GET                            */
 299:../Core/Src/adxl313.c **** void setAxisGains(adxl313_dev *dev, double *_gains){
 1139              		.loc 1 299 52 is_stmt 1 view -0
 1140              		.cfi_startproc
 1141              		@ args = 0, pretend = 0, frame = 0
 1142              		@ frame_needed = 0, uses_anonymous_args = 0
 1143              		@ link register save eliminated.
 300:../Core/Src/adxl313.c **** 	int i;
 1144              		.loc 1 300 2 view .LVU231
 301:../Core/Src/adxl313.c **** 	for(i = 0; i < 3; i++){
 1145              		.loc 1 301 2 view .LVU232
 1146              		.loc 1 301 8 is_stmt 0 view .LVU233
 1147 0000 0023     		movs	r3, #0
 1148              		.loc 1 301 2 view .LVU234
 1149 0002 09E0     		b	.L62
 1150              	.LVL87:
 1151              	.L63:
 302:../Core/Src/adxl313.c **** 		gains[i] = _gains[i];
 1152              		.loc 1 302 3 is_stmt 1 discriminator 3 view .LVU235
 1153              		.loc 1 302 20 is_stmt 0 discriminator 3 view .LVU236
 1154 0004 01EBC302 		add	r2, r1, r3, lsl #3
 1155 0008 92ED007B 		vldr.64	d7, [r2]
 1156              		.loc 1 302 12 discriminator 3 view .LVU237
 1157 000c 044A     		ldr	r2, .L64
 1158 000e 02EBC302 		add	r2, r2, r3, lsl #3
 1159 0012 82ED007B 		vstr.64	d7, [r2]
 301:../Core/Src/adxl313.c **** 	for(i = 0; i < 3; i++){
 1160              		.loc 1 301 20 is_stmt 1 discriminator 3 view .LVU238
 301:../Core/Src/adxl313.c **** 	for(i = 0; i < 3; i++){
 1161              		.loc 1 301 21 is_stmt 0 discriminator 3 view .LVU239
 1162 0016 0133     		adds	r3, r3, #1
 1163              	.LVL88:
 1164              	.L62:
 301:../Core/Src/adxl313.c **** 	for(i = 0; i < 3; i++){
 1165              		.loc 1 301 13 is_stmt 1 discriminator 1 view .LVU240
 301:../Core/Src/adxl313.c **** 	for(i = 0; i < 3; i++){
 1166              		.loc 1 301 2 is_stmt 0 discriminator 1 view .LVU241
 1167 0018 022B     		cmp	r3, #2
 1168 001a F3DD     		ble	.L63
 303:../Core/Src/adxl313.c **** 	}
 304:../Core/Src/adxl313.c **** }
 1169              		.loc 1 304 1 view .LVU242
 1170 001c 7047     		bx	lr
 1171              	.L65:
 1172 001e 00BF     		.align	2
 1173              	.L64:
 1174 0020 00000000 		.word	.LANCHOR0
 1175              		.cfi_endproc
 1176              	.LFE170:
 1178              		.section	.text.getAxisGains,"ax",%progbits
 1179              		.align	1
 1180              		.global	getAxisGains
 1181              		.syntax unified
 1182              		.thumb
 1183              		.thumb_func
 1184              		.fpu fpv5-d16
ARM GAS  /tmp/cctdo2D3.s 			page 27


 1186              	getAxisGains:
 1187              	.LVL89:
 1188              	.LFB171:
 305:../Core/Src/adxl313.c **** void getAxisGains(adxl313_dev *dev, double *_gains){
 1189              		.loc 1 305 52 is_stmt 1 view -0
 1190              		.cfi_startproc
 1191              		@ args = 0, pretend = 0, frame = 0
 1192              		@ frame_needed = 0, uses_anonymous_args = 0
 1193              		@ link register save eliminated.
 306:../Core/Src/adxl313.c **** 	int i;
 1194              		.loc 1 306 2 view .LVU244
 307:../Core/Src/adxl313.c **** 	for(i = 0; i < 3; i++){
 1195              		.loc 1 307 2 view .LVU245
 1196              		.loc 1 307 8 is_stmt 0 view .LVU246
 1197 0000 0023     		movs	r3, #0
 1198              		.loc 1 307 2 view .LVU247
 1199 0002 09E0     		b	.L67
 1200              	.LVL90:
 1201              	.L68:
 308:../Core/Src/adxl313.c **** 		_gains[i] = gains[i];
 1202              		.loc 1 308 3 is_stmt 1 discriminator 3 view .LVU248
 1203              		.loc 1 308 9 is_stmt 0 discriminator 3 view .LVU249
 1204 0004 01EBC300 		add	r0, r1, r3, lsl #3
 1205              		.loc 1 308 20 discriminator 3 view .LVU250
 1206 0008 054A     		ldr	r2, .L69
 1207 000a 02EBC302 		add	r2, r2, r3, lsl #3
 1208 000e 92ED007B 		vldr.64	d7, [r2]
 1209              		.loc 1 308 13 discriminator 3 view .LVU251
 1210 0012 80ED007B 		vstr.64	d7, [r0]
 307:../Core/Src/adxl313.c **** 	for(i = 0; i < 3; i++){
 1211              		.loc 1 307 20 is_stmt 1 discriminator 3 view .LVU252
 307:../Core/Src/adxl313.c **** 	for(i = 0; i < 3; i++){
 1212              		.loc 1 307 21 is_stmt 0 discriminator 3 view .LVU253
 1213 0016 0133     		adds	r3, r3, #1
 1214              	.LVL91:
 1215              	.L67:
 307:../Core/Src/adxl313.c **** 	for(i = 0; i < 3; i++){
 1216              		.loc 1 307 13 is_stmt 1 discriminator 1 view .LVU254
 307:../Core/Src/adxl313.c **** 	for(i = 0; i < 3; i++){
 1217              		.loc 1 307 2 is_stmt 0 discriminator 1 view .LVU255
 1218 0018 022B     		cmp	r3, #2
 1219 001a F3DD     		ble	.L68
 309:../Core/Src/adxl313.c **** 	}
 310:../Core/Src/adxl313.c **** }
 1220              		.loc 1 310 1 view .LVU256
 1221 001c 7047     		bx	lr
 1222              	.L70:
 1223 001e 00BF     		.align	2
 1224              	.L69:
 1225 0020 00000000 		.word	.LANCHOR0
 1226              		.cfi_endproc
 1227              	.LFE171:
 1229              		.section	.text.setAxisOffset,"ax",%progbits
 1230              		.align	1
 1231              		.global	setAxisOffset
 1232              		.syntax unified
 1233              		.thumb
ARM GAS  /tmp/cctdo2D3.s 			page 28


 1234              		.thumb_func
 1235              		.fpu fpv5-d16
 1237              	setAxisOffset:
 1238              	.LVL92:
 1239              	.LFB172:
 311:../Core/Src/adxl313.c **** 
 312:../Core/Src/adxl313.c **** /********************* OFSX, OFSY and OFSZ BYTES ********************/
 313:../Core/Src/adxl313.c **** /*                           ~ SET & GET                            */
 314:../Core/Src/adxl313.c **** // OFSX, OFSY and OFSZ: User Offset Adjustments in Twos Complement Format
 315:../Core/Src/adxl313.c **** // Scale Factor of 15.6mg/LSB
 316:../Core/Src/adxl313.c **** void setAxisOffset( adxl313_dev *dev, uint8_t x, uint8_t y, uint8_t z) {
 1240              		.loc 1 316 72 is_stmt 1 view -0
 1241              		.cfi_startproc
 1242              		@ args = 0, pretend = 0, frame = 0
 1243              		@ frame_needed = 0, uses_anonymous_args = 0
 1244              		.loc 1 316 72 is_stmt 0 view .LVU258
 1245 0000 70B5     		push	{r4, r5, r6, lr}
 1246              	.LCFI37:
 1247              		.cfi_def_cfa_offset 16
 1248              		.cfi_offset 4, -16
 1249              		.cfi_offset 5, -12
 1250              		.cfi_offset 6, -8
 1251              		.cfi_offset 14, -4
 1252 0002 0446     		mov	r4, r0
 1253 0004 1646     		mov	r6, r2
 1254 0006 1D46     		mov	r5, r3
 317:../Core/Src/adxl313.c **** 	spi_write(dev->spi_desc, ADXL313_OFSX, (uint8_t)x, 1);
 1255              		.loc 1 317 2 is_stmt 1 view .LVU259
 1256 0008 0123     		movs	r3, #1
 1257              	.LVL93:
 1258              		.loc 1 317 2 is_stmt 0 view .LVU260
 1259 000a 0A46     		mov	r2, r1
 1260              	.LVL94:
 1261              		.loc 1 317 2 view .LVU261
 1262 000c 1E21     		movs	r1, #30
 1263              	.LVL95:
 1264              		.loc 1 317 2 view .LVU262
 1265 000e 006B     		ldr	r0, [r0, #48]
 1266              	.LVL96:
 1267              		.loc 1 317 2 view .LVU263
 1268 0010 FFF7FEFF 		bl	spi_write
 1269              	.LVL97:
 318:../Core/Src/adxl313.c **** 	spi_write(dev->spi_desc, ADXL313_OFSY, (uint8_t)y, 1);
 1270              		.loc 1 318 2 is_stmt 1 view .LVU264
 1271 0014 0123     		movs	r3, #1
 1272 0016 3246     		mov	r2, r6
 1273 0018 1F21     		movs	r1, #31
 1274 001a 206B     		ldr	r0, [r4, #48]
 1275 001c FFF7FEFF 		bl	spi_write
 1276              	.LVL98:
 319:../Core/Src/adxl313.c **** 	spi_write(dev->spi_desc, ADXL313_OFSZ, (uint8_t)z, 1);
 1277              		.loc 1 319 2 view .LVU265
 1278 0020 0123     		movs	r3, #1
 1279 0022 2A46     		mov	r2, r5
 1280 0024 2021     		movs	r1, #32
 1281 0026 206B     		ldr	r0, [r4, #48]
 1282 0028 FFF7FEFF 		bl	spi_write
ARM GAS  /tmp/cctdo2D3.s 			page 29


 1283              	.LVL99:
 320:../Core/Src/adxl313.c **** }
 1284              		.loc 1 320 1 is_stmt 0 view .LVU266
 1285 002c 70BD     		pop	{r4, r5, r6, pc}
 1286              		.loc 1 320 1 view .LVU267
 1287              		.cfi_endproc
 1288              	.LFE172:
 1290              		.section	.text.getAxisOffset,"ax",%progbits
 1291              		.align	1
 1292              		.global	getAxisOffset
 1293              		.syntax unified
 1294              		.thumb
 1295              		.thumb_func
 1296              		.fpu fpv5-d16
 1298              	getAxisOffset:
 1299              	.LVL100:
 1300              	.LFB173:
 321:../Core/Src/adxl313.c **** 
 322:../Core/Src/adxl313.c **** void getAxisOffset( adxl313_dev *dev, uint8_t* x, uint8_t* y, uint8_t*z) {
 1301              		.loc 1 322 74 is_stmt 1 view -0
 1302              		.cfi_startproc
 1303              		@ args = 0, pretend = 0, frame = 8
 1304              		@ frame_needed = 0, uses_anonymous_args = 0
 1305              		.loc 1 322 74 is_stmt 0 view .LVU269
 1306 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1307              	.LCFI38:
 1308              		.cfi_def_cfa_offset 20
 1309              		.cfi_offset 4, -20
 1310              		.cfi_offset 5, -16
 1311              		.cfi_offset 6, -12
 1312              		.cfi_offset 7, -8
 1313              		.cfi_offset 14, -4
 1314 0002 83B0     		sub	sp, sp, #12
 1315              	.LCFI39:
 1316              		.cfi_def_cfa_offset 32
 1317 0004 0446     		mov	r4, r0
 1318 0006 0F46     		mov	r7, r1
 1319 0008 1646     		mov	r6, r2
 1320 000a 1D46     		mov	r5, r3
 323:../Core/Src/adxl313.c **** 	uint8_t _b;
 1321              		.loc 1 323 2 is_stmt 1 view .LVU270
 324:../Core/Src/adxl313.c **** 
 325:../Core/Src/adxl313.c **** 	spi_read(dev->spi_desc, ADXL313_OFSX, 1, &_b);
 1322              		.loc 1 325 2 view .LVU271
 1323 000c 0DF10703 		add	r3, sp, #7
 1324              	.LVL101:
 1325              		.loc 1 325 2 is_stmt 0 view .LVU272
 1326 0010 0122     		movs	r2, #1
 1327              	.LVL102:
 1328              		.loc 1 325 2 view .LVU273
 1329 0012 1E21     		movs	r1, #30
 1330              	.LVL103:
 1331              		.loc 1 325 2 view .LVU274
 1332 0014 006B     		ldr	r0, [r0, #48]
 1333              	.LVL104:
 1334              		.loc 1 325 2 view .LVU275
 1335 0016 FFF7FEFF 		bl	spi_read
ARM GAS  /tmp/cctdo2D3.s 			page 30


 1336              	.LVL105:
 326:../Core/Src/adxl313.c **** 	*x = (uint8_t) _b;
 1337              		.loc 1 326 2 is_stmt 1 view .LVU276
 1338              		.loc 1 326 5 is_stmt 0 view .LVU277
 1339 001a 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 1340 001e 3B70     		strb	r3, [r7]
 327:../Core/Src/adxl313.c **** 
 328:../Core/Src/adxl313.c **** 	spi_read(dev->spi_desc, ADXL313_OFSY, 1, &_b);
 1341              		.loc 1 328 2 is_stmt 1 view .LVU278
 1342 0020 0DF10703 		add	r3, sp, #7
 1343 0024 0122     		movs	r2, #1
 1344 0026 1F21     		movs	r1, #31
 1345 0028 206B     		ldr	r0, [r4, #48]
 1346 002a FFF7FEFF 		bl	spi_read
 1347              	.LVL106:
 329:../Core/Src/adxl313.c **** 	*y = (uint8_t) _b;
 1348              		.loc 1 329 2 view .LVU279
 1349              		.loc 1 329 5 is_stmt 0 view .LVU280
 1350 002e 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 1351 0032 3370     		strb	r3, [r6]
 330:../Core/Src/adxl313.c **** 
 331:../Core/Src/adxl313.c **** 	spi_read(dev->spi_desc, ADXL313_OFSZ, 1, &_b);
 1352              		.loc 1 331 2 is_stmt 1 view .LVU281
 1353 0034 0DF10703 		add	r3, sp, #7
 1354 0038 0122     		movs	r2, #1
 1355 003a 2021     		movs	r1, #32
 1356 003c 206B     		ldr	r0, [r4, #48]
 1357 003e FFF7FEFF 		bl	spi_read
 1358              	.LVL107:
 332:../Core/Src/adxl313.c **** 	*z = (uint8_t) _b;
 1359              		.loc 1 332 2 view .LVU282
 1360              		.loc 1 332 5 is_stmt 0 view .LVU283
 1361 0042 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 1362 0046 2B70     		strb	r3, [r5]
 333:../Core/Src/adxl313.c **** }
 1363              		.loc 1 333 1 view .LVU284
 1364 0048 03B0     		add	sp, sp, #12
 1365              	.LCFI40:
 1366              		.cfi_def_cfa_offset 20
 1367              		@ sp needed
 1368 004a F0BD     		pop	{r4, r5, r6, r7, pc}
 1369              		.loc 1 333 1 view .LVU285
 1370              		.cfi_endproc
 1371              	.LFE173:
 1373              		.section	.text.setActivityThreshold,"ax",%progbits
 1374              		.align	1
 1375              		.global	setActivityThreshold
 1376              		.syntax unified
 1377              		.thumb
 1378              		.thumb_func
 1379              		.fpu fpv5-d16
 1381              	setActivityThreshold:
 1382              	.LVL108:
 1383              	.LFB174:
 334:../Core/Src/adxl313.c **** 
 335:../Core/Src/adxl313.c **** /*********************** THRESH_ACT REGISTER ************************/
 336:../Core/Src/adxl313.c **** /*                          ~ SET & GET                             */
ARM GAS  /tmp/cctdo2D3.s 			page 31


 337:../Core/Src/adxl313.c **** // Holds the Threshold Value for Detecting Activity.
 338:../Core/Src/adxl313.c **** // Data Format is Unsigned, so the Magnitude of the Activity Event is Compared
 339:../Core/Src/adxl313.c **** //  with the Value is Compared with the Value in the THRESH_ACT Register.
 340:../Core/Src/adxl313.c **** // The Scale Factor is 62.5mg/LSB.
 341:../Core/Src/adxl313.c **** // Value of 0 may Result in Undesirable Behavior if the Activity Interrupt Enabled.
 342:../Core/Src/adxl313.c **** // It Accepts a Maximum Value of 255.
 343:../Core/Src/adxl313.c **** void setActivityThreshold( adxl313_dev *dev, int activityThreshold) {
 1384              		.loc 1 343 69 is_stmt 1 view -0
 1385              		.cfi_startproc
 1386              		@ args = 0, pretend = 0, frame = 0
 1387              		@ frame_needed = 0, uses_anonymous_args = 0
 1388              		.loc 1 343 69 is_stmt 0 view .LVU287
 1389 0000 08B5     		push	{r3, lr}
 1390              	.LCFI41:
 1391              		.cfi_def_cfa_offset 8
 1392              		.cfi_offset 3, -8
 1393              		.cfi_offset 14, -4
 344:../Core/Src/adxl313.c **** 	uint8_t _b = (uint8_t) constrain(activityThreshold, 0, 255);
 1394              		.loc 1 344 2 is_stmt 1 view .LVU288
 1395              	.LVL109:
 1396              	.LBB24:
 1397              	.LBI24:
  26:../Core/Src/adxl313.c **** {
 1398              		.loc 1 26 19 view .LVU289
 1399              	.LBB25:
  28:../Core/Src/adxl313.c **** }
 1400              		.loc 1 28 2 view .LVU290
  28:../Core/Src/adxl313.c **** }
 1401              		.loc 1 28 9 is_stmt 0 view .LVU291
 1402 0002 0029     		cmp	r1, #0
  28:../Core/Src/adxl313.c **** }
 1403              		.loc 1 28 9 view .LVU292
 1404 0004 09DB     		blt	.L77
 1405 0006 FF29     		cmp	r1, #255
 1406 0008 A8BF     		it	ge
 1407 000a FF21     		movge	r1, #255
 1408              	.LVL110:
 1409              	.L76:
  28:../Core/Src/adxl313.c **** }
 1410              		.loc 1 28 9 view .LVU293
 1411              	.LBE25:
 1412              	.LBE24:
 345:../Core/Src/adxl313.c **** 
 346:../Core/Src/adxl313.c **** 	spi_write(dev->spi_desc, ADXL313_THRESH_ACT, _b, 1);
 1413              		.loc 1 346 2 is_stmt 1 view .LVU294
 1414 000c 0123     		movs	r3, #1
 1415 000e CAB2     		uxtb	r2, r1
 1416 0010 2421     		movs	r1, #36
 1417              	.LVL111:
 1418              		.loc 1 346 2 is_stmt 0 view .LVU295
 1419 0012 006B     		ldr	r0, [r0, #48]
 1420              	.LVL112:
 1421              		.loc 1 346 2 view .LVU296
 1422 0014 FFF7FEFF 		bl	spi_write
 1423              	.LVL113:
 347:../Core/Src/adxl313.c **** }
 1424              		.loc 1 347 1 view .LVU297
ARM GAS  /tmp/cctdo2D3.s 			page 32


 1425 0018 08BD     		pop	{r3, pc}
 1426              	.LVL114:
 1427              	.L77:
 1428              	.LBB27:
 1429              	.LBB26:
  28:../Core/Src/adxl313.c **** }
 1430              		.loc 1 28 9 view .LVU298
 1431 001a 0021     		movs	r1, #0
 1432              	.LVL115:
  28:../Core/Src/adxl313.c **** }
 1433              		.loc 1 28 9 view .LVU299
 1434 001c F6E7     		b	.L76
 1435              	.LBE26:
 1436              	.LBE27:
 1437              		.cfi_endproc
 1438              	.LFE174:
 1440              		.section	.text.getActivityThreshold,"ax",%progbits
 1441              		.align	1
 1442              		.global	getActivityThreshold
 1443              		.syntax unified
 1444              		.thumb
 1445              		.thumb_func
 1446              		.fpu fpv5-d16
 1448              	getActivityThreshold:
 1449              	.LVL116:
 1450              	.LFB175:
 348:../Core/Src/adxl313.c **** 
 349:../Core/Src/adxl313.c **** // Gets the THRESH_ACT byte
 350:../Core/Src/adxl313.c **** int getActivityThreshold(adxl313_dev *dev) {
 1451              		.loc 1 350 44 is_stmt 1 view -0
 1452              		.cfi_startproc
 1453              		@ args = 0, pretend = 0, frame = 8
 1454              		@ frame_needed = 0, uses_anonymous_args = 0
 1455              		.loc 1 350 44 is_stmt 0 view .LVU301
 1456 0000 00B5     		push	{lr}
 1457              	.LCFI42:
 1458              		.cfi_def_cfa_offset 4
 1459              		.cfi_offset 14, -4
 1460 0002 83B0     		sub	sp, sp, #12
 1461              	.LCFI43:
 1462              		.cfi_def_cfa_offset 16
 351:../Core/Src/adxl313.c **** 	uint8_t _b;
 1463              		.loc 1 351 2 is_stmt 1 view .LVU302
 352:../Core/Src/adxl313.c **** 	
 353:../Core/Src/adxl313.c **** 	spi_read(dev->spi_desc, ADXL313_THRESH_ACT, 1, &_b);
 1464              		.loc 1 353 2 view .LVU303
 1465 0004 0DF10703 		add	r3, sp, #7
 1466 0008 0122     		movs	r2, #1
 1467 000a 2421     		movs	r1, #36
 1468 000c 006B     		ldr	r0, [r0, #48]
 1469              	.LVL117:
 1470              		.loc 1 353 2 is_stmt 0 view .LVU304
 1471 000e FFF7FEFF 		bl	spi_read
 1472              	.LVL118:
 354:../Core/Src/adxl313.c **** 	return (int) _b;
 1473              		.loc 1 354 2 is_stmt 1 view .LVU305
 355:../Core/Src/adxl313.c **** }
ARM GAS  /tmp/cctdo2D3.s 			page 33


 1474              		.loc 1 355 1 is_stmt 0 view .LVU306
 1475 0012 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1476 0016 03B0     		add	sp, sp, #12
 1477              	.LCFI44:
 1478              		.cfi_def_cfa_offset 4
 1479              		@ sp needed
 1480 0018 5DF804FB 		ldr	pc, [sp], #4
 1481              		.cfi_endproc
 1482              	.LFE175:
 1484              		.section	.text.setInactivityThreshold,"ax",%progbits
 1485              		.align	1
 1486              		.global	setInactivityThreshold
 1487              		.syntax unified
 1488              		.thumb
 1489              		.thumb_func
 1490              		.fpu fpv5-d16
 1492              	setInactivityThreshold:
 1493              	.LVL119:
 1494              	.LFB176:
 356:../Core/Src/adxl313.c **** 
 357:../Core/Src/adxl313.c **** /********************** THRESH_INACT REGISTER ***********************/
 358:../Core/Src/adxl313.c **** /*                          ~ SET & GET                             */
 359:../Core/Src/adxl313.c **** // Holds the Threshold Value for Detecting Inactivity.
 360:../Core/Src/adxl313.c **** // The Data Format is Unsigned, so the Magnitude of the INactivity Event is
 361:../Core/Src/adxl313.c **** //  Compared with the value in the THRESH_INACT Register.
 362:../Core/Src/adxl313.c **** // Scale Factor is 62.5mg/LSB.
 363:../Core/Src/adxl313.c **** // Value of 0 May Result in Undesirable Behavior if the Inactivity Interrupt Enabled.
 364:../Core/Src/adxl313.c **** // It Accepts a Maximum Value of 255.
 365:../Core/Src/adxl313.c **** void setInactivityThreshold(adxl313_dev *dev, int inactivityThreshold) {
 1495              		.loc 1 365 72 is_stmt 1 view -0
 1496              		.cfi_startproc
 1497              		@ args = 0, pretend = 0, frame = 0
 1498              		@ frame_needed = 0, uses_anonymous_args = 0
 1499              		.loc 1 365 72 is_stmt 0 view .LVU308
 1500 0000 08B5     		push	{r3, lr}
 1501              	.LCFI45:
 1502              		.cfi_def_cfa_offset 8
 1503              		.cfi_offset 3, -8
 1504              		.cfi_offset 14, -4
 366:../Core/Src/adxl313.c **** 	uint8_t _b = (uint8_t) constrain(inactivityThreshold,0,255);
 1505              		.loc 1 366 2 is_stmt 1 view .LVU309
 1506              	.LVL120:
 1507              	.LBB28:
 1508              	.LBI28:
  26:../Core/Src/adxl313.c **** {
 1509              		.loc 1 26 19 view .LVU310
 1510              	.LBB29:
  28:../Core/Src/adxl313.c **** }
 1511              		.loc 1 28 2 view .LVU311
  28:../Core/Src/adxl313.c **** }
 1512              		.loc 1 28 9 is_stmt 0 view .LVU312
 1513 0002 0029     		cmp	r1, #0
  28:../Core/Src/adxl313.c **** }
 1514              		.loc 1 28 9 view .LVU313
 1515 0004 09DB     		blt	.L83
 1516 0006 FF29     		cmp	r1, #255
 1517 0008 A8BF     		it	ge
ARM GAS  /tmp/cctdo2D3.s 			page 34


 1518 000a FF21     		movge	r1, #255
 1519              	.LVL121:
 1520              	.L82:
  28:../Core/Src/adxl313.c **** }
 1521              		.loc 1 28 9 view .LVU314
 1522              	.LBE29:
 1523              	.LBE28:
 367:../Core/Src/adxl313.c **** 
 368:../Core/Src/adxl313.c **** 	spi_write(dev->spi_desc, ADXL313_THRESH_INACT, _b, 1);
 1524              		.loc 1 368 2 is_stmt 1 view .LVU315
 1525 000c 0123     		movs	r3, #1
 1526 000e CAB2     		uxtb	r2, r1
 1527 0010 2521     		movs	r1, #37
 1528              	.LVL122:
 1529              		.loc 1 368 2 is_stmt 0 view .LVU316
 1530 0012 006B     		ldr	r0, [r0, #48]
 1531              	.LVL123:
 1532              		.loc 1 368 2 view .LVU317
 1533 0014 FFF7FEFF 		bl	spi_write
 1534              	.LVL124:
 369:../Core/Src/adxl313.c **** }
 1535              		.loc 1 369 1 view .LVU318
 1536 0018 08BD     		pop	{r3, pc}
 1537              	.LVL125:
 1538              	.L83:
 1539              	.LBB31:
 1540              	.LBB30:
  28:../Core/Src/adxl313.c **** }
 1541              		.loc 1 28 9 view .LVU319
 1542 001a 0021     		movs	r1, #0
 1543              	.LVL126:
  28:../Core/Src/adxl313.c **** }
 1544              		.loc 1 28 9 view .LVU320
 1545 001c F6E7     		b	.L82
 1546              	.LBE30:
 1547              	.LBE31:
 1548              		.cfi_endproc
 1549              	.LFE176:
 1551              		.section	.text.getInactivityThreshold,"ax",%progbits
 1552              		.align	1
 1553              		.global	getInactivityThreshold
 1554              		.syntax unified
 1555              		.thumb
 1556              		.thumb_func
 1557              		.fpu fpv5-d16
 1559              	getInactivityThreshold:
 1560              	.LVL127:
 1561              	.LFB177:
 370:../Core/Src/adxl313.c **** 
 371:../Core/Src/adxl313.c **** int getInactivityThreshold(adxl313_dev *dev) {
 1562              		.loc 1 371 46 is_stmt 1 view -0
 1563              		.cfi_startproc
 1564              		@ args = 0, pretend = 0, frame = 8
 1565              		@ frame_needed = 0, uses_anonymous_args = 0
 1566              		.loc 1 371 46 is_stmt 0 view .LVU322
 1567 0000 00B5     		push	{lr}
 1568              	.LCFI46:
ARM GAS  /tmp/cctdo2D3.s 			page 35


 1569              		.cfi_def_cfa_offset 4
 1570              		.cfi_offset 14, -4
 1571 0002 83B0     		sub	sp, sp, #12
 1572              	.LCFI47:
 1573              		.cfi_def_cfa_offset 16
 372:../Core/Src/adxl313.c **** 	uint8_t _b;
 1574              		.loc 1 372 2 is_stmt 1 view .LVU323
 373:../Core/Src/adxl313.c **** 
 374:../Core/Src/adxl313.c **** 	spi_read(dev->spi_desc, ADXL313_THRESH_INACT, 1, &_b);
 1575              		.loc 1 374 2 view .LVU324
 1576 0004 0DF10703 		add	r3, sp, #7
 1577 0008 0122     		movs	r2, #1
 1578 000a 2521     		movs	r1, #37
 1579 000c 006B     		ldr	r0, [r0, #48]
 1580              	.LVL128:
 1581              		.loc 1 374 2 is_stmt 0 view .LVU325
 1582 000e FFF7FEFF 		bl	spi_read
 1583              	.LVL129:
 375:../Core/Src/adxl313.c **** 	return (int) _b;
 1584              		.loc 1 375 2 is_stmt 1 view .LVU326
 376:../Core/Src/adxl313.c **** }
 1585              		.loc 1 376 1 is_stmt 0 view .LVU327
 1586 0012 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1587 0016 03B0     		add	sp, sp, #12
 1588              	.LCFI48:
 1589              		.cfi_def_cfa_offset 4
 1590              		@ sp needed
 1591 0018 5DF804FB 		ldr	pc, [sp], #4
 1592              		.cfi_endproc
 1593              	.LFE177:
 1595              		.section	.text.setTimeInactivity,"ax",%progbits
 1596              		.align	1
 1597              		.global	setTimeInactivity
 1598              		.syntax unified
 1599              		.thumb
 1600              		.thumb_func
 1601              		.fpu fpv5-d16
 1603              	setTimeInactivity:
 1604              	.LVL130:
 1605              	.LFB178:
 377:../Core/Src/adxl313.c **** 
 378:../Core/Src/adxl313.c **** /*********************** TIME_INACT RESIGER *************************/
 379:../Core/Src/adxl313.c **** /*                          ~ SET & GET                             */
 380:../Core/Src/adxl313.c **** // Contains an Unsigned Time Value Representing the Amount of Time that
 381:../Core/Src/adxl313.c **** //  Acceleration must be Less Than the Value in the THRESH_INACT Register
 382:../Core/Src/adxl313.c **** //  for Inactivity to be Declared.
 383:../Core/Src/adxl313.c **** // Uses Filtered Output Data* unlike other Interrupt Functions
 384:../Core/Src/adxl313.c **** // Scale Factor is 1sec/LSB.
 385:../Core/Src/adxl313.c **** // Value Must Be Between 0 and 255.
 386:../Core/Src/adxl313.c **** void setTimeInactivity(adxl313_dev *dev, int timeInactivity) {
 1606              		.loc 1 386 62 is_stmt 1 view -0
 1607              		.cfi_startproc
 1608              		@ args = 0, pretend = 0, frame = 0
 1609              		@ frame_needed = 0, uses_anonymous_args = 0
 1610              		.loc 1 386 62 is_stmt 0 view .LVU329
 1611 0000 08B5     		push	{r3, lr}
 1612              	.LCFI49:
ARM GAS  /tmp/cctdo2D3.s 			page 36


 1613              		.cfi_def_cfa_offset 8
 1614              		.cfi_offset 3, -8
 1615              		.cfi_offset 14, -4
 387:../Core/Src/adxl313.c **** 	uint8_t _b = (uint8_t) constrain(timeInactivity,0,255);
 1616              		.loc 1 387 2 is_stmt 1 view .LVU330
 1617              	.LVL131:
 1618              	.LBB32:
 1619              	.LBI32:
  26:../Core/Src/adxl313.c **** {
 1620              		.loc 1 26 19 view .LVU331
 1621              	.LBB33:
  28:../Core/Src/adxl313.c **** }
 1622              		.loc 1 28 2 view .LVU332
  28:../Core/Src/adxl313.c **** }
 1623              		.loc 1 28 9 is_stmt 0 view .LVU333
 1624 0002 0029     		cmp	r1, #0
  28:../Core/Src/adxl313.c **** }
 1625              		.loc 1 28 9 view .LVU334
 1626 0004 09DB     		blt	.L89
 1627 0006 FF29     		cmp	r1, #255
 1628 0008 A8BF     		it	ge
 1629 000a FF21     		movge	r1, #255
 1630              	.LVL132:
 1631              	.L88:
  28:../Core/Src/adxl313.c **** }
 1632              		.loc 1 28 9 view .LVU335
 1633              	.LBE33:
 1634              	.LBE32:
 388:../Core/Src/adxl313.c **** 
 389:../Core/Src/adxl313.c **** 	spi_write(dev->spi_desc, ADXL313_TIME_INACT, _b, 1);
 1635              		.loc 1 389 2 is_stmt 1 view .LVU336
 1636 000c 0123     		movs	r3, #1
 1637 000e CAB2     		uxtb	r2, r1
 1638 0010 2621     		movs	r1, #38
 1639              	.LVL133:
 1640              		.loc 1 389 2 is_stmt 0 view .LVU337
 1641 0012 006B     		ldr	r0, [r0, #48]
 1642              	.LVL134:
 1643              		.loc 1 389 2 view .LVU338
 1644 0014 FFF7FEFF 		bl	spi_write
 1645              	.LVL135:
 390:../Core/Src/adxl313.c **** }
 1646              		.loc 1 390 1 view .LVU339
 1647 0018 08BD     		pop	{r3, pc}
 1648              	.LVL136:
 1649              	.L89:
 1650              	.LBB35:
 1651              	.LBB34:
  28:../Core/Src/adxl313.c **** }
 1652              		.loc 1 28 9 view .LVU340
 1653 001a 0021     		movs	r1, #0
 1654              	.LVL137:
  28:../Core/Src/adxl313.c **** }
 1655              		.loc 1 28 9 view .LVU341
 1656 001c F6E7     		b	.L88
 1657              	.LBE34:
 1658              	.LBE35:
ARM GAS  /tmp/cctdo2D3.s 			page 37


 1659              		.cfi_endproc
 1660              	.LFE178:
 1662              		.section	.text.getTimeInactivity,"ax",%progbits
 1663              		.align	1
 1664              		.global	getTimeInactivity
 1665              		.syntax unified
 1666              		.thumb
 1667              		.thumb_func
 1668              		.fpu fpv5-d16
 1670              	getTimeInactivity:
 1671              	.LVL138:
 1672              	.LFB179:
 391:../Core/Src/adxl313.c **** 
 392:../Core/Src/adxl313.c **** int getTimeInactivity(adxl313_dev *dev) {
 1673              		.loc 1 392 41 is_stmt 1 view -0
 1674              		.cfi_startproc
 1675              		@ args = 0, pretend = 0, frame = 8
 1676              		@ frame_needed = 0, uses_anonymous_args = 0
 1677              		.loc 1 392 41 is_stmt 0 view .LVU343
 1678 0000 00B5     		push	{lr}
 1679              	.LCFI50:
 1680              		.cfi_def_cfa_offset 4
 1681              		.cfi_offset 14, -4
 1682 0002 83B0     		sub	sp, sp, #12
 1683              	.LCFI51:
 1684              		.cfi_def_cfa_offset 16
 393:../Core/Src/adxl313.c **** 	uint8_t _b;
 1685              		.loc 1 393 2 is_stmt 1 view .LVU344
 394:../Core/Src/adxl313.c **** 
 395:../Core/Src/adxl313.c **** 	spi_read(dev->spi_desc, ADXL313_TIME_INACT, 1, &_b);
 1686              		.loc 1 395 2 view .LVU345
 1687 0004 0DF10703 		add	r3, sp, #7
 1688 0008 0122     		movs	r2, #1
 1689 000a 2621     		movs	r1, #38
 1690 000c 006B     		ldr	r0, [r0, #48]
 1691              	.LVL139:
 1692              		.loc 1 395 2 is_stmt 0 view .LVU346
 1693 000e FFF7FEFF 		bl	spi_read
 1694              	.LVL140:
 396:../Core/Src/adxl313.c **** 	return (int) _b;
 1695              		.loc 1 396 2 is_stmt 1 view .LVU347
 397:../Core/Src/adxl313.c **** }
 1696              		.loc 1 397 1 is_stmt 0 view .LVU348
 1697 0012 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1698 0016 03B0     		add	sp, sp, #12
 1699              	.LCFI52:
 1700              		.cfi_def_cfa_offset 4
 1701              		@ sp needed
 1702 0018 5DF804FB 		ldr	pc, [sp], #4
 1703              		.cfi_endproc
 1704              	.LFE179:
 1706              		.section	.text.isLowPower,"ax",%progbits
 1707              		.align	1
 1708              		.global	isLowPower
 1709              		.syntax unified
 1710              		.thumb
 1711              		.thumb_func
ARM GAS  /tmp/cctdo2D3.s 			page 38


 1712              		.fpu fpv5-d16
 1714              	isLowPower:
 1715              	.LVL141:
 1716              	.LFB180:
 398:../Core/Src/adxl313.c **** 
 399:../Core/Src/adxl313.c **** /************************** LOW POWER BIT ***************************/
 400:../Core/Src/adxl313.c **** /*                                                                  */
 401:../Core/Src/adxl313.c **** bool isLowPower( adxl313_dev *dev){
 1717              		.loc 1 401 35 is_stmt 1 view -0
 1718              		.cfi_startproc
 1719              		@ args = 0, pretend = 0, frame = 0
 1720              		@ frame_needed = 0, uses_anonymous_args = 0
 1721              		.loc 1 401 35 is_stmt 0 view .LVU350
 1722 0000 08B5     		push	{r3, lr}
 1723              	.LCFI53:
 1724              		.cfi_def_cfa_offset 8
 1725              		.cfi_offset 3, -8
 1726              		.cfi_offset 14, -4
 402:../Core/Src/adxl313.c **** 	return getRegisterBit(dev, ADXL313_BW_RATE, 4);
 1727              		.loc 1 402 2 is_stmt 1 view .LVU351
 1728              		.loc 1 402 9 is_stmt 0 view .LVU352
 1729 0002 0422     		movs	r2, #4
 1730 0004 2C21     		movs	r1, #44
 1731 0006 FFF7FEFF 		bl	getRegisterBit
 1732              	.LVL142:
 403:../Core/Src/adxl313.c **** }
 1733              		.loc 1 403 1 view .LVU353
 1734 000a 08BD     		pop	{r3, pc}
 1735              		.cfi_endproc
 1736              	.LFE180:
 1738              		.section	.text.lowPowerOn,"ax",%progbits
 1739              		.align	1
 1740              		.global	lowPowerOn
 1741              		.syntax unified
 1742              		.thumb
 1743              		.thumb_func
 1744              		.fpu fpv5-d16
 1746              	lowPowerOn:
 1747              	.LVL143:
 1748              	.LFB181:
 404:../Core/Src/adxl313.c **** void lowPowerOn( adxl313_dev *dev) {
 1749              		.loc 1 404 36 is_stmt 1 view -0
 1750              		.cfi_startproc
 1751              		@ args = 0, pretend = 0, frame = 0
 1752              		@ frame_needed = 0, uses_anonymous_args = 0
 1753              		.loc 1 404 36 is_stmt 0 view .LVU355
 1754 0000 08B5     		push	{r3, lr}
 1755              	.LCFI54:
 1756              		.cfi_def_cfa_offset 8
 1757              		.cfi_offset 3, -8
 1758              		.cfi_offset 14, -4
 405:../Core/Src/adxl313.c **** 	setRegisterBit(dev, ADXL313_BW_RATE, 4, true);
 1759              		.loc 1 405 2 is_stmt 1 view .LVU356
 1760 0002 0123     		movs	r3, #1
 1761 0004 0422     		movs	r2, #4
 1762 0006 2C21     		movs	r1, #44
 1763 0008 FFF7FEFF 		bl	setRegisterBit
ARM GAS  /tmp/cctdo2D3.s 			page 39


 1764              	.LVL144:
 406:../Core/Src/adxl313.c **** }
 1765              		.loc 1 406 1 is_stmt 0 view .LVU357
 1766 000c 08BD     		pop	{r3, pc}
 1767              		.cfi_endproc
 1768              	.LFE181:
 1770              		.section	.text.lowPowerOff,"ax",%progbits
 1771              		.align	1
 1772              		.global	lowPowerOff
 1773              		.syntax unified
 1774              		.thumb
 1775              		.thumb_func
 1776              		.fpu fpv5-d16
 1778              	lowPowerOff:
 1779              	.LVL145:
 1780              	.LFB182:
 407:../Core/Src/adxl313.c **** void lowPowerOff( adxl313_dev *dev) {
 1781              		.loc 1 407 37 is_stmt 1 view -0
 1782              		.cfi_startproc
 1783              		@ args = 0, pretend = 0, frame = 0
 1784              		@ frame_needed = 0, uses_anonymous_args = 0
 1785              		.loc 1 407 37 is_stmt 0 view .LVU359
 1786 0000 08B5     		push	{r3, lr}
 1787              	.LCFI55:
 1788              		.cfi_def_cfa_offset 8
 1789              		.cfi_offset 3, -8
 1790              		.cfi_offset 14, -4
 408:../Core/Src/adxl313.c **** 	setRegisterBit(dev, ADXL313_BW_RATE, 4, false);
 1791              		.loc 1 408 2 is_stmt 1 view .LVU360
 1792 0002 0023     		movs	r3, #0
 1793 0004 0422     		movs	r2, #4
 1794 0006 2C21     		movs	r1, #44
 1795 0008 FFF7FEFF 		bl	setRegisterBit
 1796              	.LVL146:
 409:../Core/Src/adxl313.c **** }
 1797              		.loc 1 409 1 is_stmt 0 view .LVU361
 1798 000c 08BD     		pop	{r3, pc}
 1799              		.cfi_endproc
 1800              	.LFE182:
 1802              		.section	.text.getRate,"ax",%progbits
 1803              		.align	1
 1804              		.global	getRate
 1805              		.syntax unified
 1806              		.thumb
 1807              		.thumb_func
 1808              		.fpu fpv5-d16
 1810              	getRate:
 1811              	.LVL147:
 1812              	.LFB183:
 410:../Core/Src/adxl313.c **** 
 411:../Core/Src/adxl313.c **** /*************************** RATE BITS ******************************/
 412:../Core/Src/adxl313.c **** /*                                                                  */
 413:../Core/Src/adxl313.c **** double getRate( adxl313_dev *dev){
 1813              		.loc 1 413 34 is_stmt 1 view -0
 1814              		.cfi_startproc
 1815              		@ args = 0, pretend = 0, frame = 8
 1816              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cctdo2D3.s 			page 40


 1817              		.loc 1 413 34 is_stmt 0 view .LVU363
 1818 0000 00B5     		push	{lr}
 1819              	.LCFI56:
 1820              		.cfi_def_cfa_offset 4
 1821              		.cfi_offset 14, -4
 1822 0002 83B0     		sub	sp, sp, #12
 1823              	.LCFI57:
 1824              		.cfi_def_cfa_offset 16
 414:../Core/Src/adxl313.c **** 	uint8_t _b;
 1825              		.loc 1 414 2 is_stmt 1 view .LVU364
 415:../Core/Src/adxl313.c **** 	
 416:../Core/Src/adxl313.c **** 	spi_read(dev->spi_desc, ADXL313_BW_RATE, 1, &_b);
 1826              		.loc 1 416 2 view .LVU365
 1827 0004 0DF10703 		add	r3, sp, #7
 1828 0008 0122     		movs	r2, #1
 1829 000a 2C21     		movs	r1, #44
 1830 000c 006B     		ldr	r0, [r0, #48]
 1831              	.LVL148:
 1832              		.loc 1 416 2 is_stmt 0 view .LVU366
 1833 000e FFF7FEFF 		bl	spi_read
 1834              	.LVL149:
 417:../Core/Src/adxl313.c **** 	_b &= ADXL313_ODR_MSK;
 1835              		.loc 1 417 2 is_stmt 1 view .LVU367
 1836              		.loc 1 417 5 is_stmt 0 view .LVU368
 1837 0012 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 1838 0016 03F00F03 		and	r3, r3, #15
 1839 001a 8DF80730 		strb	r3, [sp, #7]
 418:../Core/Src/adxl313.c **** 	return (pow(2,((int) _b)-6)) * 6.25;
 1840              		.loc 1 418 2 is_stmt 1 view .LVU369
 1841              		.loc 1 418 26 is_stmt 0 view .LVU370
 1842 001e 063B     		subs	r3, r3, #6
 1843 0020 01EE103A 		vmov	s2, r3	@ int
 1844              		.loc 1 418 10 view .LVU371
 1845 0024 B8EEC11B 		vcvt.f64.s32	d1, s2
 1846 0028 B0EE000B 		vmov.f64	d0, #2.0e+0
 1847 002c FFF7FEFF 		bl	pow
 1848              	.LVL150:
 419:../Core/Src/adxl313.c **** }
 1849              		.loc 1 419 1 view .LVU372
 1850 0030 B1EE097B 		vmov.f64	d7, #6.25e+0
 1851 0034 20EE070B 		vmul.f64	d0, d0, d7
 1852 0038 03B0     		add	sp, sp, #12
 1853              	.LCFI58:
 1854              		.cfi_def_cfa_offset 4
 1855              		@ sp needed
 1856 003a 5DF804FB 		ldr	pc, [sp], #4
 1857              		.cfi_endproc
 1858              	.LFE183:
 1860              		.section	.rodata.setRate.str1.4,"aMS",%progbits,1
 1861              		.align	2
 1862              	.LC1:
 1863 0000 496E7661 		.ascii	"Invalid rate value!\012\015\000"
 1863      6C696420 
 1863      72617465 
 1863      2076616C 
 1863      7565210A 
 1864              		.section	.text.setRate,"ax",%progbits
ARM GAS  /tmp/cctdo2D3.s 			page 41


 1865              		.align	1
 1866              		.global	setRate
 1867              		.syntax unified
 1868              		.thumb
 1869              		.thumb_func
 1870              		.fpu fpv5-d16
 1872              	setRate:
 1873              	.LVL151:
 1874              	.LFB184:
 420:../Core/Src/adxl313.c **** 
 421:../Core/Src/adxl313.c **** void setRate( adxl313_dev *dev, double rate){
 1875              		.loc 1 421 45 is_stmt 1 view -0
 1876              		.cfi_startproc
 1877              		@ args = 0, pretend = 0, frame = 8
 1878              		@ frame_needed = 0, uses_anonymous_args = 0
 1879              		.loc 1 421 45 is_stmt 0 view .LVU374
 1880 0000 30B5     		push	{r4, r5, lr}
 1881              	.LCFI59:
 1882              		.cfi_def_cfa_offset 12
 1883              		.cfi_offset 4, -12
 1884              		.cfi_offset 5, -8
 1885              		.cfi_offset 14, -4
 1886 0002 83B0     		sub	sp, sp, #12
 1887              	.LCFI60:
 1888              		.cfi_def_cfa_offset 24
 1889 0004 0546     		mov	r5, r0
 422:../Core/Src/adxl313.c **** 	uint8_t _b,_s;
 1890              		.loc 1 422 2 is_stmt 1 view .LVU375
 423:../Core/Src/adxl313.c **** 	int v = (int) (rate / 6.25);
 1891              		.loc 1 423 2 view .LVU376
 1892              		.loc 1 423 22 is_stmt 0 view .LVU377
 1893 0006 B1EE096B 		vmov.f64	d6, #6.25e+0
 1894 000a 80EE067B 		vdiv.f64	d7, d0, d6
 1895              		.loc 1 423 6 view .LVU378
 1896 000e FDEEC77B 		vcvt.s32.f64	s15, d7
 1897 0012 17EE903A 		vmov	r3, s15	@ int
 1898              	.LVL152:
 424:../Core/Src/adxl313.c **** 	int r = 0;
 1899              		.loc 1 424 2 is_stmt 1 view .LVU379
 425:../Core/Src/adxl313.c **** 
 426:../Core/Src/adxl313.c **** 	while (v >>= 1)
 1900              		.loc 1 426 2 view .LVU380
 424:../Core/Src/adxl313.c **** 	int r = 0;
 1901              		.loc 1 424 6 is_stmt 0 view .LVU381
 1902 0016 0024     		movs	r4, #0
 1903              		.loc 1 426 8 view .LVU382
 1904 0018 00E0     		b	.L102
 1905              	.LVL153:
 1906              	.L103:
 427:../Core/Src/adxl313.c **** 		r++;
 1907              		.loc 1 427 3 is_stmt 1 view .LVU383
 1908              		.loc 1 427 4 is_stmt 0 view .LVU384
 1909 001a 0134     		adds	r4, r4, #1
 1910              	.LVL154:
 1911              	.L102:
 426:../Core/Src/adxl313.c **** 		r++;
 1912              		.loc 1 426 8 is_stmt 1 view .LVU385
ARM GAS  /tmp/cctdo2D3.s 			page 42


 426:../Core/Src/adxl313.c **** 		r++;
 1913              		.loc 1 426 8 is_stmt 0 view .LVU386
 1914 001c 5B10     		asrs	r3, r3, #1
 1915              	.LVL155:
 426:../Core/Src/adxl313.c **** 		r++;
 1916              		.loc 1 426 8 view .LVU387
 1917 001e FCD1     		bne	.L103
 428:../Core/Src/adxl313.c **** 
 429:../Core/Src/adxl313.c **** 	if (r <= 9) // if rate <= 3200 --> r <= 9  
 1918              		.loc 1 429 2 is_stmt 1 view .LVU388
 1919              		.loc 1 429 5 is_stmt 0 view .LVU389
 1920 0020 092C     		cmp	r4, #9
 1921 0022 16DC     		bgt	.L104
 430:../Core/Src/adxl313.c **** 	{
 431:../Core/Src/adxl313.c **** 		spi_read(dev->spi_desc, ADXL313_BW_RATE, 1, &_b);
 1922              		.loc 1 431 3 is_stmt 1 view .LVU390
 1923 0024 0DF10703 		add	r3, sp, #7
 1924              	.LVL156:
 1925              		.loc 1 431 3 is_stmt 0 view .LVU391
 1926 0028 0122     		movs	r2, #1
 1927 002a 2C21     		movs	r1, #44
 1928 002c 286B     		ldr	r0, [r5, #48]
 1929              	.LVL157:
 1930              		.loc 1 431 3 view .LVU392
 1931 002e FFF7FEFF 		bl	spi_read
 1932              	.LVL158:
 432:../Core/Src/adxl313.c **** 		_s = (uint8_t) (r + ADXL313_ODR_OFFSET) | (_b & ~ADXL313_ODR_MSK);
 1933              		.loc 1 432 3 is_stmt 1 view .LVU393
 1934              		.loc 1 432 8 is_stmt 0 view .LVU394
 1935 0032 A21D     		adds	r2, r4, #6
 1936 0034 52B2     		sxtb	r2, r2
 1937              		.loc 1 432 49 view .LVU395
 1938 0036 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 1939 003a 23F00F03 		bic	r3, r3, #15
 1940 003e 5BB2     		sxtb	r3, r3
 1941              		.loc 1 432 43 view .LVU396
 1942 0040 1A43     		orrs	r2, r2, r3
 1943              	.LVL159:
 433:../Core/Src/adxl313.c **** 		spi_write(dev->spi_desc, ADXL313_BW_RATE, _s, 1);
 1944              		.loc 1 433 3 is_stmt 1 view .LVU397
 1945 0042 0123     		movs	r3, #1
 1946 0044 D2B2     		uxtb	r2, r2
 1947              		.loc 1 433 3 is_stmt 0 view .LVU398
 1948 0046 2C21     		movs	r1, #44
 1949 0048 286B     		ldr	r0, [r5, #48]
 1950 004a FFF7FEFF 		bl	spi_write
 1951              	.LVL160:
 1952              	.L101:
 434:../Core/Src/adxl313.c **** 	}
 435:../Core/Src/adxl313.c **** 	else // if rate > 3200 
 436:../Core/Src/adxl313.c **** 		UART_puts("Invalid rate value!\n\r");
 437:../Core/Src/adxl313.c **** }
 1953              		.loc 1 437 1 view .LVU399
 1954 004e 03B0     		add	sp, sp, #12
 1955              	.LCFI61:
 1956              		.cfi_remember_state
 1957              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/cctdo2D3.s 			page 43


 1958              		@ sp needed
 1959 0050 30BD     		pop	{r4, r5, pc}
 1960              	.LVL161:
 1961              	.L104:
 1962              	.LCFI62:
 1963              		.cfi_restore_state
 436:../Core/Src/adxl313.c **** }
 1964              		.loc 1 436 3 is_stmt 1 view .LVU400
 1965 0052 0248     		ldr	r0, .L107
 1966              	.LVL162:
 436:../Core/Src/adxl313.c **** }
 1967              		.loc 1 436 3 is_stmt 0 view .LVU401
 1968 0054 FFF7FEFF 		bl	UART_puts
 1969              	.LVL163:
 1970              		.loc 1 437 1 view .LVU402
 1971 0058 F9E7     		b	.L101
 1972              	.L108:
 1973 005a 00BF     		.align	2
 1974              	.L107:
 1975 005c 00000000 		.word	.LC1
 1976              		.cfi_endproc
 1977              	.LFE184:
 1979              		.section	.text.setBandwidth,"ax",%progbits
 1980              		.align	1
 1981              		.global	setBandwidth
 1982              		.syntax unified
 1983              		.thumb
 1984              		.thumb_func
 1985              		.fpu fpv5-d16
 1987              	setBandwidth:
 1988              	.LVL164:
 1989              	.LFB185:
 438:../Core/Src/adxl313.c **** 
 439:../Core/Src/adxl313.c **** /*************************** BANDWIDTH ******************************/
 440:../Core/Src/adxl313.c **** /*                          ~ SET & GET                             */
 441:../Core/Src/adxl313.c **** void setBandwidth( adxl313_dev *dev, uint8_t bw){
 1990              		.loc 1 441 49 is_stmt 1 view -0
 1991              		.cfi_startproc
 1992              		@ args = 0, pretend = 0, frame = 0
 1993              		@ frame_needed = 0, uses_anonymous_args = 0
 1994              		.loc 1 441 49 is_stmt 0 view .LVU404
 1995 0000 08B5     		push	{r3, lr}
 1996              	.LCFI63:
 1997              		.cfi_def_cfa_offset 8
 1998              		.cfi_offset 3, -8
 1999              		.cfi_offset 14, -4
 2000 0002 0A46     		mov	r2, r1
 442:../Core/Src/adxl313.c ****  	spi_write(dev->spi_desc, ADXL313_BW_RATE, bw, 1);
 2001              		.loc 1 442 3 is_stmt 1 view .LVU405
 2002 0004 0123     		movs	r3, #1
 2003 0006 2C21     		movs	r1, #44
 2004              	.LVL165:
 2005              		.loc 1 442 3 is_stmt 0 view .LVU406
 2006 0008 006B     		ldr	r0, [r0, #48]
 2007              	.LVL166:
 2008              		.loc 1 442 3 view .LVU407
 2009 000a FFF7FEFF 		bl	spi_write
ARM GAS  /tmp/cctdo2D3.s 			page 44


 2010              	.LVL167:
 443:../Core/Src/adxl313.c **** }
 2011              		.loc 1 443 1 view .LVU408
 2012 000e 08BD     		pop	{r3, pc}
 2013              		.cfi_endproc
 2014              	.LFE185:
 2016              		.section	.text.getBandwidth,"ax",%progbits
 2017              		.align	1
 2018              		.global	getBandwidth
 2019              		.syntax unified
 2020              		.thumb
 2021              		.thumb_func
 2022              		.fpu fpv5-d16
 2024              	getBandwidth:
 2025              	.LVL168:
 2026              	.LFB186:
 444:../Core/Src/adxl313.c **** 
 445:../Core/Src/adxl313.c **** uint8_t getBandwidth( adxl313_dev *dev){
 2027              		.loc 1 445 40 is_stmt 1 view -0
 2028              		.cfi_startproc
 2029              		@ args = 0, pretend = 0, frame = 8
 2030              		@ frame_needed = 0, uses_anonymous_args = 0
 2031              		.loc 1 445 40 is_stmt 0 view .LVU410
 2032 0000 00B5     		push	{lr}
 2033              	.LCFI64:
 2034              		.cfi_def_cfa_offset 4
 2035              		.cfi_offset 14, -4
 2036 0002 83B0     		sub	sp, sp, #12
 2037              	.LCFI65:
 2038              		.cfi_def_cfa_offset 16
 446:../Core/Src/adxl313.c **** 	uint8_t _b;
 2039              		.loc 1 446 2 is_stmt 1 view .LVU411
 447:../Core/Src/adxl313.c **** 
 448:../Core/Src/adxl313.c **** 	spi_read(dev->spi_desc, ADXL313_BW_RATE, 1, &_b);
 2040              		.loc 1 448 2 view .LVU412
 2041 0004 0DF10703 		add	r3, sp, #7
 2042 0008 0122     		movs	r2, #1
 2043 000a 2C21     		movs	r1, #44
 2044 000c 006B     		ldr	r0, [r0, #48]
 2045              	.LVL169:
 2046              		.loc 1 448 2 is_stmt 0 view .LVU413
 2047 000e FFF7FEFF 		bl	spi_read
 2048              	.LVL170:
 449:../Core/Src/adxl313.c **** 	return _b;
 2049              		.loc 1 449 2 is_stmt 1 view .LVU414
 450:../Core/Src/adxl313.c **** }
 2050              		.loc 1 450 1 is_stmt 0 view .LVU415
 2051 0012 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2052 0016 03B0     		add	sp, sp, #12
 2053              	.LCFI66:
 2054              		.cfi_def_cfa_offset 4
 2055              		@ sp needed
 2056 0018 5DF804FB 		ldr	pc, [sp], #4
 2057              		.cfi_endproc
 2058              	.LFE186:
 2060              		.section	.text.triggered,"ax",%progbits
 2061              		.align	1
ARM GAS  /tmp/cctdo2D3.s 			page 45


 2062              		.global	triggered
 2063              		.syntax unified
 2064              		.thumb
 2065              		.thumb_func
 2066              		.fpu fpv5-d16
 2068              	triggered:
 2069              	.LVL171:
 2070              	.LFB187:
 451:../Core/Src/adxl313.c **** 
 452:../Core/Src/adxl313.c **** /************************* TRIGGER CHECK  ***************************/
 453:../Core/Src/adxl313.c **** /*                                                                  */
 454:../Core/Src/adxl313.c **** // Check if Action was Triggered in Interrupts
 455:../Core/Src/adxl313.c **** // Example triggered(interrupts, ADXL313_DATA_READY);
 456:../Core/Src/adxl313.c **** bool triggered(adxl313_dev *dev, uint8_t interrupts, int mask){
 2071              		.loc 1 456 63 is_stmt 1 view -0
 2072              		.cfi_startproc
 2073              		@ args = 0, pretend = 0, frame = 0
 2074              		@ frame_needed = 0, uses_anonymous_args = 0
 2075              		@ link register save eliminated.
 457:../Core/Src/adxl313.c **** 	return ((interrupts >> mask) & 1);
 2076              		.loc 1 457 2 view .LVU417
 2077              		.loc 1 457 22 is_stmt 0 view .LVU418
 2078 0000 41FA02F0 		asr	r0, r1, r2
 2079              	.LVL172:
 458:../Core/Src/adxl313.c **** }
 2080              		.loc 1 458 1 view .LVU419
 2081 0004 00F00100 		and	r0, r0, #1
 2082 0008 7047     		bx	lr
 2083              		.cfi_endproc
 2084              	.LFE187:
 2086              		.section	.text.getInt_Source,"ax",%progbits
 2087              		.align	1
 2088              		.global	getInt_Source
 2089              		.syntax unified
 2090              		.thumb
 2091              		.thumb_func
 2092              		.fpu fpv5-d16
 2094              	getInt_Source:
 2095              	.LVL173:
 2096              	.LFB188:
 459:../Core/Src/adxl313.c **** 
 460:../Core/Src/adxl313.c **** uint8_t getInt_Source( adxl313_dev *dev) {
 2097              		.loc 1 460 42 is_stmt 1 view -0
 2098              		.cfi_startproc
 2099              		@ args = 0, pretend = 0, frame = 8
 2100              		@ frame_needed = 0, uses_anonymous_args = 0
 2101              		.loc 1 460 42 is_stmt 0 view .LVU421
 2102 0000 00B5     		push	{lr}
 2103              	.LCFI67:
 2104              		.cfi_def_cfa_offset 4
 2105              		.cfi_offset 14, -4
 2106 0002 83B0     		sub	sp, sp, #12
 2107              	.LCFI68:
 2108              		.cfi_def_cfa_offset 16
 461:../Core/Src/adxl313.c **** 	uint8_t _b;
 2109              		.loc 1 461 2 is_stmt 1 view .LVU422
 462:../Core/Src/adxl313.c **** 
ARM GAS  /tmp/cctdo2D3.s 			page 46


 463:../Core/Src/adxl313.c **** 	spi_read(dev->spi_desc, ADXL313_INT_SOURCE, 1, &_b);
 2110              		.loc 1 463 2 view .LVU423
 2111 0004 0DF10703 		add	r3, sp, #7
 2112 0008 0122     		movs	r2, #1
 2113 000a 3021     		movs	r1, #48
 2114 000c 006B     		ldr	r0, [r0, #48]
 2115              	.LVL174:
 2116              		.loc 1 463 2 is_stmt 0 view .LVU424
 2117 000e FFF7FEFF 		bl	spi_read
 2118              	.LVL175:
 464:../Core/Src/adxl313.c **** 	return _b;
 2119              		.loc 1 464 2 is_stmt 1 view .LVU425
 465:../Core/Src/adxl313.c **** }
 2120              		.loc 1 465 1 is_stmt 0 view .LVU426
 2121 0012 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2122 0016 03B0     		add	sp, sp, #12
 2123              	.LCFI69:
 2124              		.cfi_def_cfa_offset 4
 2125              		@ sp needed
 2126 0018 5DF804FB 		ldr	pc, [sp], #4
 2127              		.cfi_endproc
 2128              	.LFE188:
 2130              		.section	.text.getInterruptSource,"ax",%progbits
 2131              		.align	1
 2132              		.global	getInterruptSource
 2133              		.syntax unified
 2134              		.thumb
 2135              		.thumb_func
 2136              		.fpu fpv5-d16
 2138              	getInterruptSource:
 2139              	.LVL176:
 2140              	.LFB189:
 466:../Core/Src/adxl313.c **** 
 467:../Core/Src/adxl313.c **** bool getInterruptSource( adxl313_dev *dev, uint8_t interruptBit) {
 2141              		.loc 1 467 66 is_stmt 1 view -0
 2142              		.cfi_startproc
 2143              		@ args = 0, pretend = 0, frame = 0
 2144              		@ frame_needed = 0, uses_anonymous_args = 0
 2145              		.loc 1 467 66 is_stmt 0 view .LVU428
 2146 0000 08B5     		push	{r3, lr}
 2147              	.LCFI70:
 2148              		.cfi_def_cfa_offset 8
 2149              		.cfi_offset 3, -8
 2150              		.cfi_offset 14, -4
 2151 0002 0A46     		mov	r2, r1
 468:../Core/Src/adxl313.c **** 	return getRegisterBit(dev, ADXL313_INT_SOURCE, interruptBit);
 2152              		.loc 1 468 2 is_stmt 1 view .LVU429
 2153              		.loc 1 468 9 is_stmt 0 view .LVU430
 2154 0004 3021     		movs	r1, #48
 2155              	.LVL177:
 2156              		.loc 1 468 9 view .LVU431
 2157 0006 FFF7FEFF 		bl	getRegisterBit
 2158              	.LVL178:
 469:../Core/Src/adxl313.c **** }
 2159              		.loc 1 469 1 view .LVU432
 2160 000a 08BD     		pop	{r3, pc}
 2161              		.cfi_endproc
ARM GAS  /tmp/cctdo2D3.s 			page 47


 2162              	.LFE189:
 2164              		.section	.text.getInterruptMapping,"ax",%progbits
 2165              		.align	1
 2166              		.global	getInterruptMapping
 2167              		.syntax unified
 2168              		.thumb
 2169              		.thumb_func
 2170              		.fpu fpv5-d16
 2172              	getInterruptMapping:
 2173              	.LVL179:
 2174              	.LFB190:
 470:../Core/Src/adxl313.c **** 
 471:../Core/Src/adxl313.c **** bool getInterruptMapping( adxl313_dev *dev, uint8_t interruptBit) {
 2175              		.loc 1 471 67 is_stmt 1 view -0
 2176              		.cfi_startproc
 2177              		@ args = 0, pretend = 0, frame = 0
 2178              		@ frame_needed = 0, uses_anonymous_args = 0
 2179              		.loc 1 471 67 is_stmt 0 view .LVU434
 2180 0000 08B5     		push	{r3, lr}
 2181              	.LCFI71:
 2182              		.cfi_def_cfa_offset 8
 2183              		.cfi_offset 3, -8
 2184              		.cfi_offset 14, -4
 2185 0002 0A46     		mov	r2, r1
 472:../Core/Src/adxl313.c **** 	return getRegisterBit(dev, ADXL313_INT_MAP, interruptBit);
 2186              		.loc 1 472 2 is_stmt 1 view .LVU435
 2187              		.loc 1 472 9 is_stmt 0 view .LVU436
 2188 0004 2F21     		movs	r1, #47
 2189              	.LVL180:
 2190              		.loc 1 472 9 view .LVU437
 2191 0006 FFF7FEFF 		bl	getRegisterBit
 2192              	.LVL181:
 473:../Core/Src/adxl313.c **** }
 2193              		.loc 1 473 1 view .LVU438
 2194 000a 08BD     		pop	{r3, pc}
 2195              		.cfi_endproc
 2196              	.LFE190:
 2198              		.section	.text.setInterruptMapping,"ax",%progbits
 2199              		.align	1
 2200              		.global	setInterruptMapping
 2201              		.syntax unified
 2202              		.thumb
 2203              		.thumb_func
 2204              		.fpu fpv5-d16
 2206              	setInterruptMapping:
 2207              	.LVL182:
 2208              	.LFB191:
 474:../Core/Src/adxl313.c **** 
 475:../Core/Src/adxl313.c **** // /*********************** INTERRUPT MAPPING **************************/
 476:../Core/Src/adxl313.c **** // /*         Set the Mapping of an Interrupt to pin1 or pin2          */
 477:../Core/Src/adxl313.c **** // // eg: setInterruptMapping(ADXL313_INT_WATERMARK_BIT,ADXL313_INT2_PIN);
 478:../Core/Src/adxl313.c ****  void setInterruptMapping( adxl313_dev *dev, uint8_t interruptBit, bool interruptPin) {
 2209              		.loc 1 478 87 is_stmt 1 view -0
 2210              		.cfi_startproc
 2211              		@ args = 0, pretend = 0, frame = 0
 2212              		@ frame_needed = 0, uses_anonymous_args = 0
 2213              		.loc 1 478 87 is_stmt 0 view .LVU440
ARM GAS  /tmp/cctdo2D3.s 			page 48


 2214 0000 08B5     		push	{r3, lr}
 2215              	.LCFI72:
 2216              		.cfi_def_cfa_offset 8
 2217              		.cfi_offset 3, -8
 2218              		.cfi_offset 14, -4
 2219 0002 1346     		mov	r3, r2
 479:../Core/Src/adxl313.c ****  	setRegisterBit(dev, ADXL313_INT_MAP, interruptBit, interruptPin);
 2220              		.loc 1 479 3 is_stmt 1 view .LVU441
 2221 0004 0A46     		mov	r2, r1
 2222              	.LVL183:
 2223              		.loc 1 479 3 is_stmt 0 view .LVU442
 2224 0006 2F21     		movs	r1, #47
 2225              	.LVL184:
 2226              		.loc 1 479 3 view .LVU443
 2227 0008 FFF7FEFF 		bl	setRegisterBit
 2228              	.LVL185:
 480:../Core/Src/adxl313.c ****  }
 2229              		.loc 1 480 2 view .LVU444
 2230 000c 08BD     		pop	{r3, pc}
 2231              		.cfi_endproc
 2232              	.LFE191:
 2234              		.section	.text.isInterruptEnabled,"ax",%progbits
 2235              		.align	1
 2236              		.global	isInterruptEnabled
 2237              		.syntax unified
 2238              		.thumb
 2239              		.thumb_func
 2240              		.fpu fpv5-d16
 2242              	isInterruptEnabled:
 2243              	.LVL186:
 2244              	.LFB192:
 481:../Core/Src/adxl313.c **** 
 482:../Core/Src/adxl313.c **** bool isInterruptEnabled( adxl313_dev *dev, uint8_t interruptBit) {
 2245              		.loc 1 482 66 is_stmt 1 view -0
 2246              		.cfi_startproc
 2247              		@ args = 0, pretend = 0, frame = 0
 2248              		@ frame_needed = 0, uses_anonymous_args = 0
 2249              		.loc 1 482 66 is_stmt 0 view .LVU446
 2250 0000 08B5     		push	{r3, lr}
 2251              	.LCFI73:
 2252              		.cfi_def_cfa_offset 8
 2253              		.cfi_offset 3, -8
 2254              		.cfi_offset 14, -4
 2255 0002 0A46     		mov	r2, r1
 483:../Core/Src/adxl313.c **** 	return getRegisterBit(dev, ADXL313_INT_ENABLE,interruptBit);
 2256              		.loc 1 483 2 is_stmt 1 view .LVU447
 2257              		.loc 1 483 9 is_stmt 0 view .LVU448
 2258 0004 2E21     		movs	r1, #46
 2259              	.LVL187:
 2260              		.loc 1 483 9 view .LVU449
 2261 0006 FFF7FEFF 		bl	getRegisterBit
 2262              	.LVL188:
 484:../Core/Src/adxl313.c **** }
 2263              		.loc 1 484 1 view .LVU450
 2264 000a 08BD     		pop	{r3, pc}
 2265              		.cfi_endproc
 2266              	.LFE192:
ARM GAS  /tmp/cctdo2D3.s 			page 49


 2268              		.section	.text.setInterrupt,"ax",%progbits
 2269              		.align	1
 2270              		.global	setInterrupt
 2271              		.syntax unified
 2272              		.thumb
 2273              		.thumb_func
 2274              		.fpu fpv5-d16
 2276              	setInterrupt:
 2277              	.LVL189:
 2278              	.LFB193:
 485:../Core/Src/adxl313.c **** 
 486:../Core/Src/adxl313.c **** void setInterrupt( adxl313_dev *dev, uint8_t interruptBit, bool state) {
 2279              		.loc 1 486 72 is_stmt 1 view -0
 2280              		.cfi_startproc
 2281              		@ args = 0, pretend = 0, frame = 0
 2282              		@ frame_needed = 0, uses_anonymous_args = 0
 2283              		.loc 1 486 72 is_stmt 0 view .LVU452
 2284 0000 08B5     		push	{r3, lr}
 2285              	.LCFI74:
 2286              		.cfi_def_cfa_offset 8
 2287              		.cfi_offset 3, -8
 2288              		.cfi_offset 14, -4
 2289 0002 1346     		mov	r3, r2
 487:../Core/Src/adxl313.c **** 	setRegisterBit(dev, ADXL313_INT_ENABLE, interruptBit, state);
 2290              		.loc 1 487 2 is_stmt 1 view .LVU453
 2291 0004 0A46     		mov	r2, r1
 2292              	.LVL190:
 2293              		.loc 1 487 2 is_stmt 0 view .LVU454
 2294 0006 2E21     		movs	r1, #46
 2295              	.LVL191:
 2296              		.loc 1 487 2 view .LVU455
 2297 0008 FFF7FEFF 		bl	setRegisterBit
 2298              	.LVL192:
 488:../Core/Src/adxl313.c **** }
 2299              		.loc 1 488 1 view .LVU456
 2300 000c 08BD     		pop	{r3, pc}
 2301              		.cfi_endproc
 2302              	.LFE193:
 2304              		.section	.rodata.begin.str1.4,"aMS",%progbits,1
 2305              		.align	2
 2306              	.LC2:
 2307 0000 4144584C 		.ascii	"ADXL313 device not found in SPI interface. Check co"
 2307      33313320 
 2307      64657669 
 2307      6365206E 
 2307      6F742066 
 2308 0033 6E6E6563 		.ascii	"nnection and try again.\012\015\000"
 2308      74696F6E 
 2308      20616E64 
 2308      20747279 
 2308      20616761 
 2309 004d 000000   		.align	2
 2310              	.LC3:
 2311 0050 4144584C 		.ascii	"ADXL313 device initialized using SPI interface!\012"
 2311      33313320 
 2311      64657669 
 2311      63652069 
ARM GAS  /tmp/cctdo2D3.s 			page 50


 2311      6E697469 
 2312 0080 0D00     		.ascii	"\015\000"
 2313              		.section	.text.begin,"ax",%progbits
 2314              		.align	1
 2315              		.global	begin
 2316              		.syntax unified
 2317              		.thumb
 2318              		.thumb_func
 2319              		.fpu fpv5-d16
 2321              	begin:
 2322              	.LVL193:
 2323              	.LFB146:
  36:../Core/Src/adxl313.c **** 	adxl313_dev _dev;
 2324              		.loc 1 36 1 is_stmt 1 view -0
 2325              		.cfi_startproc
 2326              		@ args = 4, pretend = 0, frame = 80
 2327              		@ frame_needed = 0, uses_anonymous_args = 0
  36:../Core/Src/adxl313.c **** 	adxl313_dev _dev;
 2328              		.loc 1 36 1 is_stmt 0 view .LVU458
 2329 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2330              	.LCFI75:
 2331              		.cfi_def_cfa_offset 20
 2332              		.cfi_offset 4, -20
 2333              		.cfi_offset 5, -16
 2334              		.cfi_offset 6, -12
 2335              		.cfi_offset 7, -8
 2336              		.cfi_offset 14, -4
 2337 0002 95B0     		sub	sp, sp, #84
 2338              	.LCFI76:
 2339              		.cfi_def_cfa_offset 104
 2340 0004 0E46     		mov	r6, r1
 2341 0006 1746     		mov	r7, r2
 2342 0008 1D46     		mov	r5, r3
  37:../Core/Src/adxl313.c **** 	spi_comm_desc _spi_desc = {.hspi = &hspi1,
 2343              		.loc 1 37 2 is_stmt 1 view .LVU459
  38:../Core/Src/adxl313.c **** 								.CS_port = GPIOE,
 2344              		.loc 1 38 2 view .LVU460
  38:../Core/Src/adxl313.c **** 								.CS_port = GPIOE,
 2345              		.loc 1 38 16 is_stmt 0 view .LVU461
 2346 000a 1748     		ldr	r0, .L131
 2347              	.LVL194:
  38:../Core/Src/adxl313.c **** 								.CS_port = GPIOE,
 2348              		.loc 1 38 16 view .LVU462
 2349 000c 01AC     		add	r4, sp, #4
 2350 000e 07C8     		ldm	r0, {r0, r1, r2}
 2351              	.LVL195:
  38:../Core/Src/adxl313.c **** 								.CS_port = GPIOE,
 2352              		.loc 1 38 16 view .LVU463
 2353 0010 84E80700 		stm	r4, {r0, r1, r2}
  42:../Core/Src/adxl313.c **** 	if(!ret)
 2354              		.loc 1 42 2 is_stmt 1 view .LVU464
  42:../Core/Src/adxl313.c **** 	if(!ret)
 2355              		.loc 1 42 13 is_stmt 0 view .LVU465
 2356 0014 2046     		mov	r0, r4
 2357 0016 FFF7FEFF 		bl	checkPartId
 2358              	.LVL196:
  43:../Core/Src/adxl313.c **** 	{
ARM GAS  /tmp/cctdo2D3.s 			page 51


 2359              		.loc 1 43 2 is_stmt 1 view .LVU466
  43:../Core/Src/adxl313.c **** 	{
 2360              		.loc 1 43 4 is_stmt 0 view .LVU467
 2361 001a F8B1     		cbz	r0, .L130
  49:../Core/Src/adxl313.c **** 
 2362              		.loc 1 49 3 is_stmt 1 view .LVU468
 2363 001c 1348     		ldr	r0, .L131+4
 2364              	.LVL197:
  49:../Core/Src/adxl313.c **** 
 2365              		.loc 1 49 3 is_stmt 0 view .LVU469
 2366 001e FFF7FEFF 		bl	UART_puts
 2367              	.LVL198:
  51:../Core/Src/adxl313.c **** 	_dev.comm_type = comm_type;
 2368              		.loc 1 51 2 is_stmt 1 view .LVU470
  51:../Core/Src/adxl313.c **** 	_dev.comm_type = comm_type;
 2369              		.loc 1 51 13 is_stmt 0 view .LVU471
 2370 0022 8DF81070 		strb	r7, [sp, #16]
  52:../Core/Src/adxl313.c **** 	_dev.resolution = resolution;
 2371              		.loc 1 52 2 is_stmt 1 view .LVU472
  52:../Core/Src/adxl313.c **** 	_dev.resolution = resolution;
 2372              		.loc 1 52 17 is_stmt 0 view .LVU473
 2373 0026 8DF83E60 		strb	r6, [sp, #62]
  53:../Core/Src/adxl313.c **** 	_dev.odr = odr;
 2374              		.loc 1 53 2 is_stmt 1 view .LVU474
  53:../Core/Src/adxl313.c **** 	_dev.odr = odr;
 2375              		.loc 1 53 18 is_stmt 0 view .LVU475
 2376 002a 8DF81150 		strb	r5, [sp, #17]
  54:../Core/Src/adxl313.c **** 	_dev.spi_desc = &_spi_desc;
 2377              		.loc 1 54 2 is_stmt 1 view .LVU476
  54:../Core/Src/adxl313.c **** 	_dev.spi_desc = &_spi_desc;
 2378              		.loc 1 54 11 is_stmt 0 view .LVU477
 2379 002e BDF86830 		ldrh	r3, [sp, #104]
 2380 0032 8DF81330 		strb	r3, [sp, #19]
  55:../Core/Src/adxl313.c **** 	_dev.error_code = ADXL313_NO_ERROR;
 2381              		.loc 1 55 2 is_stmt 1 view .LVU478
  55:../Core/Src/adxl313.c **** 	_dev.error_code = ADXL313_NO_ERROR;
 2382              		.loc 1 55 16 is_stmt 0 view .LVU479
 2383 0036 01AB     		add	r3, sp, #4
 2384 0038 1093     		str	r3, [sp, #64]
  56:../Core/Src/adxl313.c **** 	_dev.status = ADXL313_OK;
 2385              		.loc 1 56 2 is_stmt 1 view .LVU480
  56:../Core/Src/adxl313.c **** 	_dev.status = ADXL313_OK;
 2386              		.loc 1 56 18 is_stmt 0 view .LVU481
 2387 003a 0023     		movs	r3, #0
 2388 003c 8DF84430 		strb	r3, [sp, #68]
  57:../Core/Src/adxl313.c **** 
 2389              		.loc 1 57 2 is_stmt 1 view .LVU482
  57:../Core/Src/adxl313.c **** 
 2390              		.loc 1 57 14 is_stmt 0 view .LVU483
 2391 0040 0124     		movs	r4, #1
 2392 0042 8DF84540 		strb	r4, [sp, #69]
  59:../Core/Src/adxl313.c **** 
 2393              		.loc 1 59 2 is_stmt 1 view .LVU484
 2394              	.LVL199:
  62:../Core/Src/adxl313.c **** 	measureModeOn(dev);
 2395              		.loc 1 62 2 view .LVU485
 2396 0046 2246     		mov	r2, r4
ARM GAS  /tmp/cctdo2D3.s 			page 52


 2397 0048 0721     		movs	r1, #7
 2398 004a 04A8     		add	r0, sp, #16
 2399              	.LVL200:
  62:../Core/Src/adxl313.c **** 	measureModeOn(dev);
 2400              		.loc 1 62 2 is_stmt 0 view .LVU486
 2401 004c FFF7FEFF 		bl	setInterrupt
 2402              	.LVL201:
  63:../Core/Src/adxl313.c **** 
 2403              		.loc 1 63 2 is_stmt 1 view .LVU487
 2404 0050 04A8     		add	r0, sp, #16
 2405              	.LVL202:
  63:../Core/Src/adxl313.c **** 
 2406              		.loc 1 63 2 is_stmt 0 view .LVU488
 2407 0052 FFF7FEFF 		bl	measureModeOn
 2408              	.LVL203:
  65:../Core/Src/adxl313.c **** }
 2409              		.loc 1 65 2 is_stmt 1 view .LVU489
 2410              	.L128:
  66:../Core/Src/adxl313.c **** 
 2411              		.loc 1 66 1 is_stmt 0 view .LVU490
 2412 0056 2046     		mov	r0, r4
 2413 0058 15B0     		add	sp, sp, #84
 2414              	.LCFI77:
 2415              		.cfi_remember_state
 2416              		.cfi_def_cfa_offset 20
 2417              		@ sp needed
 2418 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 2419              	.LVL204:
 2420              	.L130:
 2421              	.LCFI78:
 2422              		.cfi_restore_state
  66:../Core/Src/adxl313.c **** 
 2423              		.loc 1 66 1 view .LVU491
 2424 005c 0446     		mov	r4, r0
  45:../Core/Src/adxl313.c **** 		return (false);
 2425              		.loc 1 45 3 is_stmt 1 view .LVU492
 2426 005e 0448     		ldr	r0, .L131+8
 2427              	.LVL205:
  45:../Core/Src/adxl313.c **** 		return (false);
 2428              		.loc 1 45 3 is_stmt 0 view .LVU493
 2429 0060 FFF7FEFF 		bl	UART_puts
 2430              	.LVL206:
  46:../Core/Src/adxl313.c **** 	}
 2431              		.loc 1 46 3 is_stmt 1 view .LVU494
  46:../Core/Src/adxl313.c **** 	}
 2432              		.loc 1 46 10 is_stmt 0 view .LVU495
 2433 0064 F7E7     		b	.L128
 2434              	.L132:
 2435 0066 00BF     		.align	2
 2436              	.L131:
 2437 0068 00000000 		.word	.LANCHOR1
 2438 006c 50000000 		.word	.LC3
 2439 0070 00000000 		.word	.LC2
 2440              		.cfi_endproc
 2441              	.LFE146:
 2443              		.section	.text.ActivityINT,"ax",%progbits
 2444              		.align	1
ARM GAS  /tmp/cctdo2D3.s 			page 53


 2445              		.global	ActivityINT
 2446              		.syntax unified
 2447              		.thumb
 2448              		.thumb_func
 2449              		.fpu fpv5-d16
 2451              	ActivityINT:
 2452              	.LVL207:
 2453              	.LFB194:
 489:../Core/Src/adxl313.c **** 
 490:../Core/Src/adxl313.c **** void ActivityINT( adxl313_dev *dev, bool status) {
 2454              		.loc 1 490 50 is_stmt 1 view -0
 2455              		.cfi_startproc
 2456              		@ args = 0, pretend = 0, frame = 0
 2457              		@ frame_needed = 0, uses_anonymous_args = 0
 2458              		.loc 1 490 50 is_stmt 0 view .LVU497
 2459 0000 08B5     		push	{r3, lr}
 2460              	.LCFI79:
 2461              		.cfi_def_cfa_offset 8
 2462              		.cfi_offset 3, -8
 2463              		.cfi_offset 14, -4
 491:../Core/Src/adxl313.c **** 	if(status) {
 2464              		.loc 1 491 2 is_stmt 1 view .LVU498
 2465              		.loc 1 491 4 is_stmt 0 view .LVU499
 2466 0002 21B1     		cbz	r1, .L134
 492:../Core/Src/adxl313.c **** 		setInterrupt(dev, ADXL313_INT_ACTIVITY_BIT, 1);
 2467              		.loc 1 492 3 is_stmt 1 view .LVU500
 2468 0004 0122     		movs	r2, #1
 2469 0006 0421     		movs	r1, #4
 2470              	.LVL208:
 2471              		.loc 1 492 3 is_stmt 0 view .LVU501
 2472 0008 FFF7FEFF 		bl	setInterrupt
 2473              	.LVL209:
 2474              	.L133:
 493:../Core/Src/adxl313.c **** 	}
 494:../Core/Src/adxl313.c **** 	else {
 495:../Core/Src/adxl313.c **** 		setInterrupt(dev, ADXL313_INT_ACTIVITY_BIT, 0);
 496:../Core/Src/adxl313.c **** 	}
 497:../Core/Src/adxl313.c **** }
 2475              		.loc 1 497 1 view .LVU502
 2476 000c 08BD     		pop	{r3, pc}
 2477              	.LVL210:
 2478              	.L134:
 495:../Core/Src/adxl313.c **** 	}
 2479              		.loc 1 495 3 is_stmt 1 view .LVU503
 2480 000e 0022     		movs	r2, #0
 2481 0010 0421     		movs	r1, #4
 2482              	.LVL211:
 495:../Core/Src/adxl313.c **** 	}
 2483              		.loc 1 495 3 is_stmt 0 view .LVU504
 2484 0012 FFF7FEFF 		bl	setInterrupt
 2485              	.LVL212:
 2486              		.loc 1 497 1 view .LVU505
 2487 0016 F9E7     		b	.L133
 2488              		.cfi_endproc
 2489              	.LFE194:
 2491              		.section	.text.InactivityINT,"ax",%progbits
 2492              		.align	1
ARM GAS  /tmp/cctdo2D3.s 			page 54


 2493              		.global	InactivityINT
 2494              		.syntax unified
 2495              		.thumb
 2496              		.thumb_func
 2497              		.fpu fpv5-d16
 2499              	InactivityINT:
 2500              	.LVL213:
 2501              	.LFB195:
 498:../Core/Src/adxl313.c **** void InactivityINT( adxl313_dev *dev, bool status) {
 2502              		.loc 1 498 52 is_stmt 1 view -0
 2503              		.cfi_startproc
 2504              		@ args = 0, pretend = 0, frame = 0
 2505              		@ frame_needed = 0, uses_anonymous_args = 0
 2506              		.loc 1 498 52 is_stmt 0 view .LVU507
 2507 0000 08B5     		push	{r3, lr}
 2508              	.LCFI80:
 2509              		.cfi_def_cfa_offset 8
 2510              		.cfi_offset 3, -8
 2511              		.cfi_offset 14, -4
 499:../Core/Src/adxl313.c **** 	if(status) {
 2512              		.loc 1 499 2 is_stmt 1 view .LVU508
 2513              		.loc 1 499 4 is_stmt 0 view .LVU509
 2514 0002 21B1     		cbz	r1, .L138
 500:../Core/Src/adxl313.c **** 		setInterrupt(dev, ADXL313_INT_INACTIVITY_BIT, 1);
 2515              		.loc 1 500 3 is_stmt 1 view .LVU510
 2516 0004 0122     		movs	r2, #1
 2517 0006 0321     		movs	r1, #3
 2518              	.LVL214:
 2519              		.loc 1 500 3 is_stmt 0 view .LVU511
 2520 0008 FFF7FEFF 		bl	setInterrupt
 2521              	.LVL215:
 2522              	.L137:
 501:../Core/Src/adxl313.c **** 	}
 502:../Core/Src/adxl313.c **** 	else {
 503:../Core/Src/adxl313.c **** 		setInterrupt(dev, ADXL313_INT_INACTIVITY_BIT, 0);
 504:../Core/Src/adxl313.c **** 	}
 505:../Core/Src/adxl313.c **** }
 2523              		.loc 1 505 1 view .LVU512
 2524 000c 08BD     		pop	{r3, pc}
 2525              	.LVL216:
 2526              	.L138:
 503:../Core/Src/adxl313.c **** 	}
 2527              		.loc 1 503 3 is_stmt 1 view .LVU513
 2528 000e 0022     		movs	r2, #0
 2529 0010 0321     		movs	r1, #3
 2530              	.LVL217:
 503:../Core/Src/adxl313.c **** 	}
 2531              		.loc 1 503 3 is_stmt 0 view .LVU514
 2532 0012 FFF7FEFF 		bl	setInterrupt
 2533              	.LVL218:
 2534              		.loc 1 505 1 view .LVU515
 2535 0016 F9E7     		b	.L137
 2536              		.cfi_endproc
 2537              	.LFE195:
 2539              		.section	.text.DataReadyINT,"ax",%progbits
 2540              		.align	1
 2541              		.global	DataReadyINT
ARM GAS  /tmp/cctdo2D3.s 			page 55


 2542              		.syntax unified
 2543              		.thumb
 2544              		.thumb_func
 2545              		.fpu fpv5-d16
 2547              	DataReadyINT:
 2548              	.LVL219:
 2549              	.LFB196:
 506:../Core/Src/adxl313.c **** 
 507:../Core/Src/adxl313.c **** void DataReadyINT( adxl313_dev *dev, bool status) {
 2550              		.loc 1 507 51 is_stmt 1 view -0
 2551              		.cfi_startproc
 2552              		@ args = 0, pretend = 0, frame = 0
 2553              		@ frame_needed = 0, uses_anonymous_args = 0
 2554              		.loc 1 507 51 is_stmt 0 view .LVU517
 2555 0000 08B5     		push	{r3, lr}
 2556              	.LCFI81:
 2557              		.cfi_def_cfa_offset 8
 2558              		.cfi_offset 3, -8
 2559              		.cfi_offset 14, -4
 508:../Core/Src/adxl313.c **** 	if(status) {
 2560              		.loc 1 508 2 is_stmt 1 view .LVU518
 2561              		.loc 1 508 4 is_stmt 0 view .LVU519
 2562 0002 21B1     		cbz	r1, .L142
 509:../Core/Src/adxl313.c **** 		setInterrupt(dev, ADXL313_INT_DATA_READY_BIT, 1);
 2563              		.loc 1 509 3 is_stmt 1 view .LVU520
 2564 0004 0122     		movs	r2, #1
 2565 0006 0721     		movs	r1, #7
 2566              	.LVL220:
 2567              		.loc 1 509 3 is_stmt 0 view .LVU521
 2568 0008 FFF7FEFF 		bl	setInterrupt
 2569              	.LVL221:
 2570              	.L141:
 510:../Core/Src/adxl313.c **** 	}
 511:../Core/Src/adxl313.c **** 	else {
 512:../Core/Src/adxl313.c **** 		setInterrupt(dev, ADXL313_INT_DATA_READY_BIT, 0);
 513:../Core/Src/adxl313.c **** 	}
 514:../Core/Src/adxl313.c **** }
 2571              		.loc 1 514 1 view .LVU522
 2572 000c 08BD     		pop	{r3, pc}
 2573              	.LVL222:
 2574              	.L142:
 512:../Core/Src/adxl313.c **** 	}
 2575              		.loc 1 512 3 is_stmt 1 view .LVU523
 2576 000e 0022     		movs	r2, #0
 2577 0010 0721     		movs	r1, #7
 2578              	.LVL223:
 512:../Core/Src/adxl313.c **** 	}
 2579              		.loc 1 512 3 is_stmt 0 view .LVU524
 2580 0012 FFF7FEFF 		bl	setInterrupt
 2581              	.LVL224:
 2582              		.loc 1 514 1 view .LVU525
 2583 0016 F9E7     		b	.L141
 2584              		.cfi_endproc
 2585              	.LFE196:
 2587              		.section	.text.WatermarkINT,"ax",%progbits
 2588              		.align	1
 2589              		.global	WatermarkINT
ARM GAS  /tmp/cctdo2D3.s 			page 56


 2590              		.syntax unified
 2591              		.thumb
 2592              		.thumb_func
 2593              		.fpu fpv5-d16
 2595              	WatermarkINT:
 2596              	.LVL225:
 2597              	.LFB197:
 515:../Core/Src/adxl313.c **** 
 516:../Core/Src/adxl313.c **** void WatermarkINT( adxl313_dev *dev, bool status) {
 2598              		.loc 1 516 51 is_stmt 1 view -0
 2599              		.cfi_startproc
 2600              		@ args = 0, pretend = 0, frame = 0
 2601              		@ frame_needed = 0, uses_anonymous_args = 0
 2602              		.loc 1 516 51 is_stmt 0 view .LVU527
 2603 0000 08B5     		push	{r3, lr}
 2604              	.LCFI82:
 2605              		.cfi_def_cfa_offset 8
 2606              		.cfi_offset 3, -8
 2607              		.cfi_offset 14, -4
 517:../Core/Src/adxl313.c **** 	if(status) {
 2608              		.loc 1 517 2 is_stmt 1 view .LVU528
 2609              		.loc 1 517 4 is_stmt 0 view .LVU529
 2610 0002 21B1     		cbz	r1, .L146
 518:../Core/Src/adxl313.c **** 		setInterrupt(dev, ADXL313_INT_WATERMARK_BIT, 1);
 2611              		.loc 1 518 3 is_stmt 1 view .LVU530
 2612 0004 0122     		movs	r2, #1
 2613 0006 1146     		mov	r1, r2
 2614              	.LVL226:
 2615              		.loc 1 518 3 is_stmt 0 view .LVU531
 2616 0008 FFF7FEFF 		bl	setInterrupt
 2617              	.LVL227:
 2618              	.L145:
 519:../Core/Src/adxl313.c **** 	}
 520:../Core/Src/adxl313.c **** 	else {
 521:../Core/Src/adxl313.c **** 		setInterrupt(dev, ADXL313_INT_WATERMARK_BIT, 0);
 522:../Core/Src/adxl313.c **** 	}
 523:../Core/Src/adxl313.c **** }
 2619              		.loc 1 523 1 view .LVU532
 2620 000c 08BD     		pop	{r3, pc}
 2621              	.LVL228:
 2622              	.L146:
 521:../Core/Src/adxl313.c **** 	}
 2623              		.loc 1 521 3 is_stmt 1 view .LVU533
 2624 000e 0022     		movs	r2, #0
 2625 0010 0121     		movs	r1, #1
 2626              	.LVL229:
 521:../Core/Src/adxl313.c **** 	}
 2627              		.loc 1 521 3 is_stmt 0 view .LVU534
 2628 0012 FFF7FEFF 		bl	setInterrupt
 2629              	.LVL230:
 2630              		.loc 1 523 1 view .LVU535
 2631 0016 F9E7     		b	.L145
 2632              		.cfi_endproc
 2633              	.LFE197:
 2635              		.section	.text.OverrunINT,"ax",%progbits
 2636              		.align	1
 2637              		.global	OverrunINT
ARM GAS  /tmp/cctdo2D3.s 			page 57


 2638              		.syntax unified
 2639              		.thumb
 2640              		.thumb_func
 2641              		.fpu fpv5-d16
 2643              	OverrunINT:
 2644              	.LVL231:
 2645              	.LFB198:
 524:../Core/Src/adxl313.c **** 
 525:../Core/Src/adxl313.c **** void OverrunINT( adxl313_dev *dev, bool status) {
 2646              		.loc 1 525 49 is_stmt 1 view -0
 2647              		.cfi_startproc
 2648              		@ args = 0, pretend = 0, frame = 0
 2649              		@ frame_needed = 0, uses_anonymous_args = 0
 2650              		.loc 1 525 49 is_stmt 0 view .LVU537
 2651 0000 08B5     		push	{r3, lr}
 2652              	.LCFI83:
 2653              		.cfi_def_cfa_offset 8
 2654              		.cfi_offset 3, -8
 2655              		.cfi_offset 14, -4
 526:../Core/Src/adxl313.c **** 	if(status) {
 2656              		.loc 1 526 2 is_stmt 1 view .LVU538
 2657              		.loc 1 526 4 is_stmt 0 view .LVU539
 2658 0002 21B1     		cbz	r1, .L150
 527:../Core/Src/adxl313.c **** 		setInterrupt(dev, ADXL313_INT_OVERRUN_BIT, 1);
 2659              		.loc 1 527 3 is_stmt 1 view .LVU540
 2660 0004 0122     		movs	r2, #1
 2661 0006 0021     		movs	r1, #0
 2662              	.LVL232:
 2663              		.loc 1 527 3 is_stmt 0 view .LVU541
 2664 0008 FFF7FEFF 		bl	setInterrupt
 2665              	.LVL233:
 2666              	.L149:
 528:../Core/Src/adxl313.c **** 	}
 529:../Core/Src/adxl313.c **** 	else {
 530:../Core/Src/adxl313.c **** 		setInterrupt(dev, ADXL313_INT_OVERRUN_BIT, 0);
 531:../Core/Src/adxl313.c **** 	}
 532:../Core/Src/adxl313.c **** }
 2667              		.loc 1 532 1 view .LVU542
 2668 000c 08BD     		pop	{r3, pc}
 2669              	.LVL234:
 2670              	.L150:
 530:../Core/Src/adxl313.c **** 	}
 2671              		.loc 1 530 3 is_stmt 1 view .LVU543
 2672 000e 0022     		movs	r2, #0
 2673 0010 1146     		mov	r1, r2
 2674              	.LVL235:
 530:../Core/Src/adxl313.c **** 	}
 2675              		.loc 1 530 3 is_stmt 0 view .LVU544
 2676 0012 FFF7FEFF 		bl	setInterrupt
 2677              	.LVL236:
 2678              		.loc 1 532 1 view .LVU545
 2679 0016 F9E7     		b	.L149
 2680              		.cfi_endproc
 2681              	.LFE198:
 2683              		.section	.text.getFifoMode,"ax",%progbits
 2684              		.align	1
 2685              		.global	getFifoMode
ARM GAS  /tmp/cctdo2D3.s 			page 58


 2686              		.syntax unified
 2687              		.thumb
 2688              		.thumb_func
 2689              		.fpu fpv5-d16
 2691              	getFifoMode:
 2692              	.LVL237:
 2693              	.LFB199:
 533:../Core/Src/adxl313.c **** 
 534:../Core/Src/adxl313.c **** /*************************** FIFO MODE SETTING **************************/
 535:../Core/Src/adxl313.c **** /*          	                GET & SET                         		*/
 536:../Core/Src/adxl313.c **** uint8_t getFifoMode( adxl313_dev *dev) {
 2694              		.loc 1 536 40 is_stmt 1 view -0
 2695              		.cfi_startproc
 2696              		@ args = 0, pretend = 0, frame = 8
 2697              		@ frame_needed = 0, uses_anonymous_args = 0
 2698              		.loc 1 536 40 is_stmt 0 view .LVU547
 2699 0000 00B5     		push	{lr}
 2700              	.LCFI84:
 2701              		.cfi_def_cfa_offset 4
 2702              		.cfi_offset 14, -4
 2703 0002 83B0     		sub	sp, sp, #12
 2704              	.LCFI85:
 2705              		.cfi_def_cfa_offset 16
 537:../Core/Src/adxl313.c **** 	uint8_t _b;
 2706              		.loc 1 537 2 is_stmt 1 view .LVU548
 538:../Core/Src/adxl313.c **** 	spi_read(dev->spi_desc, ADXL313_FIFO_CTL, 1, &_b);
 2707              		.loc 1 538 2 view .LVU549
 2708 0004 0DF10703 		add	r3, sp, #7
 2709 0008 0122     		movs	r2, #1
 2710 000a 3821     		movs	r1, #56
 2711 000c 006B     		ldr	r0, [r0, #48]
 2712              	.LVL238:
 2713              		.loc 1 538 2 is_stmt 0 view .LVU550
 2714 000e FFF7FEFF 		bl	spi_read
 2715              	.LVL239:
 539:../Core/Src/adxl313.c **** 	uint8_t mode = (_b & 0b11000000);
 2716              		.loc 1 539 2 is_stmt 1 view .LVU551
 2717              		.loc 1 539 21 is_stmt 0 view .LVU552
 2718 0012 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2719              	.LVL240:
 540:../Core/Src/adxl313.c **** 	mode = (mode >> 6);
 2720              		.loc 1 540 2 is_stmt 1 view .LVU553
 541:../Core/Src/adxl313.c **** 	return mode;
 2721              		.loc 1 541 2 view .LVU554
 542:../Core/Src/adxl313.c **** }
 2722              		.loc 1 542 1 is_stmt 0 view .LVU555
 2723 0016 8009     		lsrs	r0, r0, #6
 2724              	.LVL241:
 2725              		.loc 1 542 1 view .LVU556
 2726 0018 03B0     		add	sp, sp, #12
 2727              	.LCFI86:
 2728              		.cfi_def_cfa_offset 4
 2729              		@ sp needed
 2730 001a 5DF804FB 		ldr	pc, [sp], #4
 2731              		.loc 1 542 1 view .LVU557
 2732              		.cfi_endproc
 2733              	.LFE199:
ARM GAS  /tmp/cctdo2D3.s 			page 59


 2735              		.section	.text.setFifoMode,"ax",%progbits
 2736              		.align	1
 2737              		.global	setFifoMode
 2738              		.syntax unified
 2739              		.thumb
 2740              		.thumb_func
 2741              		.fpu fpv5-d16
 2743              	setFifoMode:
 2744              	.LVL242:
 2745              	.LFB200:
 543:../Core/Src/adxl313.c **** 
 544:../Core/Src/adxl313.c **** void setFifoMode( adxl313_dev *dev, uint8_t mode) {
 2746              		.loc 1 544 51 is_stmt 1 view -0
 2747              		.cfi_startproc
 2748              		@ args = 0, pretend = 0, frame = 8
 2749              		@ frame_needed = 0, uses_anonymous_args = 0
 2750              		.loc 1 544 51 is_stmt 0 view .LVU559
 2751 0000 30B5     		push	{r4, r5, lr}
 2752              	.LCFI87:
 2753              		.cfi_def_cfa_offset 12
 2754              		.cfi_offset 4, -12
 2755              		.cfi_offset 5, -8
 2756              		.cfi_offset 14, -4
 2757 0002 83B0     		sub	sp, sp, #12
 2758              	.LCFI88:
 2759              		.cfi_def_cfa_offset 24
 2760 0004 0546     		mov	r5, r0
 545:../Core/Src/adxl313.c **** 	uint8_t _s = (mode << 6);
 2761              		.loc 1 545 2 is_stmt 1 view .LVU560
 2762              		.loc 1 545 10 is_stmt 0 view .LVU561
 2763 0006 8C01     		lsls	r4, r1, #6
 2764 0008 E4B2     		uxtb	r4, r4
 2765              	.LVL243:
 546:../Core/Src/adxl313.c **** 	uint8_t _b;
 2766              		.loc 1 546 2 is_stmt 1 view .LVU562
 547:../Core/Src/adxl313.c **** 	spi_read(dev->spi_desc, ADXL313_FIFO_CTL, 1, &_b);
 2767              		.loc 1 547 2 view .LVU563
 2768 000a 0DF10703 		add	r3, sp, #7
 2769 000e 0122     		movs	r2, #1
 2770 0010 3821     		movs	r1, #56
 2771              	.LVL244:
 2772              		.loc 1 547 2 is_stmt 0 view .LVU564
 2773 0012 006B     		ldr	r0, [r0, #48]
 2774              	.LVL245:
 2775              		.loc 1 547 2 view .LVU565
 2776 0014 FFF7FEFF 		bl	spi_read
 2777              	.LVL246:
 548:../Core/Src/adxl313.c **** 	_s |= (_b & 0b00111111);
 2778              		.loc 1 548 2 is_stmt 1 view .LVU566
 2779              		.loc 1 548 12 is_stmt 0 view .LVU567
 2780 0018 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 2781 001c 02F03F02 		and	r2, r2, #63
 2782              	.LVL247:
 549:../Core/Src/adxl313.c **** 
 550:../Core/Src/adxl313.c **** 	spi_write(dev->spi_desc, ADXL313_FIFO_CTL, _s, 1);
 2783              		.loc 1 550 2 is_stmt 1 view .LVU568
 2784 0020 0123     		movs	r3, #1
ARM GAS  /tmp/cctdo2D3.s 			page 60


 2785 0022 2243     		orrs	r2, r2, r4
 2786              	.LVL248:
 2787              		.loc 1 550 2 is_stmt 0 view .LVU569
 2788 0024 3821     		movs	r1, #56
 2789 0026 286B     		ldr	r0, [r5, #48]
 2790 0028 FFF7FEFF 		bl	spi_write
 2791              	.LVL249:
 551:../Core/Src/adxl313.c **** }
 2792              		.loc 1 551 1 view .LVU570
 2793 002c 03B0     		add	sp, sp, #12
 2794              	.LCFI89:
 2795              		.cfi_def_cfa_offset 12
 2796              		@ sp needed
 2797 002e 30BD     		pop	{r4, r5, pc}
 2798              		.loc 1 551 1 view .LVU571
 2799              		.cfi_endproc
 2800              	.LFE200:
 2802              		.section	.text.getFifoSamplesThreshhold,"ax",%progbits
 2803              		.align	1
 2804              		.global	getFifoSamplesThreshhold
 2805              		.syntax unified
 2806              		.thumb
 2807              		.thumb_func
 2808              		.fpu fpv5-d16
 2810              	getFifoSamplesThreshhold:
 2811              	.LVL250:
 2812              	.LFB201:
 552:../Core/Src/adxl313.c **** 
 553:../Core/Src/adxl313.c **** uint8_t getFifoSamplesThreshhold( adxl313_dev *dev) {
 2813              		.loc 1 553 53 is_stmt 1 view -0
 2814              		.cfi_startproc
 2815              		@ args = 0, pretend = 0, frame = 8
 2816              		@ frame_needed = 0, uses_anonymous_args = 0
 2817              		.loc 1 553 53 is_stmt 0 view .LVU573
 2818 0000 00B5     		push	{lr}
 2819              	.LCFI90:
 2820              		.cfi_def_cfa_offset 4
 2821              		.cfi_offset 14, -4
 2822 0002 83B0     		sub	sp, sp, #12
 2823              	.LCFI91:
 2824              		.cfi_def_cfa_offset 16
 554:../Core/Src/adxl313.c **** 	uint8_t _b;
 2825              		.loc 1 554 2 is_stmt 1 view .LVU574
 555:../Core/Src/adxl313.c **** 	spi_read(dev->spi_desc, ADXL313_FIFO_CTL, 1, &_b);
 2826              		.loc 1 555 2 view .LVU575
 2827 0004 0DF10703 		add	r3, sp, #7
 2828 0008 0122     		movs	r2, #1
 2829 000a 3821     		movs	r1, #56
 2830 000c 006B     		ldr	r0, [r0, #48]
 2831              	.LVL251:
 2832              		.loc 1 555 2 is_stmt 0 view .LVU576
 2833 000e FFF7FEFF 		bl	spi_read
 2834              	.LVL252:
 556:../Core/Src/adxl313.c **** 	uint8_t samples = (_b & 0b00011111);
 2835              		.loc 1 556 2 is_stmt 1 view .LVU577
 2836              		.loc 1 556 24 is_stmt 0 view .LVU578
 2837 0012 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
ARM GAS  /tmp/cctdo2D3.s 			page 61


 2838              	.LVL253:
 557:../Core/Src/adxl313.c **** 	return samples;
 2839              		.loc 1 557 2 is_stmt 1 view .LVU579
 558:../Core/Src/adxl313.c **** }
 2840              		.loc 1 558 1 is_stmt 0 view .LVU580
 2841 0016 00F01F00 		and	r0, r0, #31
 2842              	.LVL254:
 2843              		.loc 1 558 1 view .LVU581
 2844 001a 03B0     		add	sp, sp, #12
 2845              	.LCFI92:
 2846              		.cfi_def_cfa_offset 4
 2847              		@ sp needed
 2848 001c 5DF804FB 		ldr	pc, [sp], #4
 2849              		.loc 1 558 1 view .LVU582
 2850              		.cfi_endproc
 2851              	.LFE201:
 2853              		.section	.text.setFifoSamplesThreshhold,"ax",%progbits
 2854              		.align	1
 2855              		.global	setFifoSamplesThreshhold
 2856              		.syntax unified
 2857              		.thumb
 2858              		.thumb_func
 2859              		.fpu fpv5-d16
 2861              	setFifoSamplesThreshhold:
 2862              	.LVL255:
 2863              	.LFB202:
 559:../Core/Src/adxl313.c **** 
 560:../Core/Src/adxl313.c **** void setFifoSamplesThreshhold( adxl313_dev *dev, uint8_t samples) {
 2864              		.loc 1 560 67 is_stmt 1 view -0
 2865              		.cfi_startproc
 2866              		@ args = 0, pretend = 0, frame = 8
 2867              		@ frame_needed = 0, uses_anonymous_args = 0
 2868              		.loc 1 560 67 is_stmt 0 view .LVU584
 2869 0000 30B5     		push	{r4, r5, lr}
 2870              	.LCFI93:
 2871              		.cfi_def_cfa_offset 12
 2872              		.cfi_offset 4, -12
 2873              		.cfi_offset 5, -8
 2874              		.cfi_offset 14, -4
 2875 0002 83B0     		sub	sp, sp, #12
 2876              	.LCFI94:
 2877              		.cfi_def_cfa_offset 24
 2878 0004 0446     		mov	r4, r0
 2879 0006 0D46     		mov	r5, r1
 561:../Core/Src/adxl313.c **** 	uint8_t _s = samples;
 2880              		.loc 1 561 2 is_stmt 1 view .LVU585
 2881              	.LVL256:
 562:../Core/Src/adxl313.c **** 	uint8_t _b;
 2882              		.loc 1 562 2 view .LVU586
 563:../Core/Src/adxl313.c **** 	spi_read(dev->spi_desc, ADXL313_FIFO_CTL, 1, &_b);
 2883              		.loc 1 563 2 view .LVU587
 2884 0008 0DF10703 		add	r3, sp, #7
 2885 000c 0122     		movs	r2, #1
 2886 000e 3821     		movs	r1, #56
 2887              	.LVL257:
 2888              		.loc 1 563 2 is_stmt 0 view .LVU588
 2889 0010 006B     		ldr	r0, [r0, #48]
ARM GAS  /tmp/cctdo2D3.s 			page 62


 2890              	.LVL258:
 2891              		.loc 1 563 2 view .LVU589
 2892 0012 FFF7FEFF 		bl	spi_read
 2893              	.LVL259:
 564:../Core/Src/adxl313.c **** 	_s |= (_b & 0b11100000);
 2894              		.loc 1 564 2 is_stmt 1 view .LVU590
 2895              		.loc 1 564 12 is_stmt 0 view .LVU591
 2896 0016 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 2897 001a 22F01F02 		bic	r2, r2, #31
 2898 001e 52B2     		sxtb	r2, r2
 2899              		.loc 1 564 5 view .LVU592
 2900 0020 2A43     		orrs	r2, r2, r5
 2901              	.LVL260:
 565:../Core/Src/adxl313.c **** 
 566:../Core/Src/adxl313.c **** 	spi_write(dev->spi_desc, ADXL313_FIFO_CTL, _s, 1);
 2902              		.loc 1 566 2 is_stmt 1 view .LVU593
 2903 0022 0123     		movs	r3, #1
 2904 0024 D2B2     		uxtb	r2, r2
 2905              		.loc 1 566 2 is_stmt 0 view .LVU594
 2906 0026 3821     		movs	r1, #56
 2907 0028 206B     		ldr	r0, [r4, #48]
 2908 002a FFF7FEFF 		bl	spi_write
 2909              	.LVL261:
 567:../Core/Src/adxl313.c **** }
 2910              		.loc 1 567 1 view .LVU595
 2911 002e 03B0     		add	sp, sp, #12
 2912              	.LCFI95:
 2913              		.cfi_def_cfa_offset 12
 2914              		@ sp needed
 2915 0030 30BD     		pop	{r4, r5, pc}
 2916              		.loc 1 567 1 view .LVU596
 2917              		.cfi_endproc
 2918              	.LFE202:
 2920              		.section	.text.getFifoEntriesAmount,"ax",%progbits
 2921              		.align	1
 2922              		.global	getFifoEntriesAmount
 2923              		.syntax unified
 2924              		.thumb
 2925              		.thumb_func
 2926              		.fpu fpv5-d16
 2928              	getFifoEntriesAmount:
 2929              	.LVL262:
 2930              	.LFB203:
 568:../Core/Src/adxl313.c **** 
 569:../Core/Src/adxl313.c **** uint8_t getFifoEntriesAmount( adxl313_dev *dev) {
 2931              		.loc 1 569 49 is_stmt 1 view -0
 2932              		.cfi_startproc
 2933              		@ args = 0, pretend = 0, frame = 8
 2934              		@ frame_needed = 0, uses_anonymous_args = 0
 2935              		.loc 1 569 49 is_stmt 0 view .LVU598
 2936 0000 00B5     		push	{lr}
 2937              	.LCFI96:
 2938              		.cfi_def_cfa_offset 4
 2939              		.cfi_offset 14, -4
 2940 0002 83B0     		sub	sp, sp, #12
 2941              	.LCFI97:
 2942              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cctdo2D3.s 			page 63


 570:../Core/Src/adxl313.c **** 	uint8_t _b;
 2943              		.loc 1 570 2 is_stmt 1 view .LVU599
 571:../Core/Src/adxl313.c **** 	spi_read(dev->spi_desc, ADXL313_FIFO_STATUS, 1, &_b);
 2944              		.loc 1 571 2 view .LVU600
 2945 0004 0DF10703 		add	r3, sp, #7
 2946 0008 0122     		movs	r2, #1
 2947 000a 3921     		movs	r1, #57
 2948 000c 006B     		ldr	r0, [r0, #48]
 2949              	.LVL263:
 2950              		.loc 1 571 2 is_stmt 0 view .LVU601
 2951 000e FFF7FEFF 		bl	spi_read
 2952              	.LVL264:
 572:../Core/Src/adxl313.c **** 	uint8_t entries = (_b & 0b00111111);
 2953              		.loc 1 572 2 is_stmt 1 view .LVU602
 2954              		.loc 1 572 24 is_stmt 0 view .LVU603
 2955 0012 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2956              	.LVL265:
 573:../Core/Src/adxl313.c **** 	return entries;
 2957              		.loc 1 573 2 is_stmt 1 view .LVU604
 574:../Core/Src/adxl313.c **** }
 2958              		.loc 1 574 1 is_stmt 0 view .LVU605
 2959 0016 00F03F00 		and	r0, r0, #63
 2960              	.LVL266:
 2961              		.loc 1 574 1 view .LVU606
 2962 001a 03B0     		add	sp, sp, #12
 2963              	.LCFI98:
 2964              		.cfi_def_cfa_offset 4
 2965              		@ sp needed
 2966 001c 5DF804FB 		ldr	pc, [sp], #4
 2967              		.loc 1 574 1 view .LVU607
 2968              		.cfi_endproc
 2969              	.LFE203:
 2971              		.section	.text.clearFifo,"ax",%progbits
 2972              		.align	1
 2973              		.global	clearFifo
 2974              		.syntax unified
 2975              		.thumb
 2976              		.thumb_func
 2977              		.fpu fpv5-d16
 2979              	clearFifo:
 2980              	.LVL267:
 2981              	.LFB204:
 575:../Core/Src/adxl313.c **** 
 576:../Core/Src/adxl313.c **** void clearFifo( adxl313_dev *dev) {
 2982              		.loc 1 576 35 is_stmt 1 view -0
 2983              		.cfi_startproc
 2984              		@ args = 0, pretend = 0, frame = 0
 2985              		@ frame_needed = 0, uses_anonymous_args = 0
 2986              		.loc 1 576 35 is_stmt 0 view .LVU609
 2987 0000 38B5     		push	{r3, r4, r5, lr}
 2988              	.LCFI99:
 2989              		.cfi_def_cfa_offset 16
 2990              		.cfi_offset 3, -16
 2991              		.cfi_offset 4, -12
 2992              		.cfi_offset 5, -8
 2993              		.cfi_offset 14, -4
 2994 0002 0446     		mov	r4, r0
ARM GAS  /tmp/cctdo2D3.s 			page 64


 577:../Core/Src/adxl313.c **** 	uint8_t mode = getFifoMode(dev); // get current mode
 2995              		.loc 1 577 2 is_stmt 1 view .LVU610
 2996              		.loc 1 577 17 is_stmt 0 view .LVU611
 2997 0004 FFF7FEFF 		bl	getFifoMode
 2998              	.LVL268:
 2999              		.loc 1 577 17 view .LVU612
 3000 0008 0546     		mov	r5, r0
 3001              	.LVL269:
 578:../Core/Src/adxl313.c **** 	
 579:../Core/Src/adxl313.c **** 	setFifoMode(dev, ADXL313_FIFO_MODE_BYPASS); // set mode to bypass temporarily to clear contents
 3002              		.loc 1 579 2 is_stmt 1 view .LVU613
 3003 000a 0021     		movs	r1, #0
 3004 000c 2046     		mov	r0, r4
 3005 000e FFF7FEFF 		bl	setFifoMode
 3006              	.LVL270:
 580:../Core/Src/adxl313.c **** 	setFifoMode(dev, mode); // return mode to previous selection.
 3007              		.loc 1 580 2 view .LVU614
 3008 0012 2946     		mov	r1, r5
 3009 0014 2046     		mov	r0, r4
 3010 0016 FFF7FEFF 		bl	setFifoMode
 3011              	.LVL271:
 581:../Core/Src/adxl313.c **** }
 3012              		.loc 1 581 1 is_stmt 0 view .LVU615
 3013 001a 38BD     		pop	{r3, r4, r5, pc}
 3014              		.loc 1 581 1 view .LVU616
 3015              		.cfi_endproc
 3016              	.LFE204:
 3018              		.section	.text.isActivityXEnabled,"ax",%progbits
 3019              		.align	1
 3020              		.global	isActivityXEnabled
 3021              		.syntax unified
 3022              		.thumb
 3023              		.thumb_func
 3024              		.fpu fpv5-d16
 3026              	isActivityXEnabled:
 3027              	.LVL272:
 3028              	.LFB205:
 582:../Core/Src/adxl313.c **** 
 583:../Core/Src/adxl313.c **** /********************************************************************/
 584:../Core/Src/adxl313.c **** /*                                                                  */
 585:../Core/Src/adxl313.c **** //PARA CAGAR
 586:../Core/Src/adxl313.c **** 
 587:../Core/Src/adxl313.c **** // Print Register Values to Serial Output =
 588:../Core/Src/adxl313.c **** // Can be used to Manually Check the Current Configuration of Device
 589:../Core/Src/adxl313.c **** // void printAllRegister( adxl313_dev *dev) {
 590:../Core/Src/adxl313.c **** // 	uint8_t _b;
 591:../Core/Src/adxl313.c **** // 	char str[16];
 592:../Core/Src/adxl313.c **** // 	int i;
 593:../Core/Src/adxl313.c **** 	
 594:../Core/Src/adxl313.c **** // 	spi_read(dev.spi_desc, 0x00, 1, &_b);
 595:../Core/Src/adxl313.c **** // 	sprintf(str, "0x00: %X; \n\r", _b);
 596:../Core/Src/adxl313.c **** // 	UART_puts(str);
 597:../Core/Src/adxl313.c **** 
 598:../Core/Src/adxl313.c **** // 	for (i = 29; i <= 57; i++)
 599:../Core/Src/adxl313.c **** // 	{
 600:../Core/Src/adxl313.c **** // 		spi_read(dev.spi_desc, i, 1, &_b);
 601:../Core/Src/adxl313.c **** // 		sprintf("0x%X: 0x%X \n\r", i, _b);
ARM GAS  /tmp/cctdo2D3.s 			page 65


 602:../Core/Src/adxl313.c **** // 		UART_puts(str);
 603:../Core/Src/adxl313.c **** // 	}
 604:../Core/Src/adxl313.c **** // }
 605:../Core/Src/adxl313.c **** 
 606:../Core/Src/adxl313.c **** // // void print_byte(uint8_t val){
 607:../Core/Src/adxl313.c **** // // 	int i;
 608:../Core/Src/adxl313.c **** // // 	Serial.print("B");
 609:../Core/Src/adxl313.c **** // // 	for(i=7; i>=0; i--){
 610:../Core/Src/adxl313.c **** // // 		Serial.print(val >> i & 1, BIN);
 611:../Core/Src/adxl313.c **** // // 	}
 612:../Core/Src/adxl313.c **** // // }
 613:../Core/Src/adxl313.c **** 
 614:../Core/Src/adxl313.c **** // /***************** WRITES VALUE TO ADDRESS REGISTER *****************/
 615:../Core/Src/adxl313.c **** // void writeTo(uint8_t address, uint8_t val) {
 616:../Core/Src/adxl313.c **** // 	writeToSPI(address, val);
 617:../Core/Src/adxl313.c **** 	
 618:../Core/Src/adxl313.c **** // 	// if(comm) {
 619:../Core/Src/adxl313.c **** // 	// 	writeToI2C(address, val);
 620:../Core/Src/adxl313.c **** // 	// }
 621:../Core/Src/adxl313.c **** // 	// else {
 622:../Core/Src/adxl313.c **** 	
 623:../Core/Src/adxl313.c **** // 	// }
 624:../Core/Src/adxl313.c **** // }
 625:../Core/Src/adxl313.c **** 
 626:../Core/Src/adxl313.c **** // /************************ READING NUM BYTES *************************/
 627:../Core/Src/adxl313.c **** // /*    Reads Num Bytes. Starts from Address Reg to _buff Array        */
 628:../Core/Src/adxl313.c **** // void readFrom(uint8_t address, int num, uint8_t *_buff) {
 629:../Core/Src/adxl313.c **** // 	readFromSPI(address, num, _buff);	// If SPI Communication
 630:../Core/Src/adxl313.c **** 
 631:../Core/Src/adxl313.c **** // 	// if(comm) {
 632:../Core/Src/adxl313.c **** // 	// 	readFromI2C(address, num, _buff);	// If I2C Communication
 633:../Core/Src/adxl313.c **** // 	// }
 634:../Core/Src/adxl313.c **** // 	// else {
 635:../Core/Src/adxl313.c **** 
 636:../Core/Src/adxl313.c **** // 	// }
 637:../Core/Src/adxl313.c **** // }
 638:../Core/Src/adxl313.c **** 
 639:../Core/Src/adxl313.c **** /************************** ACTIVITY BITS ***************************/
 640:../Core/Src/adxl313.c **** /*                                                                  */
 641:../Core/Src/adxl313.c **** bool isActivityXEnabled( adxl313_dev *dev) {
 3029              		.loc 1 641 44 is_stmt 1 view -0
 3030              		.cfi_startproc
 3031              		@ args = 0, pretend = 0, frame = 0
 3032              		@ frame_needed = 0, uses_anonymous_args = 0
 3033              		.loc 1 641 44 is_stmt 0 view .LVU618
 3034 0000 08B5     		push	{r3, lr}
 3035              	.LCFI100:
 3036              		.cfi_def_cfa_offset 8
 3037              		.cfi_offset 3, -8
 3038              		.cfi_offset 14, -4
 642:../Core/Src/adxl313.c **** 	return getRegisterBit(dev, ADXL313_ACT_INACT_CTL, 6);
 3039              		.loc 1 642 2 is_stmt 1 view .LVU619
 3040              		.loc 1 642 9 is_stmt 0 view .LVU620
 3041 0002 0622     		movs	r2, #6
 3042 0004 2721     		movs	r1, #39
 3043 0006 FFF7FEFF 		bl	getRegisterBit
 3044              	.LVL273:
ARM GAS  /tmp/cctdo2D3.s 			page 66


 643:../Core/Src/adxl313.c **** }
 3045              		.loc 1 643 1 view .LVU621
 3046 000a 08BD     		pop	{r3, pc}
 3047              		.cfi_endproc
 3048              	.LFE205:
 3050              		.section	.text.isActivityYEnabled,"ax",%progbits
 3051              		.align	1
 3052              		.global	isActivityYEnabled
 3053              		.syntax unified
 3054              		.thumb
 3055              		.thumb_func
 3056              		.fpu fpv5-d16
 3058              	isActivityYEnabled:
 3059              	.LVL274:
 3060              	.LFB206:
 644:../Core/Src/adxl313.c **** bool isActivityYEnabled( adxl313_dev *dev) {
 3061              		.loc 1 644 44 is_stmt 1 view -0
 3062              		.cfi_startproc
 3063              		@ args = 0, pretend = 0, frame = 0
 3064              		@ frame_needed = 0, uses_anonymous_args = 0
 3065              		.loc 1 644 44 is_stmt 0 view .LVU623
 3066 0000 08B5     		push	{r3, lr}
 3067              	.LCFI101:
 3068              		.cfi_def_cfa_offset 8
 3069              		.cfi_offset 3, -8
 3070              		.cfi_offset 14, -4
 645:../Core/Src/adxl313.c **** 	return getRegisterBit(dev, ADXL313_ACT_INACT_CTL, 5);
 3071              		.loc 1 645 2 is_stmt 1 view .LVU624
 3072              		.loc 1 645 9 is_stmt 0 view .LVU625
 3073 0002 0522     		movs	r2, #5
 3074 0004 2721     		movs	r1, #39
 3075 0006 FFF7FEFF 		bl	getRegisterBit
 3076              	.LVL275:
 646:../Core/Src/adxl313.c **** }
 3077              		.loc 1 646 1 view .LVU626
 3078 000a 08BD     		pop	{r3, pc}
 3079              		.cfi_endproc
 3080              	.LFE206:
 3082              		.section	.text.isActivityZEnabled,"ax",%progbits
 3083              		.align	1
 3084              		.global	isActivityZEnabled
 3085              		.syntax unified
 3086              		.thumb
 3087              		.thumb_func
 3088              		.fpu fpv5-d16
 3090              	isActivityZEnabled:
 3091              	.LVL276:
 3092              	.LFB207:
 647:../Core/Src/adxl313.c **** bool isActivityZEnabled( adxl313_dev *dev) {
 3093              		.loc 1 647 44 is_stmt 1 view -0
 3094              		.cfi_startproc
 3095              		@ args = 0, pretend = 0, frame = 0
 3096              		@ frame_needed = 0, uses_anonymous_args = 0
 3097              		.loc 1 647 44 is_stmt 0 view .LVU628
 3098 0000 08B5     		push	{r3, lr}
 3099              	.LCFI102:
 3100              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cctdo2D3.s 			page 67


 3101              		.cfi_offset 3, -8
 3102              		.cfi_offset 14, -4
 648:../Core/Src/adxl313.c **** 	return getRegisterBit(dev, ADXL313_ACT_INACT_CTL, 4);
 3103              		.loc 1 648 2 is_stmt 1 view .LVU629
 3104              		.loc 1 648 9 is_stmt 0 view .LVU630
 3105 0002 0422     		movs	r2, #4
 3106 0004 2721     		movs	r1, #39
 3107 0006 FFF7FEFF 		bl	getRegisterBit
 3108              	.LVL277:
 649:../Core/Src/adxl313.c **** }
 3109              		.loc 1 649 1 view .LVU631
 3110 000a 08BD     		pop	{r3, pc}
 3111              		.cfi_endproc
 3112              	.LFE207:
 3114              		.section	.text.isInactivityXEnabled,"ax",%progbits
 3115              		.align	1
 3116              		.global	isInactivityXEnabled
 3117              		.syntax unified
 3118              		.thumb
 3119              		.thumb_func
 3120              		.fpu fpv5-d16
 3122              	isInactivityXEnabled:
 3123              	.LVL278:
 3124              	.LFB208:
 650:../Core/Src/adxl313.c **** bool isInactivityXEnabled( adxl313_dev *dev) {
 3125              		.loc 1 650 46 is_stmt 1 view -0
 3126              		.cfi_startproc
 3127              		@ args = 0, pretend = 0, frame = 0
 3128              		@ frame_needed = 0, uses_anonymous_args = 0
 3129              		.loc 1 650 46 is_stmt 0 view .LVU633
 3130 0000 08B5     		push	{r3, lr}
 3131              	.LCFI103:
 3132              		.cfi_def_cfa_offset 8
 3133              		.cfi_offset 3, -8
 3134              		.cfi_offset 14, -4
 651:../Core/Src/adxl313.c **** 	return getRegisterBit(dev, ADXL313_ACT_INACT_CTL, 2);
 3135              		.loc 1 651 2 is_stmt 1 view .LVU634
 3136              		.loc 1 651 9 is_stmt 0 view .LVU635
 3137 0002 0222     		movs	r2, #2
 3138 0004 2721     		movs	r1, #39
 3139 0006 FFF7FEFF 		bl	getRegisterBit
 3140              	.LVL279:
 652:../Core/Src/adxl313.c **** }
 3141              		.loc 1 652 1 view .LVU636
 3142 000a 08BD     		pop	{r3, pc}
 3143              		.cfi_endproc
 3144              	.LFE208:
 3146              		.section	.text.isInactivityYEnabled,"ax",%progbits
 3147              		.align	1
 3148              		.global	isInactivityYEnabled
 3149              		.syntax unified
 3150              		.thumb
 3151              		.thumb_func
 3152              		.fpu fpv5-d16
 3154              	isInactivityYEnabled:
 3155              	.LVL280:
 3156              	.LFB209:
ARM GAS  /tmp/cctdo2D3.s 			page 68


 653:../Core/Src/adxl313.c **** bool isInactivityYEnabled( adxl313_dev *dev) {
 3157              		.loc 1 653 46 is_stmt 1 view -0
 3158              		.cfi_startproc
 3159              		@ args = 0, pretend = 0, frame = 0
 3160              		@ frame_needed = 0, uses_anonymous_args = 0
 3161              		.loc 1 653 46 is_stmt 0 view .LVU638
 3162 0000 08B5     		push	{r3, lr}
 3163              	.LCFI104:
 3164              		.cfi_def_cfa_offset 8
 3165              		.cfi_offset 3, -8
 3166              		.cfi_offset 14, -4
 654:../Core/Src/adxl313.c **** 	return getRegisterBit(dev, ADXL313_ACT_INACT_CTL, 1);
 3167              		.loc 1 654 2 is_stmt 1 view .LVU639
 3168              		.loc 1 654 9 is_stmt 0 view .LVU640
 3169 0002 0122     		movs	r2, #1
 3170 0004 2721     		movs	r1, #39
 3171 0006 FFF7FEFF 		bl	getRegisterBit
 3172              	.LVL281:
 655:../Core/Src/adxl313.c **** }
 3173              		.loc 1 655 1 view .LVU641
 3174 000a 08BD     		pop	{r3, pc}
 3175              		.cfi_endproc
 3176              	.LFE209:
 3178              		.section	.text.isInactivityZEnabled,"ax",%progbits
 3179              		.align	1
 3180              		.global	isInactivityZEnabled
 3181              		.syntax unified
 3182              		.thumb
 3183              		.thumb_func
 3184              		.fpu fpv5-d16
 3186              	isInactivityZEnabled:
 3187              	.LVL282:
 3188              	.LFB210:
 656:../Core/Src/adxl313.c **** bool isInactivityZEnabled( adxl313_dev *dev) {
 3189              		.loc 1 656 46 is_stmt 1 view -0
 3190              		.cfi_startproc
 3191              		@ args = 0, pretend = 0, frame = 0
 3192              		@ frame_needed = 0, uses_anonymous_args = 0
 3193              		.loc 1 656 46 is_stmt 0 view .LVU643
 3194 0000 08B5     		push	{r3, lr}
 3195              	.LCFI105:
 3196              		.cfi_def_cfa_offset 8
 3197              		.cfi_offset 3, -8
 3198              		.cfi_offset 14, -4
 657:../Core/Src/adxl313.c **** 	return getRegisterBit(dev, ADXL313_ACT_INACT_CTL, 0);
 3199              		.loc 1 657 2 is_stmt 1 view .LVU644
 3200              		.loc 1 657 9 is_stmt 0 view .LVU645
 3201 0002 0022     		movs	r2, #0
 3202 0004 2721     		movs	r1, #39
 3203 0006 FFF7FEFF 		bl	getRegisterBit
 3204              	.LVL283:
 658:../Core/Src/adxl313.c **** }
 3205              		.loc 1 658 1 view .LVU646
 3206 000a 08BD     		pop	{r3, pc}
 3207              		.cfi_endproc
 3208              	.LFE210:
 3210              		.section	.text.setActivityX,"ax",%progbits
ARM GAS  /tmp/cctdo2D3.s 			page 69


 3211              		.align	1
 3212              		.global	setActivityX
 3213              		.syntax unified
 3214              		.thumb
 3215              		.thumb_func
 3216              		.fpu fpv5-d16
 3218              	setActivityX:
 3219              	.LVL284:
 3220              	.LFB211:
 659:../Core/Src/adxl313.c **** 
 660:../Core/Src/adxl313.c **** void setActivityX( adxl313_dev *dev, bool state) {
 3221              		.loc 1 660 50 is_stmt 1 view -0
 3222              		.cfi_startproc
 3223              		@ args = 0, pretend = 0, frame = 0
 3224              		@ frame_needed = 0, uses_anonymous_args = 0
 3225              		.loc 1 660 50 is_stmt 0 view .LVU648
 3226 0000 08B5     		push	{r3, lr}
 3227              	.LCFI106:
 3228              		.cfi_def_cfa_offset 8
 3229              		.cfi_offset 3, -8
 3230              		.cfi_offset 14, -4
 3231 0002 0B46     		mov	r3, r1
 661:../Core/Src/adxl313.c **** 	setRegisterBit(dev, ADXL313_ACT_INACT_CTL, 6, state);
 3232              		.loc 1 661 2 is_stmt 1 view .LVU649
 3233 0004 0622     		movs	r2, #6
 3234 0006 2721     		movs	r1, #39
 3235              	.LVL285:
 3236              		.loc 1 661 2 is_stmt 0 view .LVU650
 3237 0008 FFF7FEFF 		bl	setRegisterBit
 3238              	.LVL286:
 662:../Core/Src/adxl313.c **** }
 3239              		.loc 1 662 1 view .LVU651
 3240 000c 08BD     		pop	{r3, pc}
 3241              		.cfi_endproc
 3242              	.LFE211:
 3244              		.section	.text.setActivityY,"ax",%progbits
 3245              		.align	1
 3246              		.global	setActivityY
 3247              		.syntax unified
 3248              		.thumb
 3249              		.thumb_func
 3250              		.fpu fpv5-d16
 3252              	setActivityY:
 3253              	.LVL287:
 3254              	.LFB212:
 663:../Core/Src/adxl313.c **** void setActivityY( adxl313_dev *dev, bool state) {
 3255              		.loc 1 663 50 is_stmt 1 view -0
 3256              		.cfi_startproc
 3257              		@ args = 0, pretend = 0, frame = 0
 3258              		@ frame_needed = 0, uses_anonymous_args = 0
 3259              		.loc 1 663 50 is_stmt 0 view .LVU653
 3260 0000 08B5     		push	{r3, lr}
 3261              	.LCFI107:
 3262              		.cfi_def_cfa_offset 8
 3263              		.cfi_offset 3, -8
 3264              		.cfi_offset 14, -4
 3265 0002 0B46     		mov	r3, r1
ARM GAS  /tmp/cctdo2D3.s 			page 70


 664:../Core/Src/adxl313.c **** 	setRegisterBit(dev, ADXL313_ACT_INACT_CTL, 5, state);
 3266              		.loc 1 664 2 is_stmt 1 view .LVU654
 3267 0004 0522     		movs	r2, #5
 3268 0006 2721     		movs	r1, #39
 3269              	.LVL288:
 3270              		.loc 1 664 2 is_stmt 0 view .LVU655
 3271 0008 FFF7FEFF 		bl	setRegisterBit
 3272              	.LVL289:
 665:../Core/Src/adxl313.c **** }
 3273              		.loc 1 665 1 view .LVU656
 3274 000c 08BD     		pop	{r3, pc}
 3275              		.cfi_endproc
 3276              	.LFE212:
 3278              		.section	.text.setActivityZ,"ax",%progbits
 3279              		.align	1
 3280              		.global	setActivityZ
 3281              		.syntax unified
 3282              		.thumb
 3283              		.thumb_func
 3284              		.fpu fpv5-d16
 3286              	setActivityZ:
 3287              	.LVL290:
 3288              	.LFB213:
 666:../Core/Src/adxl313.c **** void setActivityZ( adxl313_dev *dev, bool state) {
 3289              		.loc 1 666 50 is_stmt 1 view -0
 3290              		.cfi_startproc
 3291              		@ args = 0, pretend = 0, frame = 0
 3292              		@ frame_needed = 0, uses_anonymous_args = 0
 3293              		.loc 1 666 50 is_stmt 0 view .LVU658
 3294 0000 08B5     		push	{r3, lr}
 3295              	.LCFI108:
 3296              		.cfi_def_cfa_offset 8
 3297              		.cfi_offset 3, -8
 3298              		.cfi_offset 14, -4
 3299 0002 0B46     		mov	r3, r1
 667:../Core/Src/adxl313.c **** 	setRegisterBit(dev, ADXL313_ACT_INACT_CTL, 4, state);
 3300              		.loc 1 667 2 is_stmt 1 view .LVU659
 3301 0004 0422     		movs	r2, #4
 3302 0006 2721     		movs	r1, #39
 3303              	.LVL291:
 3304              		.loc 1 667 2 is_stmt 0 view .LVU660
 3305 0008 FFF7FEFF 		bl	setRegisterBit
 3306              	.LVL292:
 668:../Core/Src/adxl313.c **** }
 3307              		.loc 1 668 1 view .LVU661
 3308 000c 08BD     		pop	{r3, pc}
 3309              		.cfi_endproc
 3310              	.LFE213:
 3312              		.section	.text.setActivityXYZ,"ax",%progbits
 3313              		.align	1
 3314              		.global	setActivityXYZ
 3315              		.syntax unified
 3316              		.thumb
 3317              		.thumb_func
 3318              		.fpu fpv5-d16
 3320              	setActivityXYZ:
 3321              	.LVL293:
ARM GAS  /tmp/cctdo2D3.s 			page 71


 3322              	.LFB214:
 669:../Core/Src/adxl313.c **** void setActivityXYZ( adxl313_dev *dev, bool stateX, bool stateY, bool stateZ) {
 3323              		.loc 1 669 79 is_stmt 1 view -0
 3324              		.cfi_startproc
 3325              		@ args = 0, pretend = 0, frame = 0
 3326              		@ frame_needed = 0, uses_anonymous_args = 0
 3327              		.loc 1 669 79 is_stmt 0 view .LVU663
 3328 0000 70B5     		push	{r4, r5, r6, lr}
 3329              	.LCFI109:
 3330              		.cfi_def_cfa_offset 16
 3331              		.cfi_offset 4, -16
 3332              		.cfi_offset 5, -12
 3333              		.cfi_offset 6, -8
 3334              		.cfi_offset 14, -4
 3335 0002 0446     		mov	r4, r0
 3336 0004 1646     		mov	r6, r2
 3337 0006 1D46     		mov	r5, r3
 670:../Core/Src/adxl313.c **** 	setActivityX(dev, stateX);
 3338              		.loc 1 670 2 is_stmt 1 view .LVU664
 3339 0008 FFF7FEFF 		bl	setActivityX
 3340              	.LVL294:
 671:../Core/Src/adxl313.c **** 	setActivityY(dev, stateY);
 3341              		.loc 1 671 2 view .LVU665
 3342 000c 3146     		mov	r1, r6
 3343 000e 2046     		mov	r0, r4
 3344 0010 FFF7FEFF 		bl	setActivityY
 3345              	.LVL295:
 672:../Core/Src/adxl313.c **** 	setActivityZ(dev, stateZ);
 3346              		.loc 1 672 2 view .LVU666
 3347 0014 2946     		mov	r1, r5
 3348 0016 2046     		mov	r0, r4
 3349 0018 FFF7FEFF 		bl	setActivityZ
 3350              	.LVL296:
 673:../Core/Src/adxl313.c **** }
 3351              		.loc 1 673 1 is_stmt 0 view .LVU667
 3352 001c 70BD     		pop	{r4, r5, r6, pc}
 3353              		.loc 1 673 1 view .LVU668
 3354              		.cfi_endproc
 3355              	.LFE214:
 3357              		.section	.text.setInactivityX,"ax",%progbits
 3358              		.align	1
 3359              		.global	setInactivityX
 3360              		.syntax unified
 3361              		.thumb
 3362              		.thumb_func
 3363              		.fpu fpv5-d16
 3365              	setInactivityX:
 3366              	.LVL297:
 3367              	.LFB215:
 674:../Core/Src/adxl313.c **** void setInactivityX( adxl313_dev *dev, bool state) {
 3368              		.loc 1 674 52 is_stmt 1 view -0
 3369              		.cfi_startproc
 3370              		@ args = 0, pretend = 0, frame = 0
 3371              		@ frame_needed = 0, uses_anonymous_args = 0
 3372              		.loc 1 674 52 is_stmt 0 view .LVU670
 3373 0000 08B5     		push	{r3, lr}
 3374              	.LCFI110:
ARM GAS  /tmp/cctdo2D3.s 			page 72


 3375              		.cfi_def_cfa_offset 8
 3376              		.cfi_offset 3, -8
 3377              		.cfi_offset 14, -4
 3378 0002 0B46     		mov	r3, r1
 675:../Core/Src/adxl313.c **** 	setRegisterBit(dev, ADXL313_ACT_INACT_CTL, 2, state);
 3379              		.loc 1 675 2 is_stmt 1 view .LVU671
 3380 0004 0222     		movs	r2, #2
 3381 0006 2721     		movs	r1, #39
 3382              	.LVL298:
 3383              		.loc 1 675 2 is_stmt 0 view .LVU672
 3384 0008 FFF7FEFF 		bl	setRegisterBit
 3385              	.LVL299:
 676:../Core/Src/adxl313.c **** }
 3386              		.loc 1 676 1 view .LVU673
 3387 000c 08BD     		pop	{r3, pc}
 3388              		.cfi_endproc
 3389              	.LFE215:
 3391              		.section	.text.setInactivityY,"ax",%progbits
 3392              		.align	1
 3393              		.global	setInactivityY
 3394              		.syntax unified
 3395              		.thumb
 3396              		.thumb_func
 3397              		.fpu fpv5-d16
 3399              	setInactivityY:
 3400              	.LVL300:
 3401              	.LFB216:
 677:../Core/Src/adxl313.c **** void setInactivityY( adxl313_dev *dev, bool state) {
 3402              		.loc 1 677 52 is_stmt 1 view -0
 3403              		.cfi_startproc
 3404              		@ args = 0, pretend = 0, frame = 0
 3405              		@ frame_needed = 0, uses_anonymous_args = 0
 3406              		.loc 1 677 52 is_stmt 0 view .LVU675
 3407 0000 08B5     		push	{r3, lr}
 3408              	.LCFI111:
 3409              		.cfi_def_cfa_offset 8
 3410              		.cfi_offset 3, -8
 3411              		.cfi_offset 14, -4
 3412 0002 0B46     		mov	r3, r1
 678:../Core/Src/adxl313.c **** 	setRegisterBit(dev, ADXL313_ACT_INACT_CTL, 1, state);
 3413              		.loc 1 678 2 is_stmt 1 view .LVU676
 3414 0004 0122     		movs	r2, #1
 3415 0006 2721     		movs	r1, #39
 3416              	.LVL301:
 3417              		.loc 1 678 2 is_stmt 0 view .LVU677
 3418 0008 FFF7FEFF 		bl	setRegisterBit
 3419              	.LVL302:
 679:../Core/Src/adxl313.c **** }
 3420              		.loc 1 679 1 view .LVU678
 3421 000c 08BD     		pop	{r3, pc}
 3422              		.cfi_endproc
 3423              	.LFE216:
 3425              		.section	.text.setInactivityZ,"ax",%progbits
 3426              		.align	1
 3427              		.global	setInactivityZ
 3428              		.syntax unified
 3429              		.thumb
ARM GAS  /tmp/cctdo2D3.s 			page 73


 3430              		.thumb_func
 3431              		.fpu fpv5-d16
 3433              	setInactivityZ:
 3434              	.LVL303:
 3435              	.LFB217:
 680:../Core/Src/adxl313.c **** void setInactivityZ( adxl313_dev *dev, bool state) {
 3436              		.loc 1 680 52 is_stmt 1 view -0
 3437              		.cfi_startproc
 3438              		@ args = 0, pretend = 0, frame = 0
 3439              		@ frame_needed = 0, uses_anonymous_args = 0
 3440              		.loc 1 680 52 is_stmt 0 view .LVU680
 3441 0000 08B5     		push	{r3, lr}
 3442              	.LCFI112:
 3443              		.cfi_def_cfa_offset 8
 3444              		.cfi_offset 3, -8
 3445              		.cfi_offset 14, -4
 3446 0002 0B46     		mov	r3, r1
 681:../Core/Src/adxl313.c **** 	setRegisterBit(dev, ADXL313_ACT_INACT_CTL, 0, state);
 3447              		.loc 1 681 2 is_stmt 1 view .LVU681
 3448 0004 0022     		movs	r2, #0
 3449 0006 2721     		movs	r1, #39
 3450              	.LVL304:
 3451              		.loc 1 681 2 is_stmt 0 view .LVU682
 3452 0008 FFF7FEFF 		bl	setRegisterBit
 3453              	.LVL305:
 682:../Core/Src/adxl313.c **** }
 3454              		.loc 1 682 1 view .LVU683
 3455 000c 08BD     		pop	{r3, pc}
 3456              		.cfi_endproc
 3457              	.LFE217:
 3459              		.section	.text.setInactivityXYZ,"ax",%progbits
 3460              		.align	1
 3461              		.global	setInactivityXYZ
 3462              		.syntax unified
 3463              		.thumb
 3464              		.thumb_func
 3465              		.fpu fpv5-d16
 3467              	setInactivityXYZ:
 3468              	.LVL306:
 3469              	.LFB218:
 683:../Core/Src/adxl313.c **** void setInactivityXYZ( adxl313_dev *dev, bool stateX, bool stateY, bool stateZ) {
 3470              		.loc 1 683 81 is_stmt 1 view -0
 3471              		.cfi_startproc
 3472              		@ args = 0, pretend = 0, frame = 0
 3473              		@ frame_needed = 0, uses_anonymous_args = 0
 3474              		.loc 1 683 81 is_stmt 0 view .LVU685
 3475 0000 70B5     		push	{r4, r5, r6, lr}
 3476              	.LCFI113:
 3477              		.cfi_def_cfa_offset 16
 3478              		.cfi_offset 4, -16
 3479              		.cfi_offset 5, -12
 3480              		.cfi_offset 6, -8
 3481              		.cfi_offset 14, -4
 3482 0002 0446     		mov	r4, r0
 3483 0004 1646     		mov	r6, r2
 3484 0006 1D46     		mov	r5, r3
 684:../Core/Src/adxl313.c **** 	setInactivityX(dev, stateX);
ARM GAS  /tmp/cctdo2D3.s 			page 74


 3485              		.loc 1 684 2 is_stmt 1 view .LVU686
 3486 0008 FFF7FEFF 		bl	setInactivityX
 3487              	.LVL307:
 685:../Core/Src/adxl313.c **** 	setInactivityY(dev, stateY);
 3488              		.loc 1 685 2 view .LVU687
 3489 000c 3146     		mov	r1, r6
 3490 000e 2046     		mov	r0, r4
 3491 0010 FFF7FEFF 		bl	setInactivityY
 3492              	.LVL308:
 686:../Core/Src/adxl313.c **** 	setInactivityZ(dev, stateZ);
 3493              		.loc 1 686 2 view .LVU688
 3494 0014 2946     		mov	r1, r5
 3495 0016 2046     		mov	r0, r4
 3496 0018 FFF7FEFF 		bl	setInactivityZ
 3497              	.LVL309:
 687:../Core/Src/adxl313.c **** }
 3498              		.loc 1 687 1 is_stmt 0 view .LVU689
 3499 001c 70BD     		pop	{r4, r5, r6, pc}
 3500              		.loc 1 687 1 view .LVU690
 3501              		.cfi_endproc
 3502              	.LFE218:
 3504              		.section	.text.isActivityAc,"ax",%progbits
 3505              		.align	1
 3506              		.global	isActivityAc
 3507              		.syntax unified
 3508              		.thumb
 3509              		.thumb_func
 3510              		.fpu fpv5-d16
 3512              	isActivityAc:
 3513              	.LVL310:
 3514              	.LFB219:
 688:../Core/Src/adxl313.c **** 
 689:../Core/Src/adxl313.c **** bool isActivityAc( adxl313_dev *dev) {
 3515              		.loc 1 689 38 is_stmt 1 view -0
 3516              		.cfi_startproc
 3517              		@ args = 0, pretend = 0, frame = 0
 3518              		@ frame_needed = 0, uses_anonymous_args = 0
 3519              		.loc 1 689 38 is_stmt 0 view .LVU692
 3520 0000 08B5     		push	{r3, lr}
 3521              	.LCFI114:
 3522              		.cfi_def_cfa_offset 8
 3523              		.cfi_offset 3, -8
 3524              		.cfi_offset 14, -4
 690:../Core/Src/adxl313.c **** 	return getRegisterBit(dev, ADXL313_ACT_INACT_CTL, 7);
 3525              		.loc 1 690 2 is_stmt 1 view .LVU693
 3526              		.loc 1 690 9 is_stmt 0 view .LVU694
 3527 0002 0722     		movs	r2, #7
 3528 0004 2721     		movs	r1, #39
 3529 0006 FFF7FEFF 		bl	getRegisterBit
 3530              	.LVL311:
 691:../Core/Src/adxl313.c **** }
 3531              		.loc 1 691 1 view .LVU695
 3532 000a 08BD     		pop	{r3, pc}
 3533              		.cfi_endproc
 3534              	.LFE219:
 3536              		.section	.text.isInactivityAc,"ax",%progbits
 3537              		.align	1
ARM GAS  /tmp/cctdo2D3.s 			page 75


 3538              		.global	isInactivityAc
 3539              		.syntax unified
 3540              		.thumb
 3541              		.thumb_func
 3542              		.fpu fpv5-d16
 3544              	isInactivityAc:
 3545              	.LVL312:
 3546              	.LFB220:
 692:../Core/Src/adxl313.c **** bool isInactivityAc( adxl313_dev *dev){
 3547              		.loc 1 692 39 is_stmt 1 view -0
 3548              		.cfi_startproc
 3549              		@ args = 0, pretend = 0, frame = 0
 3550              		@ frame_needed = 0, uses_anonymous_args = 0
 3551              		.loc 1 692 39 is_stmt 0 view .LVU697
 3552 0000 08B5     		push	{r3, lr}
 3553              	.LCFI115:
 3554              		.cfi_def_cfa_offset 8
 3555              		.cfi_offset 3, -8
 3556              		.cfi_offset 14, -4
 693:../Core/Src/adxl313.c **** 	return getRegisterBit(dev, ADXL313_ACT_INACT_CTL, 3);
 3557              		.loc 1 693 2 is_stmt 1 view .LVU698
 3558              		.loc 1 693 9 is_stmt 0 view .LVU699
 3559 0002 0322     		movs	r2, #3
 3560 0004 2721     		movs	r1, #39
 3561 0006 FFF7FEFF 		bl	getRegisterBit
 3562              	.LVL313:
 694:../Core/Src/adxl313.c **** }
 3563              		.loc 1 694 1 view .LVU700
 3564 000a 08BD     		pop	{r3, pc}
 3565              		.cfi_endproc
 3566              	.LFE220:
 3568              		.section	.text.setActivityAc,"ax",%progbits
 3569              		.align	1
 3570              		.global	setActivityAc
 3571              		.syntax unified
 3572              		.thumb
 3573              		.thumb_func
 3574              		.fpu fpv5-d16
 3576              	setActivityAc:
 3577              	.LVL314:
 3578              	.LFB221:
 695:../Core/Src/adxl313.c **** 
 696:../Core/Src/adxl313.c **** void setActivityAc( adxl313_dev *dev, bool state) {
 3579              		.loc 1 696 51 is_stmt 1 view -0
 3580              		.cfi_startproc
 3581              		@ args = 0, pretend = 0, frame = 0
 3582              		@ frame_needed = 0, uses_anonymous_args = 0
 3583              		.loc 1 696 51 is_stmt 0 view .LVU702
 3584 0000 08B5     		push	{r3, lr}
 3585              	.LCFI116:
 3586              		.cfi_def_cfa_offset 8
 3587              		.cfi_offset 3, -8
 3588              		.cfi_offset 14, -4
 3589 0002 0B46     		mov	r3, r1
 697:../Core/Src/adxl313.c **** 	setRegisterBit(dev, ADXL313_ACT_INACT_CTL, 7, state);
 3590              		.loc 1 697 2 is_stmt 1 view .LVU703
 3591 0004 0722     		movs	r2, #7
ARM GAS  /tmp/cctdo2D3.s 			page 76


 3592 0006 2721     		movs	r1, #39
 3593              	.LVL315:
 3594              		.loc 1 697 2 is_stmt 0 view .LVU704
 3595 0008 FFF7FEFF 		bl	setRegisterBit
 3596              	.LVL316:
 698:../Core/Src/adxl313.c **** }
 3597              		.loc 1 698 1 view .LVU705
 3598 000c 08BD     		pop	{r3, pc}
 3599              		.cfi_endproc
 3600              	.LFE221:
 3602              		.section	.text.setInactivityAc,"ax",%progbits
 3603              		.align	1
 3604              		.global	setInactivityAc
 3605              		.syntax unified
 3606              		.thumb
 3607              		.thumb_func
 3608              		.fpu fpv5-d16
 3610              	setInactivityAc:
 3611              	.LVL317:
 3612              	.LFB222:
 699:../Core/Src/adxl313.c **** void setInactivityAc( adxl313_dev *dev, bool state) {
 3613              		.loc 1 699 53 is_stmt 1 view -0
 3614              		.cfi_startproc
 3615              		@ args = 0, pretend = 0, frame = 0
 3616              		@ frame_needed = 0, uses_anonymous_args = 0
 3617              		.loc 1 699 53 is_stmt 0 view .LVU707
 3618 0000 08B5     		push	{r3, lr}
 3619              	.LCFI117:
 3620              		.cfi_def_cfa_offset 8
 3621              		.cfi_offset 3, -8
 3622              		.cfi_offset 14, -4
 3623 0002 0B46     		mov	r3, r1
 700:../Core/Src/adxl313.c **** 	setRegisterBit(dev, ADXL313_ACT_INACT_CTL, 3, state);
 3624              		.loc 1 700 2 is_stmt 1 view .LVU708
 3625 0004 0322     		movs	r2, #3
 3626 0006 2721     		movs	r1, #39
 3627              	.LVL318:
 3628              		.loc 1 700 2 is_stmt 0 view .LVU709
 3629 0008 FFF7FEFF 		bl	setRegisterBit
 3630              	.LVL319:
 701:../Core/Src/adxl313.c **** }
 3631              		.loc 1 701 1 view .LVU710
 3632 000c 08BD     		pop	{r3, pc}
 3633              		.cfi_endproc
 3634              	.LFE222:
 3636              		.global	gains
 3637              		.section	.rodata
 3638              		.align	2
 3639              		.set	.LANCHOR1,. + 0
 3640              	.LC0:
 3641 0000 00000000 		.word	hspi1
 3642 0004 00100240 		.word	1073876992
 3643 0008 0400     		.short	4
 3644 000a 0000     		.space	2
 3645              		.section	.data.gains,"aw"
 3646              		.align	3
 3647              		.set	.LANCHOR0,. + 0
ARM GAS  /tmp/cctdo2D3.s 			page 77


 3650              	gains:
 3651 0000 9F27F96C 		.word	1828267935
 3652 0004 78D56E3F 		.word	1064228216
 3653 0008 0E7F8FF2 		.word	-225476850
 3654 000c 7ACD6E3F 		.word	1064226170
 3655 0010 200FD830 		.word	819466016
 3656 0014 9E9C6C3F 		.word	1064082590
 3657              		.text
 3658              	.Letext0:
 3659              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 3660              		.file 3 "../Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f767xx.h"
 3661              		.file 4 "../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 3662              		.file 5 "../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 3663              		.file 6 "../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_spi.h"
 3664              		.file 7 "../Core/Inc/spi.h"
 3665              		.file 8 "../Core/Inc/adxl313.h"
 3666              		.file 9 "../Core/Inc/usart.h"
 3667              		.file 10 "/usr/include/newlib/math.h"
ARM GAS  /tmp/cctdo2D3.s 			page 78


DEFINED SYMBOLS
                            *ABS*:0000000000000000 adxl313.c
     /tmp/cctdo2D3.s:17     .text.checkPartId:0000000000000000 $t
     /tmp/cctdo2D3.s:25     .text.checkPartId:0000000000000000 checkPartId
     /tmp/cctdo2D3.s:74     .text.updateIntSourceStatuses:0000000000000000 $t
     /tmp/cctdo2D3.s:81     .text.updateIntSourceStatuses:0000000000000000 updateIntSourceStatuses
     /tmp/cctdo2D3.s:145    .text.softReset:0000000000000000 $t
     /tmp/cctdo2D3.s:152    .text.softReset:0000000000000000 softReset
     /tmp/cctdo2D3.s:182    .text.readAccel:0000000000000000 $t
     /tmp/cctdo2D3.s:189    .text.readAccel:0000000000000000 readAccel
     /tmp/cctdo2D3.s:278    .text.getRange:0000000000000000 $t
     /tmp/cctdo2D3.s:285    .text.getRange:0000000000000000 getRange
     /tmp/cctdo2D3.s:336    .text.getRange:0000000000000026 $d
     /tmp/cctdo2D3.s:340    .text.getRange:000000000000002a $t
     /tmp/cctdo2D3.s:386    .text.getRange:000000000000004c $d
     /tmp/cctdo2D3.s:391    .text.setRange:0000000000000000 $t
     /tmp/cctdo2D3.s:398    .text.setRange:0000000000000000 setRange
     /tmp/cctdo2D3.s:477    .text.setRegisterBit:0000000000000000 $t
     /tmp/cctdo2D3.s:484    .text.setRegisterBit:0000000000000000 setRegisterBit
     /tmp/cctdo2D3.s:566    .text.standby:0000000000000000 $t
     /tmp/cctdo2D3.s:573    .text.standby:0000000000000000 standby
     /tmp/cctdo2D3.s:600    .text.measureModeOn:0000000000000000 $t
     /tmp/cctdo2D3.s:607    .text.measureModeOn:0000000000000000 measureModeOn
     /tmp/cctdo2D3.s:634    .text.getRegisterBit:0000000000000000 $t
     /tmp/cctdo2D3.s:641    .text.getRegisterBit:0000000000000000 getRegisterBit
     /tmp/cctdo2D3.s:694    .text.dataReady:0000000000000000 $t
     /tmp/cctdo2D3.s:701    .text.dataReady:0000000000000000 dataReady
     /tmp/cctdo2D3.s:726    .text.autosleepOn:0000000000000000 $t
     /tmp/cctdo2D3.s:733    .text.autosleepOn:0000000000000000 autosleepOn
     /tmp/cctdo2D3.s:767    .text.autosleepOff:0000000000000000 $t
     /tmp/cctdo2D3.s:774    .text.autosleepOff:0000000000000000 autosleepOff
     /tmp/cctdo2D3.s:799    .text.getSelfTestBit:0000000000000000 $t
     /tmp/cctdo2D3.s:806    .text.getSelfTestBit:0000000000000000 getSelfTestBit
     /tmp/cctdo2D3.s:831    .text.setSelfTestBit:0000000000000000 $t
     /tmp/cctdo2D3.s:838    .text.setSelfTestBit:0000000000000000 setSelfTestBit
     /tmp/cctdo2D3.s:865    .text.getSpiBit:0000000000000000 $t
     /tmp/cctdo2D3.s:872    .text.getSpiBit:0000000000000000 getSpiBit
     /tmp/cctdo2D3.s:897    .text.setSpiBit:0000000000000000 $t
     /tmp/cctdo2D3.s:904    .text.setSpiBit:0000000000000000 setSpiBit
     /tmp/cctdo2D3.s:931    .text.getInterruptLevelBit:0000000000000000 $t
     /tmp/cctdo2D3.s:938    .text.getInterruptLevelBit:0000000000000000 getInterruptLevelBit
     /tmp/cctdo2D3.s:963    .text.setInterruptLevelBit:0000000000000000 $t
     /tmp/cctdo2D3.s:970    .text.setInterruptLevelBit:0000000000000000 setInterruptLevelBit
     /tmp/cctdo2D3.s:997    .text.getFullResBit:0000000000000000 $t
     /tmp/cctdo2D3.s:1004   .text.getFullResBit:0000000000000000 getFullResBit
     /tmp/cctdo2D3.s:1029   .text.setFullResBit:0000000000000000 $t
     /tmp/cctdo2D3.s:1036   .text.setFullResBit:0000000000000000 setFullResBit
     /tmp/cctdo2D3.s:1063   .text.getJustifyBit:0000000000000000 $t
     /tmp/cctdo2D3.s:1070   .text.getJustifyBit:0000000000000000 getJustifyBit
     /tmp/cctdo2D3.s:1095   .text.setJustifyBit:0000000000000000 $t
     /tmp/cctdo2D3.s:1102   .text.setJustifyBit:0000000000000000 setJustifyBit
     /tmp/cctdo2D3.s:1129   .text.setAxisGains:0000000000000000 $t
     /tmp/cctdo2D3.s:1136   .text.setAxisGains:0000000000000000 setAxisGains
     /tmp/cctdo2D3.s:1174   .text.setAxisGains:0000000000000020 $d
     /tmp/cctdo2D3.s:1179   .text.getAxisGains:0000000000000000 $t
     /tmp/cctdo2D3.s:1186   .text.getAxisGains:0000000000000000 getAxisGains
     /tmp/cctdo2D3.s:1225   .text.getAxisGains:0000000000000020 $d
ARM GAS  /tmp/cctdo2D3.s 			page 79


     /tmp/cctdo2D3.s:1230   .text.setAxisOffset:0000000000000000 $t
     /tmp/cctdo2D3.s:1237   .text.setAxisOffset:0000000000000000 setAxisOffset
     /tmp/cctdo2D3.s:1291   .text.getAxisOffset:0000000000000000 $t
     /tmp/cctdo2D3.s:1298   .text.getAxisOffset:0000000000000000 getAxisOffset
     /tmp/cctdo2D3.s:1374   .text.setActivityThreshold:0000000000000000 $t
     /tmp/cctdo2D3.s:1381   .text.setActivityThreshold:0000000000000000 setActivityThreshold
     /tmp/cctdo2D3.s:1441   .text.getActivityThreshold:0000000000000000 $t
     /tmp/cctdo2D3.s:1448   .text.getActivityThreshold:0000000000000000 getActivityThreshold
     /tmp/cctdo2D3.s:1485   .text.setInactivityThreshold:0000000000000000 $t
     /tmp/cctdo2D3.s:1492   .text.setInactivityThreshold:0000000000000000 setInactivityThreshold
     /tmp/cctdo2D3.s:1552   .text.getInactivityThreshold:0000000000000000 $t
     /tmp/cctdo2D3.s:1559   .text.getInactivityThreshold:0000000000000000 getInactivityThreshold
     /tmp/cctdo2D3.s:1596   .text.setTimeInactivity:0000000000000000 $t
     /tmp/cctdo2D3.s:1603   .text.setTimeInactivity:0000000000000000 setTimeInactivity
     /tmp/cctdo2D3.s:1663   .text.getTimeInactivity:0000000000000000 $t
     /tmp/cctdo2D3.s:1670   .text.getTimeInactivity:0000000000000000 getTimeInactivity
     /tmp/cctdo2D3.s:1707   .text.isLowPower:0000000000000000 $t
     /tmp/cctdo2D3.s:1714   .text.isLowPower:0000000000000000 isLowPower
     /tmp/cctdo2D3.s:1739   .text.lowPowerOn:0000000000000000 $t
     /tmp/cctdo2D3.s:1746   .text.lowPowerOn:0000000000000000 lowPowerOn
     /tmp/cctdo2D3.s:1771   .text.lowPowerOff:0000000000000000 $t
     /tmp/cctdo2D3.s:1778   .text.lowPowerOff:0000000000000000 lowPowerOff
     /tmp/cctdo2D3.s:1803   .text.getRate:0000000000000000 $t
     /tmp/cctdo2D3.s:1810   .text.getRate:0000000000000000 getRate
     /tmp/cctdo2D3.s:1861   .rodata.setRate.str1.4:0000000000000000 $d
     /tmp/cctdo2D3.s:1865   .text.setRate:0000000000000000 $t
     /tmp/cctdo2D3.s:1872   .text.setRate:0000000000000000 setRate
     /tmp/cctdo2D3.s:1975   .text.setRate:000000000000005c $d
     /tmp/cctdo2D3.s:1980   .text.setBandwidth:0000000000000000 $t
     /tmp/cctdo2D3.s:1987   .text.setBandwidth:0000000000000000 setBandwidth
     /tmp/cctdo2D3.s:2017   .text.getBandwidth:0000000000000000 $t
     /tmp/cctdo2D3.s:2024   .text.getBandwidth:0000000000000000 getBandwidth
     /tmp/cctdo2D3.s:2061   .text.triggered:0000000000000000 $t
     /tmp/cctdo2D3.s:2068   .text.triggered:0000000000000000 triggered
     /tmp/cctdo2D3.s:2087   .text.getInt_Source:0000000000000000 $t
     /tmp/cctdo2D3.s:2094   .text.getInt_Source:0000000000000000 getInt_Source
     /tmp/cctdo2D3.s:2131   .text.getInterruptSource:0000000000000000 $t
     /tmp/cctdo2D3.s:2138   .text.getInterruptSource:0000000000000000 getInterruptSource
     /tmp/cctdo2D3.s:2165   .text.getInterruptMapping:0000000000000000 $t
     /tmp/cctdo2D3.s:2172   .text.getInterruptMapping:0000000000000000 getInterruptMapping
     /tmp/cctdo2D3.s:2199   .text.setInterruptMapping:0000000000000000 $t
     /tmp/cctdo2D3.s:2206   .text.setInterruptMapping:0000000000000000 setInterruptMapping
     /tmp/cctdo2D3.s:2235   .text.isInterruptEnabled:0000000000000000 $t
     /tmp/cctdo2D3.s:2242   .text.isInterruptEnabled:0000000000000000 isInterruptEnabled
     /tmp/cctdo2D3.s:2269   .text.setInterrupt:0000000000000000 $t
     /tmp/cctdo2D3.s:2276   .text.setInterrupt:0000000000000000 setInterrupt
     /tmp/cctdo2D3.s:2305   .rodata.begin.str1.4:0000000000000000 $d
     /tmp/cctdo2D3.s:2314   .text.begin:0000000000000000 $t
     /tmp/cctdo2D3.s:2321   .text.begin:0000000000000000 begin
     /tmp/cctdo2D3.s:2437   .text.begin:0000000000000068 $d
     /tmp/cctdo2D3.s:2444   .text.ActivityINT:0000000000000000 $t
     /tmp/cctdo2D3.s:2451   .text.ActivityINT:0000000000000000 ActivityINT
     /tmp/cctdo2D3.s:2492   .text.InactivityINT:0000000000000000 $t
     /tmp/cctdo2D3.s:2499   .text.InactivityINT:0000000000000000 InactivityINT
     /tmp/cctdo2D3.s:2540   .text.DataReadyINT:0000000000000000 $t
     /tmp/cctdo2D3.s:2547   .text.DataReadyINT:0000000000000000 DataReadyINT
     /tmp/cctdo2D3.s:2588   .text.WatermarkINT:0000000000000000 $t
ARM GAS  /tmp/cctdo2D3.s 			page 80


     /tmp/cctdo2D3.s:2595   .text.WatermarkINT:0000000000000000 WatermarkINT
     /tmp/cctdo2D3.s:2636   .text.OverrunINT:0000000000000000 $t
     /tmp/cctdo2D3.s:2643   .text.OverrunINT:0000000000000000 OverrunINT
     /tmp/cctdo2D3.s:2684   .text.getFifoMode:0000000000000000 $t
     /tmp/cctdo2D3.s:2691   .text.getFifoMode:0000000000000000 getFifoMode
     /tmp/cctdo2D3.s:2736   .text.setFifoMode:0000000000000000 $t
     /tmp/cctdo2D3.s:2743   .text.setFifoMode:0000000000000000 setFifoMode
     /tmp/cctdo2D3.s:2803   .text.getFifoSamplesThreshhold:0000000000000000 $t
     /tmp/cctdo2D3.s:2810   .text.getFifoSamplesThreshhold:0000000000000000 getFifoSamplesThreshhold
     /tmp/cctdo2D3.s:2854   .text.setFifoSamplesThreshhold:0000000000000000 $t
     /tmp/cctdo2D3.s:2861   .text.setFifoSamplesThreshhold:0000000000000000 setFifoSamplesThreshhold
     /tmp/cctdo2D3.s:2921   .text.getFifoEntriesAmount:0000000000000000 $t
     /tmp/cctdo2D3.s:2928   .text.getFifoEntriesAmount:0000000000000000 getFifoEntriesAmount
     /tmp/cctdo2D3.s:2972   .text.clearFifo:0000000000000000 $t
     /tmp/cctdo2D3.s:2979   .text.clearFifo:0000000000000000 clearFifo
     /tmp/cctdo2D3.s:3019   .text.isActivityXEnabled:0000000000000000 $t
     /tmp/cctdo2D3.s:3026   .text.isActivityXEnabled:0000000000000000 isActivityXEnabled
     /tmp/cctdo2D3.s:3051   .text.isActivityYEnabled:0000000000000000 $t
     /tmp/cctdo2D3.s:3058   .text.isActivityYEnabled:0000000000000000 isActivityYEnabled
     /tmp/cctdo2D3.s:3083   .text.isActivityZEnabled:0000000000000000 $t
     /tmp/cctdo2D3.s:3090   .text.isActivityZEnabled:0000000000000000 isActivityZEnabled
     /tmp/cctdo2D3.s:3115   .text.isInactivityXEnabled:0000000000000000 $t
     /tmp/cctdo2D3.s:3122   .text.isInactivityXEnabled:0000000000000000 isInactivityXEnabled
     /tmp/cctdo2D3.s:3147   .text.isInactivityYEnabled:0000000000000000 $t
     /tmp/cctdo2D3.s:3154   .text.isInactivityYEnabled:0000000000000000 isInactivityYEnabled
     /tmp/cctdo2D3.s:3179   .text.isInactivityZEnabled:0000000000000000 $t
     /tmp/cctdo2D3.s:3186   .text.isInactivityZEnabled:0000000000000000 isInactivityZEnabled
     /tmp/cctdo2D3.s:3211   .text.setActivityX:0000000000000000 $t
     /tmp/cctdo2D3.s:3218   .text.setActivityX:0000000000000000 setActivityX
     /tmp/cctdo2D3.s:3245   .text.setActivityY:0000000000000000 $t
     /tmp/cctdo2D3.s:3252   .text.setActivityY:0000000000000000 setActivityY
     /tmp/cctdo2D3.s:3279   .text.setActivityZ:0000000000000000 $t
     /tmp/cctdo2D3.s:3286   .text.setActivityZ:0000000000000000 setActivityZ
     /tmp/cctdo2D3.s:3313   .text.setActivityXYZ:0000000000000000 $t
     /tmp/cctdo2D3.s:3320   .text.setActivityXYZ:0000000000000000 setActivityXYZ
     /tmp/cctdo2D3.s:3358   .text.setInactivityX:0000000000000000 $t
     /tmp/cctdo2D3.s:3365   .text.setInactivityX:0000000000000000 setInactivityX
     /tmp/cctdo2D3.s:3392   .text.setInactivityY:0000000000000000 $t
     /tmp/cctdo2D3.s:3399   .text.setInactivityY:0000000000000000 setInactivityY
     /tmp/cctdo2D3.s:3426   .text.setInactivityZ:0000000000000000 $t
     /tmp/cctdo2D3.s:3433   .text.setInactivityZ:0000000000000000 setInactivityZ
     /tmp/cctdo2D3.s:3460   .text.setInactivityXYZ:0000000000000000 $t
     /tmp/cctdo2D3.s:3467   .text.setInactivityXYZ:0000000000000000 setInactivityXYZ
     /tmp/cctdo2D3.s:3505   .text.isActivityAc:0000000000000000 $t
     /tmp/cctdo2D3.s:3512   .text.isActivityAc:0000000000000000 isActivityAc
     /tmp/cctdo2D3.s:3537   .text.isInactivityAc:0000000000000000 $t
     /tmp/cctdo2D3.s:3544   .text.isInactivityAc:0000000000000000 isInactivityAc
     /tmp/cctdo2D3.s:3569   .text.setActivityAc:0000000000000000 $t
     /tmp/cctdo2D3.s:3576   .text.setActivityAc:0000000000000000 setActivityAc
     /tmp/cctdo2D3.s:3603   .text.setInactivityAc:0000000000000000 $t
     /tmp/cctdo2D3.s:3610   .text.setInactivityAc:0000000000000000 setInactivityAc
     /tmp/cctdo2D3.s:3650   .data.gains:0000000000000000 gains
     /tmp/cctdo2D3.s:3638   .rodata:0000000000000000 $d
     /tmp/cctdo2D3.s:3646   .data.gains:0000000000000000 $d

UNDEFINED SYMBOLS
spi_read
ARM GAS  /tmp/cctdo2D3.s 			page 81


spi_write
pow
UART_puts
hspi1
