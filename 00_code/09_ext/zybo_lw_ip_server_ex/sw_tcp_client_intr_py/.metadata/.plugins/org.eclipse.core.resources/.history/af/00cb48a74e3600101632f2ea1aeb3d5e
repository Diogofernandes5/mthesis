/*
 * Copyright (C) 2009 - 2019 Xilinx, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 *
 */

#include <stdio.h>

#include "xparameters.h"

#include "netif/xadapter.h"

#include "platform.h"
#include "platform_config.h"

//#include "xintc.h"
#include "xscugic.h"
#include "xil_exception.h"

#if defined (__arm__) || defined(__aarch64__)
#include "xil_printf.h"
#endif

#include "lwip/tcp.h"
#include "xil_cache.h"

#if LWIP_IPV6==1
#include "lwip/ip.h"
#else
#if LWIP_DHCP==1
#include "lwip/dhcp.h"
#endif
#endif

#include "xgpio.h"


/**************** Defines ******************/
// DDR Base address
#define DDR_BASE_ADDR XPAR_PS7_DDR_0_S_AXI_BASEADDR

// Memory base address - sum to DDR_BASE_ADDR protects DDR
#define MEM_ADDR 0x00400000

#define INTC_DEVICE_ID  XPAR_PS7_SCUGIC_0_DEVICE_ID
#define TX_DONE_INTR  	XPAR_FABRIC_AXI_MASTER_FULL_0_TX_DONE_INTR_INTR

/*------GPIO------*/
#define GPIO_DEVICE_ID      XPAR_AXI_GPIO_0_DEVICE_ID


/**************** Func Prototypes ******************/
/* defined by each RAW mode application */
void print_app_header();
int start_application();
int transfer_data();
void tcp_fasttmr(void);
void tcp_slowtmr(void);

// INTERRUPT
//void TxDone_Handler(void *CallbackRef);
int SetupInterruptSystem(XScuGic *IntcInstancePtr);

void fill_ddr(void);

/* missing declaration in lwIP */
void lwip_init();

#if LWIP_IPV6==0
	#if LWIP_DHCP==1
		extern volatile int dhcp_timoutcntr;
		err_t dhcp_start(struct netif *netif);
	#endif
#endif


/**************** Variables ******************/
// ETHERNET VARIABLES
extern volatile int TcpFastTmrFlag;
extern volatile int TcpSlowTmrFlag;
static struct netif server_netif;
struct netif *echo_netif;

// INTERRUPT VARIABLES
//static XScuGic InterruptController;

extern int connection;

static XGpio GPIOInst;

extern XScuGic Gic;
extern XScuGic_Config *GicConfig;

#if LWIP_IPV6==1
void print_ip6(char *msg, ip_addr_t *ip)
{
	print(msg);
	xil_printf(" %x:%x:%x:%x:%x:%x:%x:%x\n\r",
			IP6_ADDR_BLOCK1(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK2(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK3(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK4(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK5(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK6(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK7(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK8(&ip->u_addr.ip6));

}
#else
void print_ip(char *msg, ip_addr_t *ip)
{
	print(msg);
	xil_printf("%d.%d.%d.%d\n\r", ip4_addr1(ip), ip4_addr2(ip),
			ip4_addr3(ip), ip4_addr4(ip));
}

void print_ip_settings(ip_addr_t *ip, ip_addr_t *mask, ip_addr_t *gw)
{

	print_ip("Board IP: ", ip);
	print_ip("Netmask : ", mask);
	print_ip("Gateway : ", gw);
}
#endif

#if defined (__arm__) && !defined (ARMR5)
#if XPAR_GIGE_PCS_PMA_SGMII_CORE_PRESENT == 1 || XPAR_GIGE_PCS_PMA_1000BASEX_CORE_PRESENT == 1
int ProgramSi5324(void);
int ProgramSfpPhy(void);
#endif
#endif

#ifdef XPS_BOARD_ZCU102
#ifdef XPAR_XIICPS_0_DEVICE_ID
int IicPhyReset(void);
#endif
#endif

//void TxDone_Handler(void *CallbackRef)
void TxDone_Handler(XScuGic_Config *IntcConfig)
{
    xil_printf("TX Done interrupt occurred!\r\n");
}

int main()
{
#if LWIP_IPV6==0
	ip_addr_t ipaddr, netmask, gw;

#endif
	/* the mac address of the board. this should be unique per board */
	unsigned char mac_ethernet_address[] =
	{ 0x00, 0x0a, 0x35, 0x00, 0x01, 0x02 };

	echo_netif = &server_netif;
#if defined (__arm__) && !defined (ARMR5)
#if XPAR_GIGE_PCS_PMA_SGMII_CORE_PRESENT == 1 || XPAR_GIGE_PCS_PMA_1000BASEX_CORE_PRESENT == 1
	ProgramSi5324();
	ProgramSfpPhy();
#endif
#endif

/* Define this board specific macro in order perform PHY reset on ZCU102 */
#ifdef XPS_BOARD_ZCU102
	if(IicPhyReset()) {
		xil_printf("Error performing PHY reset \n\r");
		return -1;
	}
#endif

	init_platform();

//	XGpio_Initialize(&GPIOInst, GPIO_DEVICE_ID);
//	XGpio_SetDataDirection(&GPIOInst, 1, 0xFF); // Set all bits as input

			XScuGic_Connect(&Gic, TX_DONE_INTR,
					(Xil_ExceptionHandler)TxDone_Handler, (void *)NULL);

			// Enable the interrupt for the Timer counter
			XScuGic_Enable(&Gic, TX_DONE_INTR);

#if LWIP_IPV6==0
#if LWIP_DHCP==1
    ipaddr.addr = 0;
	gw.addr = 0;
	netmask.addr = 0;
#else
	/* initialize IP addresses to be used */
	IP4_ADDR(&ipaddr,  192, 168,   1, 10);
	IP4_ADDR(&netmask, 255, 255, 255,  0);
	IP4_ADDR(&gw,      192, 168,   1,  1);
#endif
#endif
	print_app_header();	// print app header

	fill_ddr(); // fill the ddr to test the functionality

	lwip_init(); // init the lwip


#if (LWIP_IPV6 == 0)
	/* Add network interface to the netif_list, and set it as default */
	if (!xemac_add(echo_netif, &ipaddr, &netmask,
						&gw, mac_ethernet_address,
						PLATFORM_EMAC_BASEADDR)) {
		xil_printf("Error adding N/W interface\n\r");
		return -1;
	}
#else
	/* Add network interface to the netif_list, and set it as default */
	if (!xemac_add(echo_netif, NULL, NULL, NULL, mac_ethernet_address,
						PLATFORM_EMAC_BASEADDR)) {
		xil_printf("Error adding N/W interface\n\r");
		return -1;
	}
	echo_netif->ip6_autoconfig_enabled = 1;

	netif_create_ip6_linklocal_address(echo_netif, 1);
	netif_ip6_addr_set_state(echo_netif, 0, IP6_ADDR_VALID);

	print_ip6("\n\rBoard IPv6 address ", &echo_netif->ip6_addr[0].u_addr.ip6);

#endif
	netif_set_default(echo_netif);

	/* now enable interrupts */
	platform_enable_interrupts();

	/* specify that the network if is up */
	netif_set_up(echo_netif);

#if (LWIP_IPV6 == 0)
#if (LWIP_DHCP==1)
	/* Create a new DHCP client for this interface.
	 * Note: you must call dhcp_fine_tmr() and dhcp_coarse_tmr() at
	 * the predefined regular intervals after starting the client.
	 */
	dhcp_start(echo_netif);
	dhcp_timoutcntr = 24;

	while(((echo_netif->ip_addr.addr) == 0) && (dhcp_timoutcntr > 0))
		xemacif_input(echo_netif);

	if (dhcp_timoutcntr <= 0) {
		if ((echo_netif->ip_addr.addr) == 0) {
			xil_printf("DHCP Timeout\r\n");
			xil_printf("Configuring default IP of 192.168.1.10\r\n");
			IP4_ADDR(&(echo_netif->ip_addr),  192, 168,   1, 10);
			IP4_ADDR(&(echo_netif->netmask), 255, 255, 255,  0);
			IP4_ADDR(&(echo_netif->gw),      192, 168,   1,  1);
		}
	}

	ipaddr.addr = echo_netif->ip_addr.addr;
	gw.addr = echo_netif->gw.addr;
	netmask.addr = echo_netif->netmask.addr;
#endif

	print_ip_settings(&ipaddr, &netmask, &gw);

#endif

	for(int i = 0; i < 1000000; i++); // Short delay

//	xil_printf("Enabling the interrupt...\r\n");
//	// Initialize the interrupt controler for the tx_done int
//	int Status = SetupInterruptSystem(&InterruptController);
//	if (Status != XST_SUCCESS) {
//		xil_printf("Interrupt setup failed!\r\n");
//		return XST_FAILURE;
//	}
//	xil_printf("Interrupt enabled!\r\n");

	int err = 1;
	while (err != 0)
		/* start the application (web server, rxtest, txtest, etc..) */
		err = start_application();

	/* receive and process packets */
	while (1) {
			XScuGic_Config *IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);

//		if(!connection){
			if (TcpFastTmrFlag) {
				tcp_fasttmr();
				TcpFastTmrFlag = 0;
			}
			if (TcpSlowTmrFlag) {
				tcp_slowtmr();
				TcpSlowTmrFlag = 0;
			}
			xemacif_input(echo_netif);
			transfer_data();
//		}
	}

	/* never reached */
	cleanup_platform();

	return 0;
}

//int SetupInterruptSystem(XScuGic *IntcInstancePtr)
//{
//	int Status;
//
//	XScuGic_Config *IntcConfig;
//
//	/*
//	 * Initialize the interrupt controller driver so that it is ready to
//	 * use.
//	 */
//	IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
//	if (NULL == IntcConfig) {
//		return XST_FAILURE;
//	}
//
//	Status = XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig,
//					IntcConfig->CpuBaseAddress);
//	if (Status != XST_SUCCESS) {
//		return XST_FAILURE;
//	}
//
//	XScuGic_SetPriorityTriggerType(IntcInstancePtr, TX_DONE_INTR, 0xA0, 0x3);
//
//	/*
//	 * Connect the device driver handler that will be called when an
//	 * interrupt for the device occurs, the handler defined above performs
//	 * the specific interrupt processing for the device.
//	 */
//	Status = XScuGic_Connect(IntcInstancePtr, TX_DONE_INTR,
//					(Xil_InterruptHandler)TxDone_Handler,
//					NULL);
//	if (Status != XST_SUCCESS) {
//		return Status;
//	}
//
//	XScuGic_Enable(IntcInstancePtr, TX_DONE_INTR);
//
//	/* Enable interrupts from the hardware */
//
//	Xil_ExceptionInit();
//	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
//			 (Xil_ExceptionHandler)XScuGic_InterruptHandler,
//			 (void *)IntcInstancePtr);
//
//	Xil_ExceptionEnable();
//
//	return XST_SUCCESS;
//}

void fill_ddr(void)
{
	u32 buffer[1024]; // Example data buffer
	for (int i = 0; i < 1024; i++) {
		buffer[i] = i; // Fill with test pattern
	}

    // Disable cache for direct access
//    Xil_DCacheDisable();

	// Copy to DDR
    u32 *ddr = (u32*)DDR_BASE_ADDR + MEM_ADDR;
	memcpy(ddr, buffer, sizeof(buffer));

	int err = 0;
	// Verify
	for (int i = 0; i < 1024; i++) {
		if (ddr[i] != buffer[i]) {
			err = 1;
			xil_printf("Error at offset %d!\n", i);
		}
	}
	if(err)
		xil_printf("DDR writing didn't worked\n\r");
	else
		xil_printf("DDR writing worked fine\n\r");

//	Xil_DCacheEnable();
}
