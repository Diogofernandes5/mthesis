/**
 * @application freeRTOS TCP Client
 *
 * This APP implements a client that connects to a server in the host machine,
 * echoing every data that is sent by the server. Furthermore, it accounts for
 * 2 interrupts: the first is from the AXI GPIO IP that is connected to the buttons;
 * the latter is from the AXI Master IP that turns interrupt on after writing to the
 * DDR after the last switch on the board is turned on.
 * In order to the client to connect, you have to execute the server on the host machine,
 * using the tcpserver.c on 09_ext/zybo_lw_ip_server_ex/host directory
 *
 * */

#include <stdio.h>
#include "netif/xadapter.h"
#include "platform_config.h"


/* FreeRTOS includes. */
#include "FreeRTOS.h"
#include "task.h"
//#include "timers.h"
#include "semphr.h"
#include "portmacro.h"

/* Xilinx includes. */
#include "xil_printf.h"
#include "xparameters.h"
//#include "xttcps.h"
#include "xscugic.h"

#include "lwip/dhcp.h"

//#include "timer.h"

/**************** DEFINES ******************/
#define THREAD_STACKSIZE 1024

#define DHCP_COARSE_TIMER_SECS_NEW 5

/**************** PROTOTYPES ******************/
int main_thread();

void connect_thread();

void lwip_init();

extern volatile int dhcp_timoutcntr;
err_t dhcp_start(struct netif *netif);

extern int SetupInterruptSystem(XScuGic *IntcInstancePtr);

/**************** VARIABLES ******************/

static struct netif server_netif;
struct netif *echo_netif;

void print_ip(char *msg, ip_addr_t *ip)
{
	xil_printf(msg);
	xil_printf("%d.%d.%d.%d\n\r", ip4_addr1(ip), ip4_addr2(ip),
			ip4_addr3(ip), ip4_addr4(ip));
}

void print_ip_settings(ip_addr_t *ip, ip_addr_t *mask, ip_addr_t *gw)
{

	print_ip("Board IP: ", ip);
	print_ip("Netmask : ", mask);
	print_ip("Gateway : ", gw);
}

int main()
{
    xil_printf("\r\n\r\n");
    xil_printf("-----lwIP Socket Mode Client Send Data Application ------\r\n");

//    setupTimer((void*) NULL);

	sys_thread_new("main_thrd", (void(*)(void*))main_thread, 0,
	                THREAD_STACKSIZE,
	                DEFAULT_THREAD_PRIO);

	vTaskStartScheduler();
	while(1);
	return 0;
}

void network_thread(void *p)
{
    struct netif *netif;
    /* the mac address of the board. this should be unique per board */
    unsigned char mac_ethernet_address[] = { 0x00, 0x0a, 0x35, 0x00, 0x01, 0x02 };
    ip_addr_t ipaddr, netmask, gw;
    int mscnt = 0;

    netif = &server_netif;

	ipaddr.addr = 0;
	gw.addr = 0;
	netmask.addr = 0;

    /* Add network interface to the netif_list, and set it as default */
    if (!xemac_add(netif, &ipaddr, &netmask, &gw, mac_ethernet_address, PLATFORM_EMAC_BASEADDR)) {
		xil_printf("Error adding N/W interface\r\n");
		return;
    }

    netif_set_default(netif);

    /* specify that the network if is up */
    netif_set_up(netif);

    /* start packet receive thread - required for lwIP operation */
    sys_thread_new("xemacif_input_thread", (void(*)(void*))xemacif_input_thread, netif,
            THREAD_STACKSIZE,
            DEFAULT_THREAD_PRIO);

    dhcp_start(netif);

    while (1) {
		vTaskDelay(DHCP_FINE_TIMER_MSECS / portTICK_RATE_MS);
		dhcp_fine_tmr();
		mscnt += DHCP_FINE_TIMER_MSECS;
		if (mscnt >= DHCP_COARSE_TIMER_SECS_NEW*1000) {
			dhcp_coarse_tmr();
			mscnt = 0;
		}
	}

    return;
}

int main_thread()
{
#if LWIP_DHCP==1
	int mscnt = 0;
#endif

	/* initialize lwIP before calling sys_thread_new */
    lwip_init();

    /* any thread using lwIP should be created using sys_thread_new */
    sys_thread_new("NW_THRD", network_thread, NULL,
		THREAD_STACKSIZE,
            DEFAULT_THREAD_PRIO);

#if LWIP_IPV6==0
#if LWIP_DHCP==1
    while (1) {
    	vTaskDelay(DHCP_FINE_TIMER_MSECS / portTICK_RATE_MS);
		if (server_netif.ip_addr.addr) {
			xil_printf("DHCP request success\r\n");
			print_ip_settings(&(server_netif.ip_addr), &(server_netif.netmask), &(server_netif.gw));
			xil_printf("\r\n");

			sys_thread_new("conn", connect_thread, 0,
					THREAD_STACKSIZE,
					DEFAULT_THREAD_PRIO);
			break;
		}
		mscnt += DHCP_FINE_TIMER_MSECS;

		if (mscnt >= DHCP_COARSE_TIMER_SECS_NEW * 2000) {
			xil_printf("ERROR: DHCP request timed out\r\n");
			xil_printf("Configuring default IP of 192.168.1.10\r\n");
			IP4_ADDR(&(server_netif.ip_addr),  192, 168, 1, 10);
			IP4_ADDR(&(server_netif.netmask), 255, 255, 255,  0);
			IP4_ADDR(&(server_netif.gw),  192, 168, 1, 1);
			print_ip_settings(&(server_netif.ip_addr), &(server_netif.netmask), &(server_netif.gw));

			sys_thread_new("conn", connect_thread, 0,
					THREAD_STACKSIZE,
					DEFAULT_THREAD_PRIO);

			break;
		}
	}
#endif
#endif
    vTaskDelete(NULL);
    return 0;
}

