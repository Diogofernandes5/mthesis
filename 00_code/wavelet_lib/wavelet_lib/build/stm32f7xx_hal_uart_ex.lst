ARM GAS  /tmp/ccKzSNq3.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32f7xx_hal_uart_ex.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.UARTEx_Wakeup_AddressConfig,"ax",%progbits
  17              		.align	1
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	UARTEx_Wakeup_AddressConfig:
  25              	.LVL0:
  26              	.LFB152:
  27              		.file 1 "../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c"
   1:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /**
   2:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   ******************************************************************************
   3:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @file    stm32f7xx_hal_uart_ex.c
   4:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @author  MCD Application Team
   5:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @brief   Extended UART HAL module driver.
   6:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *          This file provides firmware functions to manage the following extended
   7:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter Peripheral (UART).
   8:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *           + Initialization and de-initialization functions
   9:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *           + Peripheral Control functions
  10:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *
  11:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *
  12:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   ******************************************************************************
  13:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @attention
  14:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *
  15:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * Copyright (c) 2017 STMicroelectronics.
  16:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * All rights reserved.
  17:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *
  18:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * This software is licensed under terms that can be found in the LICENSE file
  19:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * in the root directory of this software component.
  20:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  21:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *
  22:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   ******************************************************************************
  23:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   @verbatim
  24:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   ==============================================================================
  25:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****                ##### UART peripheral extended features  #####
  26:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   ==============================================================================
  27:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
  28:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     (#) Declare a UART_HandleTypeDef handle structure.
  29:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
  30:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     (#) For the UART RS485 Driver Enable mode, initialize the UART registers
  31:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         by calling the HAL_RS485Ex_Init() API.
ARM GAS  /tmp/ccKzSNq3.s 			page 2


  32:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
  33:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   @endverbatim
  34:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   ******************************************************************************
  35:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   */
  36:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
  37:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /* Includes ------------------------------------------------------------------*/
  38:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** #include "stm32f7xx_hal.h"
  39:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
  40:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /** @addtogroup STM32F7xx_HAL_Driver
  41:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @{
  42:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   */
  43:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
  44:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /** @defgroup UARTEx UARTEx
  45:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @brief UART Extended HAL module driver
  46:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @{
  47:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   */
  48:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
  49:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** #ifdef HAL_UART_MODULE_ENABLED
  50:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
  51:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /* Private typedef -----------------------------------------------------------*/
  52:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /* Private define ------------------------------------------------------------*/
  53:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
  54:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /* Private macros ------------------------------------------------------------*/
  55:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /* Private variables ---------------------------------------------------------*/
  56:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /* Private function prototypes -----------------------------------------------*/
  57:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /** @defgroup UARTEx_Private_Functions UARTEx Private Functions
  58:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @{
  59:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   */
  60:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** #if defined(USART_CR1_UESM)
  61:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelecti
  62:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** #endif /* USART_CR1_UESM */
  63:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /**
  64:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @}
  65:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   */
  66:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
  67:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /* Exported functions --------------------------------------------------------*/
  68:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
  69:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /** @defgroup UARTEx_Exported_Functions  UARTEx Exported Functions
  70:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @{
  71:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   */
  72:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
  73:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /** @defgroup UARTEx_Exported_Functions_Group1 Initialization and de-initialization functions
  74:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @brief    Extended Initialization and Configuration Functions
  75:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *
  76:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** @verbatim
  77:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** ===============================================================================
  78:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****             ##### Initialization and Configuration functions #####
  79:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****  ===============================================================================
  80:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     [..]
  81:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
  82:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     in asynchronous mode.
  83:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       (+) For the asynchronous mode the parameters below can be configured:
  84:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         (++) Baud Rate
  85:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         (++) Word Length
  86:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         (++) Stop Bit
  87:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
  88:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****              in the data register is transmitted but is changed by the parity bit.
ARM GAS  /tmp/ccKzSNq3.s 			page 3


  89:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         (++) Hardware flow control
  90:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         (++) Receiver/transmitter modes
  91:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         (++) Over Sampling Method
  92:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         (++) One-Bit Sampling Method
  93:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       (+) For the asynchronous mode, the following advanced features can be configured as well:
  94:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         (++) TX and/or RX pin level inversion
  95:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         (++) data logical level inversion
  96:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         (++) RX and TX pins swap
  97:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         (++) RX overrun detection disabling
  98:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         (++) DMA disabling on RX error
  99:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         (++) MSB first on communication line
 100:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         (++) auto Baud rate detection
 101:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     [..]
 102:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     The HAL_RS485Ex_Init() API follows the UART RS485 mode configuration
 103:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****      procedures (details for the procedures are available in reference manual).
 104:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 105:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** @endverbatim
 106:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 107:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   Depending on the frame length defined by the M1 and M0 bits (7-bit,
 108:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   8-bit or 9-bit), the possible UART formats are listed in the
 109:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   following table.
 110:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 111:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     Table 1. UART frame format.
 112:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     +-----------------------------------------------------------------------+
 113:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     |  M1 bit |  M0 bit |  PCE bit  |             UART frame                |
 114:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 115:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     |    0    |    0    |    0      |    | SB |    8 bit data   | STB |     |
 116:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 117:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     |    0    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 118:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 119:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     |    0    |    1    |    0      |    | SB |    9 bit data   | STB |     |
 120:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 121:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     |    0    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 122:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 123:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     |    1    |    0    |    0      |    | SB |    7 bit data   | STB |     |
 124:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 125:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     |    1    |    0    |    1      |    | SB | 6 bit data | PB | STB |     |
 126:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     +-----------------------------------------------------------------------+
 127:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 128:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @{
 129:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   */
 130:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 131:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /**
 132:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @brief Initialize the RS485 Driver enable feature according to the specified
 133:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *         parameters in the UART_InitTypeDef and creates the associated handle.
 134:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param huart            UART handle.
 135:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param Polarity         Select the driver enable polarity.
 136:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *          This parameter can be one of the following values:
 137:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *          @arg @ref UART_DE_POLARITY_HIGH DE signal is active high
 138:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *          @arg @ref UART_DE_POLARITY_LOW  DE signal is active low
 139:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param AssertionTime    Driver Enable assertion time:
 140:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *       5-bit value defining the time between the activation of the DE (Driver Enable)
 141:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *       signal and the beginning of the start bit. It is expressed in sample time
 142:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *       units (1/8 or 1/16 bit time, depending on the oversampling rate)
 143:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param DeassertionTime  Driver Enable deassertion time:
 144:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *       5-bit value defining the time between the end of the last stop bit, in a
 145:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *       transmitted message, and the de-activation of the DE (Driver Enable) signal.
ARM GAS  /tmp/ccKzSNq3.s 			page 4


 146:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *       It is expressed in sample time units (1/8 or 1/16 bit time, depending on the
 147:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *       oversampling rate).
 148:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @retval HAL status
 149:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   */
 150:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t Assertion
 151:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****                                    uint32_t DeassertionTime)
 152:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** {
 153:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   uint32_t temp;
 154:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 155:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Check the UART handle allocation */
 156:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   if (huart == NULL)
 157:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 158:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     return HAL_ERROR;
 159:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 160:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Check the Driver Enable UART instance */
 161:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 162:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 163:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Check the Driver Enable polarity */
 164:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   assert_param(IS_UART_DE_POLARITY(Polarity));
 165:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 166:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Check the Driver Enable assertion time */
 167:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 168:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 169:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Check the Driver Enable deassertion time */
 170:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 171:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 172:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 173:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 174:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     /* Allocate lock resource and initialize it */
 175:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->Lock = HAL_UNLOCKED;
 176:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 177:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 178:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     UART_InitCallbacksToDefault(huart);
 179:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 180:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     if (huart->MspInitCallback == NULL)
 181:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 182:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 183:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     }
 184:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 185:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     /* Init the low level hardware */
 186:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->MspInitCallback(huart);
 187:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** #else
 188:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     /* Init the low level hardware : GPIO, CLOCK, CORTEX */
 189:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     HAL_UART_MspInit(huart);
 190:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 191:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 192:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 193:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_BUSY;
 194:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 195:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Disable the Peripheral */
 196:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   __HAL_UART_DISABLE(huart);
 197:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 198:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Set the UART Communication parameters */
 199:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 200:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 201:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     return HAL_ERROR;
 202:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
ARM GAS  /tmp/ccKzSNq3.s 			page 5


 203:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 204:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 205:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 206:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     UART_AdvFeatureConfig(huart);
 207:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 208:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 209:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
 210:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 211:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 212:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Set the Driver Enable polarity */
 213:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 214:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 215:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Set the Driver Enable assertion and deassertion times */
 216:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 217:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 218:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 219:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 220:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Enable the Peripheral */
 221:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   __HAL_UART_ENABLE(huart);
 222:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 223:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 224:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   return (UART_CheckIdleState(huart));
 225:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 226:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 227:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /**
 228:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @}
 229:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   */
 230:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 231:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 232:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /** @defgroup UARTEx_Exported_Functions_Group3 Peripheral Control functions
 233:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @brief    Extended Peripheral Control functions
 234:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *
 235:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** @verbatim
 236:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****  ===============================================================================
 237:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****                       ##### Peripheral Control functions #####
 238:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****  ===============================================================================
 239:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     [..] This section provides the following functions:
 240:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****      (+) HAL_UARTEx_EnableClockStopMode() API enables the UART clock (HSI or LSE only) during stop 
 241:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****      (+) HAL_UARTEx_DisableClockStopMode() API disables the above functionality
 242:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****      (+) HAL_MultiProcessorEx_AddressLength_Set() API optionally sets the UART node address
 243:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****          detection length to more than 4 bits for multiprocessor address mark wake up.
 244:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** #if defined(USART_CR1_UESM)
 245:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****      (+) HAL_UARTEx_StopModeWakeUpSourceConfig() API defines the wake-up from stop mode
 246:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****          trigger: address match, Start Bit detection or RXNE bit status.
 247:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****      (+) HAL_UARTEx_EnableStopMode() API enables the UART to wake up the MCU from stop mode
 248:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****      (+) HAL_UARTEx_DisableStopMode() API disables the above functionality
 249:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** #endif
 250:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 251:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     [..] This subsection also provides a set of additional functions providing enhanced reception
 252:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     services to user. (For example, these functions allow application to handle use cases
 253:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     where number of data to be received is unknown).
 254:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 255:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     (#) Compared to standard reception services which only consider number of received
 256:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         data elements as reception completion criteria, these functions also consider additional ev
 257:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         as triggers for updating reception status to caller :
 258:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****        (+) Detection of inactivity period (RX line has not been active for a given period).
 259:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****           (++) RX inactivity detected by IDLE event, i.e. RX line has been in idle state (normally 
ARM GAS  /tmp/ccKzSNq3.s 			page 6


 260:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****                for 1 frame time, after last received byte.
 261:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****           (++) RX inactivity detected by RTO, i.e. line has been in idle state
 262:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****                for a programmable time, after last received byte.
 263:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****        (+) Detection that a specific character has been received.
 264:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 265:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     (#) There are two mode of transfer:
 266:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****        (+) Blocking mode: The reception is performed in polling mode, until either expected number 
 267:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****            or till IDLE event occurs. Reception is handled only during function execution.
 268:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****            When function exits, no data reception could occur. HAL status and number of actually re
 269:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****            are returned by function after finishing transfer.
 270:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****        (+) Non-Blocking mode: The reception is performed using Interrupts or DMA.
 271:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****            These API's return the HAL status.
 272:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****            The end of the data processing will be indicated through the
 273:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when using DMA mode.
 274:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****            The HAL_UARTEx_RxEventCallback() user callback will be executed during Receive process
 275:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a reception error is det
 276:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 277:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     (#) Blocking mode API:
 278:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         (+) HAL_UARTEx_ReceiveToIdle()
 279:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 280:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     (#) Non-Blocking mode API with Interrupt:
 281:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         (+) HAL_UARTEx_ReceiveToIdle_IT()
 282:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 283:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     (#) Non-Blocking mode API with DMA:
 284:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         (+) HAL_UARTEx_ReceiveToIdle_DMA()
 285:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 286:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** @endverbatim
 287:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @{
 288:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   */
 289:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 290:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** #if defined(USART_CR3_UCESM)
 291:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /**
 292:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @brief  Keep UART Clock enabled when in Stop Mode.
 293:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @note   When the USART clock source is configured to be LSE or HSI, it is possible to keep enab
 294:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *         this clock during STOP mode by setting the UCESM bit in USART_CR3 control register.
 295:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @note   When LPUART is used to wakeup from stop with LSE is selected as LPUART clock source,
 296:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *         and desired baud rate is 9600 baud, the bit UCESM bit in LPUART_CR3 control register mu
 297:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param  huart UART handle.
 298:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @retval HAL status
 299:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   */
 300:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_EnableClockStopMode(UART_HandleTypeDef *huart)
 301:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** {
 302:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Process Locked */
 303:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 304:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 305:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Set UCESM bit */
 306:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_UCESM);
 307:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 308:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Process Unlocked */
 309:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 310:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 311:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   return HAL_OK;
 312:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 313:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 314:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /**
 315:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @brief  Disable UART Clock when in Stop Mode.
 316:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param  huart UART handle.
ARM GAS  /tmp/ccKzSNq3.s 			page 7


 317:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @retval HAL status
 318:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   */
 319:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_DisableClockStopMode(UART_HandleTypeDef *huart)
 320:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** {
 321:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Process Locked */
 322:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 323:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 324:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Clear UCESM bit */
 325:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_UCESM);
 326:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 327:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Process Unlocked */
 328:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 329:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 330:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   return HAL_OK;
 331:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 332:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 333:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** #endif /* USART_CR3_UCESM */
 334:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /**
 335:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @brief By default in multiprocessor mode, when the wake up method is set
 336:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        to address mark, the UART handles only 4-bit long addresses detection;
 337:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        this API allows to enable longer addresses detection (6-, 7- or 8-bit
 338:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        long).
 339:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @note  Addresses detection lengths are: 6-bit address detection in 7-bit data mode,
 340:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        7-bit address detection in 8-bit data mode, 8-bit address detection in 9-bit data mode.
 341:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param huart         UART handle.
 342:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param AddressLength This parameter can be one of the following values:
 343:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *          @arg @ref UART_ADDRESS_DETECT_4B 4-bit long address
 344:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *          @arg @ref UART_ADDRESS_DETECT_7B 6-, 7- or 8-bit long address
 345:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @retval HAL status
 346:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   */
 347:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_MultiProcessorEx_AddressLength_Set(UART_HandleTypeDef *huart, uint32_t Addres
 348:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** {
 349:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Check the UART handle allocation */
 350:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   if (huart == NULL)
 351:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 352:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     return HAL_ERROR;
 353:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 354:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 355:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Check the address length parameter */
 356:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   assert_param(IS_UART_ADDRESSLENGTH_DETECT(AddressLength));
 357:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 358:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_BUSY;
 359:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 360:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Disable the Peripheral */
 361:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   __HAL_UART_DISABLE(huart);
 362:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 363:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Set the address length */
 364:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, AddressLength);
 365:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 366:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Enable the Peripheral */
 367:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   __HAL_UART_ENABLE(huart);
 368:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 369:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* TEACK and/or REACK to check before moving huart->gState to Ready */
 370:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   return (UART_CheckIdleState(huart));
 371:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 372:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 373:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** #if defined(USART_CR1_UESM)
ARM GAS  /tmp/ccKzSNq3.s 			page 8


 374:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /**
 375:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @brief Set Wakeup from Stop mode interrupt flag selection.
 376:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @note It is the application responsibility to enable the interrupt used as
 377:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *       usart_wkup interrupt source before entering low-power mode.
 378:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param huart           UART handle.
 379:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param WakeUpSelection Address match, Start Bit detection or RXNE/RXFNE bit status.
 380:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *          This parameter can be one of the following values:
 381:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *          @arg @ref UART_WAKEUP_ON_ADDRESS
 382:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *          @arg @ref UART_WAKEUP_ON_STARTBIT
 383:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
 384:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @retval HAL status
 385:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   */
 386:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeD
 387:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** {
 388:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 389:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   uint32_t tickstart;
 390:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 391:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* check the wake-up from stop mode UART instance */
 392:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
 393:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* check the wake-up selection parameter */
 394:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));
 395:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 396:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Process Locked */
 397:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 398:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 399:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_BUSY;
 400:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 401:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Disable the Peripheral */
 402:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   __HAL_UART_DISABLE(huart);
 403:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 404:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** #if defined(USART_CR3_WUS)
 405:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Set the wake-up selection scheme */
 406:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 407:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** #endif /* USART_CR3_WUS */
 408:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 409:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 410:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 411:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 412:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 413:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 414:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Enable the Peripheral */
 415:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   __HAL_UART_ENABLE(huart);
 416:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 417:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Init tickstart for timeout management */
 418:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   tickstart = HAL_GetTick();
 419:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 420:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Wait until REACK flag is set */
 421:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE)
 422:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 423:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     status = HAL_TIMEOUT;
 424:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 425:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   else
 426:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 427:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     /* Initialize the UART State */
 428:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->gState = HAL_UART_STATE_READY;
 429:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 430:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
ARM GAS  /tmp/ccKzSNq3.s 			page 9


 431:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Process Unlocked */
 432:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 433:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 434:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   return status;
 435:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 436:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 437:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /**
 438:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @brief Enable UART Stop Mode.
 439:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
 440:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param huart UART handle.
 441:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @retval HAL status
 442:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   */
 443:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
 444:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** {
 445:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Process Locked */
 446:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 447:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 448:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Set UESM bit */
 449:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 450:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 451:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Process Unlocked */
 452:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 453:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 454:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   return HAL_OK;
 455:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 456:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 457:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /**
 458:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @brief Disable UART Stop Mode.
 459:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param huart UART handle.
 460:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @retval HAL status
 461:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   */
 462:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_DisableStopMode(UART_HandleTypeDef *huart)
 463:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** {
 464:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Process Locked */
 465:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 466:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 467:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Clear UESM bit */
 468:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_UESM);
 469:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 470:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Process Unlocked */
 471:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 472:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 473:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   return HAL_OK;
 474:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 475:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 476:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** #endif /* USART_CR1_UESM */
 477:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /**
 478:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @brief Receive an amount of data in blocking mode till either the expected number of data
 479:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        is received or an IDLE event occurs.
 480:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @note  HAL_OK is returned if reception is completed (expected number of data has been received)
 481:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        or if reception is stopped after IDLE event (less than the expected number of data has b
 482:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        In this case, RxLen output parameter indicates number of data available in reception buf
 483:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
 484:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        the received data is handled as a set of uint16_t. In this case, Size must indicate the 
 485:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        of uint16_t available through pData.
 486:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param huart   UART handle.
 487:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param pData   Pointer to data buffer (uint8_t or uint16_t data elements).
ARM GAS  /tmp/ccKzSNq3.s 			page 10


 488:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param Size    Amount of data elements (uint8_t or uint16_t) to be received.
 489:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param RxLen   Number of data elements finally received
 490:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *                (could be lower than Size, in case reception ends on IDLE event)
 491:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
 492:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @retval HAL status
 493:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   */
 494:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size
 495:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****                                            uint32_t Timeout)
 496:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** {
 497:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   uint8_t  *pdata8bits;
 498:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   uint16_t *pdata16bits;
 499:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   uint16_t uhMask;
 500:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   uint32_t tickstart;
 501:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 502:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Check that a Rx process is not already ongoing */
 503:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 504:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 505:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     if ((pData == NULL) || (Size == 0U))
 506:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 507:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       return  HAL_ERROR;
 508:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     }
 509:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 510:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 511:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 512:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 513:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 514:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 515:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     /* Init tickstart for timeout management */
 516:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     tickstart = HAL_GetTick();
 517:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 518:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->RxXferSize  = Size;
 519:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->RxXferCount = Size;
 520:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 521:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     /* Computation of UART mask to apply to RDR register */
 522:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     UART_MASK_COMPUTATION(huart);
 523:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     uhMask = huart->Mask;
 524:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 525:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
 526:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 527:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 528:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       pdata8bits  = NULL;
 529:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       pdata16bits = (uint16_t *) pData;
 530:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     }
 531:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     else
 532:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 533:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       pdata8bits  = pData;
 534:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       pdata16bits = NULL;
 535:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     }
 536:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 537:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     /* Initialize output number of received elements */
 538:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     *RxLen = 0U;
 539:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 540:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     /* as long as data have to be received */
 541:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     while (huart->RxXferCount > 0U)
 542:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 543:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       /* Check if IDLE flag is set */
 544:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
ARM GAS  /tmp/ccKzSNq3.s 			page 11


 545:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       {
 546:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         /* Clear IDLE flag in ISR */
 547:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 548:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 549:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         /* If Set, but no data ever received, clear flag without exiting loop */
 550:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         /* If Set, and data has already been received, this means Idle Event is valid : End recepti
 551:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         if (*RxLen > 0U)
 552:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         {
 553:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****           huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 554:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****           huart->RxState = HAL_UART_STATE_READY;
 555:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 556:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****           return HAL_OK;
 557:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         }
 558:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 559:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 560:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       /* Check if RXNE flag is set */
 561:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 562:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       {
 563:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         if (pdata8bits == NULL)
 564:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         {
 565:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****           *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 566:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****           pdata16bits++;
 567:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         }
 568:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         else
 569:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         {
 570:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****           *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 571:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****           pdata8bits++;
 572:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         }
 573:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         /* Increment number of received elements */
 574:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         *RxLen += 1U;
 575:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         huart->RxXferCount--;
 576:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 577:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 578:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       /* Check for the Timeout */
 579:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       if (Timeout != HAL_MAX_DELAY)
 580:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       {
 581:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 582:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         {
 583:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****           huart->RxState = HAL_UART_STATE_READY;
 584:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 585:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****           return HAL_TIMEOUT;
 586:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         }
 587:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 588:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     }
 589:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 590:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     /* Set number of received elements in output parameter : RxLen */
 591:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     *RxLen = huart->RxXferSize - huart->RxXferCount;
 592:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     /* At end of Rx process, restore huart->RxState to Ready */
 593:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->RxState = HAL_UART_STATE_READY;
 594:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 595:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     return HAL_OK;
 596:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 597:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   else
 598:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 599:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     return HAL_BUSY;
 600:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 601:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
ARM GAS  /tmp/ccKzSNq3.s 			page 12


 602:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 603:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /**
 604:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @brief Receive an amount of data in interrupt mode till either the expected number of data
 605:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        is received or an IDLE event occurs.
 606:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @note  Reception is initiated by this function call. Further progress of reception is achieved 
 607:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        to UART interrupts raised by RXNE and IDLE events. Callback is called at end of receptio
 608:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        number of received data elements.
 609:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
 610:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        the received data is handled as a set of uint16_t. In this case, Size must indicate the 
 611:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        of uint16_t available through pData.
 612:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param huart UART handle.
 613:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
 614:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
 615:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @retval HAL status
 616:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   */
 617:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t S
 618:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** {
 619:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   HAL_StatusTypeDef status;
 620:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 621:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Check that a Rx process is not already ongoing */
 622:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 623:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 624:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     if ((pData == NULL) || (Size == 0U))
 625:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 626:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       return HAL_ERROR;
 627:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     }
 628:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 629:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     /* Set Reception type to reception till IDLE Event*/
 630:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 631:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 632:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 633:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     status =  UART_Start_Receive_IT(huart, pData, Size);
 634:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 635:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     /* Check Rx process has been successfully started */
 636:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     if (status == HAL_OK)
 637:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 638:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 639:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       {
 640:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 641:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 642:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 643:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       else
 644:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       {
 645:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         /* In case of errors already pending when reception is started,
 646:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****            Interrupts may have already been raised and lead to reception abortion.
 647:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****            (Overrun error for instance).
 648:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****            In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
 649:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         status = HAL_ERROR;
 650:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 651:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     }
 652:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 653:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     return status;
 654:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 655:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   else
 656:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 657:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     return HAL_BUSY;
 658:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
ARM GAS  /tmp/ccKzSNq3.s 			page 13


 659:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 660:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 661:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /**
 662:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @brief Receive an amount of data in DMA mode till either the expected number
 663:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        of data is received or an IDLE event occurs.
 664:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @note  Reception is initiated by this function call. Further progress of reception is achieved 
 665:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        to DMA services, transferring automatically received data elements in user reception buf
 666:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        calling registered callbacks at half/end of reception. UART IDLE events are also used to
 667:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        reception phase as ended. In all cases, callback execution will indicate number of recei
 668:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @note  When the UART parity is enabled (PCE = 1), the received data contain
 669:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        the parity bit (MSB position).
 670:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
 671:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        the received data is handled as a set of uint16_t. In this case, Size must indicate the 
 672:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        of uint16_t available through pData.
 673:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param huart UART handle.
 674:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
 675:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
 676:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @retval HAL status
 677:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   */
 678:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t 
 679:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** {
 680:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   HAL_StatusTypeDef status;
 681:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 682:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Check that a Rx process is not already ongoing */
 683:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 684:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 685:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     if ((pData == NULL) || (Size == 0U))
 686:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 687:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       return HAL_ERROR;
 688:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     }
 689:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 690:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     /* Set Reception type to reception till IDLE Event*/
 691:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 692:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 693:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 694:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     status =  UART_Start_Receive_DMA(huart, pData, Size);
 695:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 696:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     /* Check Rx process has been successfully started */
 697:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     if (status == HAL_OK)
 698:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 699:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 700:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       {
 701:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 702:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 703:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 704:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       else
 705:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       {
 706:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         /* In case of errors already pending when reception is started,
 707:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****            Interrupts may have already been raised and lead to reception abortion.
 708:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****            (Overrun error for instance).
 709:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****            In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
 710:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         status = HAL_ERROR;
 711:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 712:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     }
 713:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 714:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     return status;
 715:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
ARM GAS  /tmp/ccKzSNq3.s 			page 14


 716:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   else
 717:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 718:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     return HAL_BUSY;
 719:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 720:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 721:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 722:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /**
 723:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @brief Provide Rx Event type that has lead to RxEvent callback execution.
 724:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @note  When HAL_UARTEx_ReceiveToIdle_IT() or HAL_UARTEx_ReceiveToIdle_DMA() API are called, pro
 725:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        of reception process is provided to application through calls of Rx Event callback (eith
 726:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        HAL_UARTEx_RxEventCallback() or user registered one). As several types of events could o
 727:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        Half Transfer, or Transfer Complete), this function allows to retrieve the Rx Event type
 728:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        to Rx Event callback execution.
 729:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @note  This function is expected to be called within the user implementation of Rx Event Callba
 730:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        in order to provide the accurate value :
 731:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        In Interrupt Mode :
 732:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *           - HAL_UART_RXEVENT_TC : when Reception has been completed (expected nb of data has be
 733:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *           - HAL_UART_RXEVENT_IDLE : when Idle event occurred prior reception has been completed
 734:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *             received data is lower than expected one)
 735:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        In DMA Mode :
 736:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *           - HAL_UART_RXEVENT_TC : when Reception has been completed (expected nb of data has be
 737:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *           - HAL_UART_RXEVENT_HT : when half of expected nb of data has been received
 738:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *           - HAL_UART_RXEVENT_IDLE : when Idle event occurred prior reception has been completed
 739:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *             received data is lower than expected one).
 740:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        In DMA mode, RxEvent callback could be called several times;
 741:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        When DMA is configured in Normal Mode, HT event does not stop Reception process;
 742:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   *        When DMA is configured in Circular Mode, HT, TC or IDLE events don't stop Reception proc
 743:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param  huart UART handle.
 744:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @retval Rx Event Type (return vale will be a value of @ref UART_RxEvent_Type_Values)
 745:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   */
 746:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** HAL_UART_RxEventTypeTypeDef HAL_UARTEx_GetRxEventType(UART_HandleTypeDef *huart)
 747:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** {
 748:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Return Rx Event type value, as stored in UART handle */
 749:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   return(huart->RxEventType);
 750:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 751:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 752:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /**
 753:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @}
 754:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   */
 755:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 756:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /**
 757:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @}
 758:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   */
 759:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 760:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /** @addtogroup UARTEx_Private_Functions
 761:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @{
 762:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   */
 763:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** #if defined(USART_CR1_UESM)
 764:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 765:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** /**
 766:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @brief Initialize the UART wake-up from stop mode parameters when triggered by address detectio
 767:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param huart           UART handle.
 768:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @param WakeUpSelection UART wake up from stop mode parameters.
 769:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   * @retval None
 770:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   */
 771:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelecti
 772:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** {
ARM GAS  /tmp/ccKzSNq3.s 			page 15


  28              		.loc 1 772 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              		.loc 1 772 1 is_stmt 0 view .LVU1
  34 0000 82B0     		sub	sp, sp, #8
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37 0002 02AB     		add	r3, sp, #8
  38 0004 03E90600 		stmdb	r3, {r1, r2}
 773:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));
  39              		.loc 1 773 3 is_stmt 1 view .LVU2
 774:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 775:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Set the USART address length */
 776:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
  40              		.loc 1 776 3 view .LVU3
  41 0008 0268     		ldr	r2, [r0]
  42 000a 5368     		ldr	r3, [r2, #4]
  43 000c 23F01003 		bic	r3, r3, #16
  44 0010 BDF80410 		ldrh	r1, [sp, #4]
  45 0014 0B43     		orrs	r3, r3, r1
  46 0016 5360     		str	r3, [r2, #4]
 777:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 778:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Set the USART address node */
 779:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_AD
  47              		.loc 1 779 3 view .LVU4
  48 0018 0268     		ldr	r2, [r0]
  49 001a 5368     		ldr	r3, [r2, #4]
  50 001c 23F07F43 		bic	r3, r3, #-16777216
  51 0020 9DF80610 		ldrb	r1, [sp, #6]	@ zero_extendqisi2
  52 0024 43EA0163 		orr	r3, r3, r1, lsl #24
  53 0028 5360     		str	r3, [r2, #4]
 780:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
  54              		.loc 1 780 1 is_stmt 0 view .LVU5
  55 002a 02B0     		add	sp, sp, #8
  56              	.LCFI1:
  57              		.cfi_def_cfa_offset 0
  58              		@ sp needed
  59 002c 7047     		bx	lr
  60              		.cfi_endproc
  61              	.LFE152:
  63              		.section	.text.HAL_RS485Ex_Init,"ax",%progbits
  64              		.align	1
  65              		.global	HAL_RS485Ex_Init
  66              		.syntax unified
  67              		.thumb
  68              		.thumb_func
  69              		.fpu fpv5-d16
  71              	HAL_RS485Ex_Init:
  72              	.LVL1:
  73              	.LFB141:
 152:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   uint32_t temp;
  74              		.loc 1 152 1 is_stmt 1 view -0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccKzSNq3.s 			page 16


 153:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
  78              		.loc 1 153 3 view .LVU7
 156:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
  79              		.loc 1 156 3 view .LVU8
 156:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
  80              		.loc 1 156 6 is_stmt 0 view .LVU9
  81 0000 0028     		cmp	r0, #0
  82 0002 3AD0     		beq	.L7
 152:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   uint32_t temp;
  83              		.loc 1 152 1 view .LVU10
  84 0004 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  85              	.LCFI2:
  86              		.cfi_def_cfa_offset 24
  87              		.cfi_offset 3, -24
  88              		.cfi_offset 4, -20
  89              		.cfi_offset 5, -16
  90              		.cfi_offset 6, -12
  91              		.cfi_offset 7, -8
  92              		.cfi_offset 14, -4
  93 0006 0F46     		mov	r7, r1
  94 0008 1646     		mov	r6, r2
  95 000a 1D46     		mov	r5, r3
  96 000c 0446     		mov	r4, r0
 161:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
  97              		.loc 1 161 3 is_stmt 1 view .LVU11
 164:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
  98              		.loc 1 164 3 view .LVU12
 167:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
  99              		.loc 1 167 3 view .LVU13
 170:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 100              		.loc 1 170 3 view .LVU14
 172:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 101              		.loc 1 172 3 view .LVU15
 172:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 102              		.loc 1 172 12 is_stmt 0 view .LVU16
 103 000e C36F     		ldr	r3, [r0, #124]
 104              	.LVL2:
 172:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 105              		.loc 1 172 6 view .LVU17
 106 0010 53B3     		cbz	r3, .L12
 107              	.LVL3:
 108              	.L5:
 193:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 109              		.loc 1 193 3 is_stmt 1 view .LVU18
 193:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 110              		.loc 1 193 17 is_stmt 0 view .LVU19
 111 0012 2423     		movs	r3, #36
 112 0014 E367     		str	r3, [r4, #124]
 196:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 113              		.loc 1 196 3 is_stmt 1 view .LVU20
 114 0016 2268     		ldr	r2, [r4]
 115 0018 1368     		ldr	r3, [r2]
 116 001a 23F00103 		bic	r3, r3, #1
 117 001e 1360     		str	r3, [r2]
 199:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 118              		.loc 1 199 3 view .LVU21
 199:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
ARM GAS  /tmp/ccKzSNq3.s 			page 17


 119              		.loc 1 199 7 is_stmt 0 view .LVU22
 120 0020 2046     		mov	r0, r4
 121 0022 FFF7FEFF 		bl	UART_SetConfig
 122              	.LVL4:
 199:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 123              		.loc 1 199 6 view .LVU23
 124 0026 0128     		cmp	r0, #1
 125 0028 1DD0     		beq	.L4
 204:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 126              		.loc 1 204 3 is_stmt 1 view .LVU24
 204:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 127              		.loc 1 204 26 is_stmt 0 view .LVU25
 128 002a 636A     		ldr	r3, [r4, #36]
 204:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 129              		.loc 1 204 6 view .LVU26
 130 002c 0BBB     		cbnz	r3, .L13
 131              	.L6:
 210:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 132              		.loc 1 210 3 is_stmt 1 view .LVU27
 133 002e 2268     		ldr	r2, [r4]
 134 0030 9368     		ldr	r3, [r2, #8]
 135 0032 43F48043 		orr	r3, r3, #16384
 136 0036 9360     		str	r3, [r2, #8]
 213:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 137              		.loc 1 213 3 view .LVU28
 138 0038 2268     		ldr	r2, [r4]
 139 003a 9368     		ldr	r3, [r2, #8]
 140 003c 23F40043 		bic	r3, r3, #32768
 141 0040 3B43     		orrs	r3, r3, r7
 142 0042 9360     		str	r3, [r2, #8]
 216:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 143              		.loc 1 216 3 view .LVU29
 144              	.LVL5:
 217:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 145              		.loc 1 217 3 view .LVU30
 217:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 146              		.loc 1 217 28 is_stmt 0 view .LVU31
 147 0044 2D04     		lsls	r5, r5, #16
 148              	.LVL6:
 217:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 149              		.loc 1 217 8 view .LVU32
 150 0046 45EA4655 		orr	r5, r5, r6, lsl #21
 151              	.LVL7:
 218:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 152              		.loc 1 218 3 is_stmt 1 view .LVU33
 153 004a 2268     		ldr	r2, [r4]
 154 004c 1168     		ldr	r1, [r2]
 155 004e 0C4B     		ldr	r3, .L14
 156 0050 0B40     		ands	r3, r3, r1
 157 0052 1D43     		orrs	r5, r5, r3
 158              	.LVL8:
 218:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 159              		.loc 1 218 3 is_stmt 0 view .LVU34
 160 0054 1560     		str	r5, [r2]
 221:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 161              		.loc 1 221 3 is_stmt 1 view .LVU35
 162 0056 2268     		ldr	r2, [r4]
ARM GAS  /tmp/ccKzSNq3.s 			page 18


 163 0058 1368     		ldr	r3, [r2]
 164 005a 43F00103 		orr	r3, r3, #1
 165 005e 1360     		str	r3, [r2]
 224:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 166              		.loc 1 224 3 view .LVU36
 224:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 167              		.loc 1 224 11 is_stmt 0 view .LVU37
 168 0060 2046     		mov	r0, r4
 169 0062 FFF7FEFF 		bl	UART_CheckIdleState
 170              	.LVL9:
 171              	.L4:
 225:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 172              		.loc 1 225 1 view .LVU38
 173 0066 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 174              	.LVL10:
 175              	.L12:
 175:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 176              		.loc 1 175 5 is_stmt 1 view .LVU39
 175:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 177              		.loc 1 175 17 is_stmt 0 view .LVU40
 178 0068 80F87830 		strb	r3, [r0, #120]
 189:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 179              		.loc 1 189 5 is_stmt 1 view .LVU41
 180 006c FFF7FEFF 		bl	HAL_UART_MspInit
 181              	.LVL11:
 189:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 182              		.loc 1 189 5 is_stmt 0 view .LVU42
 183 0070 CFE7     		b	.L5
 184              	.L13:
 206:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 185              		.loc 1 206 5 is_stmt 1 view .LVU43
 186 0072 2046     		mov	r0, r4
 187 0074 FFF7FEFF 		bl	UART_AdvFeatureConfig
 188              	.LVL12:
 189 0078 D9E7     		b	.L6
 190              	.LVL13:
 191              	.L7:
 192              	.LCFI3:
 193              		.cfi_def_cfa_offset 0
 194              		.cfi_restore 3
 195              		.cfi_restore 4
 196              		.cfi_restore 5
 197              		.cfi_restore 6
 198              		.cfi_restore 7
 199              		.cfi_restore 14
 158:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 200              		.loc 1 158 12 is_stmt 0 view .LVU44
 201 007a 0120     		movs	r0, #1
 202              	.LVL14:
 225:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 203              		.loc 1 225 1 view .LVU45
 204 007c 7047     		bx	lr
 205              	.L15:
 206 007e 00BF     		.align	2
 207              	.L14:
 208 0080 FFFF00FC 		.word	-67043329
 209              		.cfi_endproc
ARM GAS  /tmp/ccKzSNq3.s 			page 19


 210              	.LFE141:
 212              		.section	.text.HAL_UARTEx_EnableClockStopMode,"ax",%progbits
 213              		.align	1
 214              		.global	HAL_UARTEx_EnableClockStopMode
 215              		.syntax unified
 216              		.thumb
 217              		.thumb_func
 218              		.fpu fpv5-d16
 220              	HAL_UARTEx_EnableClockStopMode:
 221              	.LVL15:
 222              	.LFB142:
 301:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Process Locked */
 223              		.loc 1 301 1 is_stmt 1 view -0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              		@ link register save eliminated.
 303:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 228              		.loc 1 303 3 view .LVU47
 303:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 229              		.loc 1 303 3 view .LVU48
 230 0000 90F87830 		ldrb	r3, [r0, #120]	@ zero_extendqisi2
 231 0004 012B     		cmp	r3, #1
 232 0006 13D0     		beq	.L19
 303:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 233              		.loc 1 303 3 discriminator 2 view .LVU49
 234 0008 0123     		movs	r3, #1
 235 000a 80F87830 		strb	r3, [r0, #120]
 236              	.L18:
 303:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 237              		.loc 1 303 3 discriminator 1 view .LVU50
 306:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 238              		.loc 1 306 3 discriminator 1 view .LVU51
 239              	.LBB32:
 306:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 240              		.loc 1 306 3 discriminator 1 view .LVU52
 306:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 241              		.loc 1 306 3 discriminator 1 view .LVU53
 306:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 242              		.loc 1 306 3 discriminator 1 view .LVU54
 243 000e 0268     		ldr	r2, [r0]
 244              	.LVL16:
 245              	.LBB33:
 246              	.LBI33:
 247              		.file 2 "../Drivers/CMSIS/Include/cmsis_gcc.h"
   1:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:../Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:../Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:../Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:../Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:../Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:../Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:../Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:../Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:../Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:../Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
ARM GAS  /tmp/ccKzSNq3.s 			page 20


  13:../Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:../Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:../Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:../Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:../Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:../Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:../Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:../Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:../Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:../Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:../Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:../Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:../Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccKzSNq3.s 			page 21


  70:../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:../Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:../Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:../Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:../Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:../Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:../Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
ARM GAS  /tmp/ccKzSNq3.s 			page 22


 127:../Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:../Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
ARM GAS  /tmp/ccKzSNq3.s 			page 23


 184:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccKzSNq3.s 			page 24


 241:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
ARM GAS  /tmp/ccKzSNq3.s 			page 25


 298:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
ARM GAS  /tmp/ccKzSNq3.s 			page 26


 355:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccKzSNq3.s 			page 27


 412:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:../Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:../Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:../Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:../Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccKzSNq3.s 			page 28


 469:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:../Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
ARM GAS  /tmp/ccKzSNq3.s 			page 29


 526:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:../Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:../Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:../Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccKzSNq3.s 			page 30


 583:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:../Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:../Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:../Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:../Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:../Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:../Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:../Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:../Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:../Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:../Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:../Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:../Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:../Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
ARM GAS  /tmp/ccKzSNq3.s 			page 31


 640:../Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:../Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:../Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:../Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:../Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:../Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:../Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:../Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:../Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:../Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:../Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:../Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:../Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
ARM GAS  /tmp/ccKzSNq3.s 			page 32


 697:../Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:../Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:../Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:../Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:../Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:../Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:../Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:../Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:../Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:../Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:../Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:../Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccKzSNq3.s 			page 33


 754:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:../Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:../Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:../Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:../Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:../Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:../Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:../Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:../Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:../Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:../Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:../Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
ARM GAS  /tmp/ccKzSNq3.s 			page 34


 811:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:../Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:../Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:../Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:../Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:../Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:../Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:../Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:../Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:../Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:../Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:../Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccKzSNq3.s 			page 35


 868:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:../Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 881:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 883:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 884:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:../Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 888:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 890:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 892:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 893:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 895:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 899:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 900:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 902:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 905:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 906:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 907:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 909:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 910:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 911:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 913:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 914:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 918:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 919:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 921:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 922:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 923:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
ARM GAS  /tmp/ccKzSNq3.s 			page 36


 925:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 926:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 929:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 933:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 934:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 935:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 936:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 938:../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 939:../Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 940:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 941:../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 942:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 943:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 944:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 945:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 946:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 947:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 948:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 949:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 950:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 951:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 952:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 953:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 954:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 955:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 956:../Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 957:../Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 958:../Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 959:../Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 960:../Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 961:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 962:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 963:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 964:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 965:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 966:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 967:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 968:../Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 969:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 970:../Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 971:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 972:../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 973:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 975:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 976:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 977:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 978:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 979:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 980:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 981:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
ARM GAS  /tmp/ccKzSNq3.s 			page 37


 982:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 983:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 984:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 985:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 986:../Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 987:../Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 988:../Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 989:../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 990:../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 991:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 992:../Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 993:../Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 994:../Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 995:../Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 996:../Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 997:../Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 998:../Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 999:../Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1000:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1001:../Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
1002:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
1003:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
1004:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
1005:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1006:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1007:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1008:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1009:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1010:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1011:../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CLZ             (uint8_t)__builtin_clz
1012:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
1013:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
1014:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1015:../Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1016:../Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
1017:../Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
1018:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1019:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
1020:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
1021:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1022:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
1023:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1024:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
1025:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
1026:../Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
1027:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
1028:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1029:../Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
1030:../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1031:../Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1032:../Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
1033:../Drivers/CMSIS/Include/cmsis_gcc.h ****     */
1034:../Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
1035:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1036:../Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
1037:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
1038:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccKzSNq3.s 			page 38


1039:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
1040:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1041:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
1042:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
1043:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1044:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
1045:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1046:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
1047:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
1048:../Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
1049:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
1050:../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1051:../Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
1052:../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1053:../Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1054:../Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
1055:../Drivers/CMSIS/Include/cmsis_gcc.h ****     */
1056:../Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
1057:../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1058:../Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
1059:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
1060:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
1061:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
1062:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1063:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
1064:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
1065:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1066:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
1067:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1068:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 248              		.loc 2 1068 31 discriminator 1 view .LVU55
 249              	.LBB34:
1069:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
1070:../Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 250              		.loc 2 1070 5 discriminator 1 view .LVU56
1071:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
1072:../Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 251              		.loc 2 1072 4 discriminator 1 view .LVU57
 252 0010 02F10803 		add	r3, r2, #8
 253              	.LVL17:
 254              		.loc 2 1072 4 is_stmt 0 discriminator 1 view .LVU58
 255              		.syntax unified
 256              	@ 1072 "../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 257 0014 53E8003F 		ldrex r3, [r3]
 258              	@ 0 "" 2
 259              	.LVL18:
1073:../Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 260              		.loc 2 1073 4 is_stmt 1 discriminator 1 view .LVU59
 261              		.loc 2 1073 4 is_stmt 0 discriminator 1 view .LVU60
 262              		.thumb
 263              		.syntax unified
 264              	.LBE34:
 265              	.LBE33:
 306:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 266              		.loc 1 306 3 discriminator 1 view .LVU61
 267 0018 43F40003 		orr	r3, r3, #8388608
 268              	.LVL19:
ARM GAS  /tmp/ccKzSNq3.s 			page 39


 306:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 269              		.loc 1 306 3 is_stmt 1 discriminator 1 view .LVU62
 270              	.LBB35:
 271              	.LBI35:
1074:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
1075:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
1076:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
1077:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1078:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
1079:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
1080:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1081:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1082:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1083:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1084:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1085:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
1086:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
1087:../Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
1088:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
1089:../Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
1090:../Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
1091:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
1092:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
1093:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
1094:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1095:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
1096:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
1097:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1098:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1099:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1100:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1101:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1102:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
1103:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
1104:../Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
1105:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
1106:../Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
1107:../Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
1108:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
1109:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
1110:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
1111:../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1112:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
1113:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
1114:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1115:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1116:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1117:../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1118:../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1119:../Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 272              		.loc 2 1119 31 discriminator 1 view .LVU63
 273              	.LBB36:
1120:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
1121:../Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 274              		.loc 2 1121 4 discriminator 1 view .LVU64
1122:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
1123:../Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
ARM GAS  /tmp/ccKzSNq3.s 			page 40


 275              		.loc 2 1123 4 discriminator 1 view .LVU65
 276 001c 0832     		adds	r2, r2, #8
 277              	.LVL20:
 278              		.loc 2 1123 4 is_stmt 0 discriminator 1 view .LVU66
 279              		.syntax unified
 280              	@ 1123 "../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 281 001e 42E80031 		strex r1, r3, [r2]
 282              	@ 0 "" 2
 283              	.LVL21:
1124:../Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 284              		.loc 2 1124 4 is_stmt 1 discriminator 1 view .LVU67
 285              		.loc 2 1124 4 is_stmt 0 discriminator 1 view .LVU68
 286              		.thumb
 287              		.syntax unified
 288              	.LBE36:
 289              	.LBE35:
 306:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 290              		.loc 1 306 3 discriminator 1 view .LVU69
 291 0022 0029     		cmp	r1, #0
 292 0024 F3D1     		bne	.L18
 293              	.LBE32:
 306:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 294              		.loc 1 306 3 is_stmt 1 discriminator 2 view .LVU70
 309:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 295              		.loc 1 309 3 discriminator 2 view .LVU71
 309:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 296              		.loc 1 309 3 discriminator 2 view .LVU72
 297 0026 0023     		movs	r3, #0
 298              	.LVL22:
 309:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 299              		.loc 1 309 3 is_stmt 0 discriminator 2 view .LVU73
 300 0028 80F87830 		strb	r3, [r0, #120]
 309:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 301              		.loc 1 309 3 is_stmt 1 discriminator 2 view .LVU74
 311:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 302              		.loc 1 311 3 discriminator 2 view .LVU75
 311:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 303              		.loc 1 311 10 is_stmt 0 discriminator 2 view .LVU76
 304 002c 1846     		mov	r0, r3
 305              	.LVL23:
 311:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 306              		.loc 1 311 10 discriminator 2 view .LVU77
 307 002e 7047     		bx	lr
 308              	.LVL24:
 309              	.L19:
 303:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 310              		.loc 1 303 3 view .LVU78
 311 0030 0220     		movs	r0, #2
 312              	.LVL25:
 312:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 313              		.loc 1 312 1 view .LVU79
 314 0032 7047     		bx	lr
 315              		.cfi_endproc
 316              	.LFE142:
 318              		.section	.text.HAL_UARTEx_DisableClockStopMode,"ax",%progbits
 319              		.align	1
 320              		.global	HAL_UARTEx_DisableClockStopMode
ARM GAS  /tmp/ccKzSNq3.s 			page 41


 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 324              		.fpu fpv5-d16
 326              	HAL_UARTEx_DisableClockStopMode:
 327              	.LVL26:
 328              	.LFB143:
 320:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Process Locked */
 329              		.loc 1 320 1 is_stmt 1 view -0
 330              		.cfi_startproc
 331              		@ args = 0, pretend = 0, frame = 0
 332              		@ frame_needed = 0, uses_anonymous_args = 0
 333              		@ link register save eliminated.
 322:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 334              		.loc 1 322 3 view .LVU81
 322:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 335              		.loc 1 322 3 view .LVU82
 336 0000 90F87830 		ldrb	r3, [r0, #120]	@ zero_extendqisi2
 337 0004 012B     		cmp	r3, #1
 338 0006 13D0     		beq	.L23
 322:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 339              		.loc 1 322 3 discriminator 2 view .LVU83
 340 0008 0123     		movs	r3, #1
 341 000a 80F87830 		strb	r3, [r0, #120]
 342              	.L22:
 322:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 343              		.loc 1 322 3 discriminator 1 view .LVU84
 325:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 344              		.loc 1 325 3 discriminator 1 view .LVU85
 345              	.LBB37:
 325:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 346              		.loc 1 325 3 discriminator 1 view .LVU86
 325:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 347              		.loc 1 325 3 discriminator 1 view .LVU87
 325:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 348              		.loc 1 325 3 discriminator 1 view .LVU88
 349 000e 0268     		ldr	r2, [r0]
 350              	.LVL27:
 351              	.LBB38:
 352              	.LBI38:
1068:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 353              		.loc 2 1068 31 discriminator 1 view .LVU89
 354              	.LBB39:
1070:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 355              		.loc 2 1070 5 discriminator 1 view .LVU90
1072:../Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 356              		.loc 2 1072 4 discriminator 1 view .LVU91
 357 0010 02F10803 		add	r3, r2, #8
 358              	.LVL28:
1072:../Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 359              		.loc 2 1072 4 is_stmt 0 discriminator 1 view .LVU92
 360              		.syntax unified
 361              	@ 1072 "../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 362 0014 53E8003F 		ldrex r3, [r3]
 363              	@ 0 "" 2
 364              	.LVL29:
1073:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccKzSNq3.s 			page 42


 365              		.loc 2 1073 4 is_stmt 1 discriminator 1 view .LVU93
1073:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 366              		.loc 2 1073 4 is_stmt 0 discriminator 1 view .LVU94
 367              		.thumb
 368              		.syntax unified
 369              	.LBE39:
 370              	.LBE38:
 325:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 371              		.loc 1 325 3 discriminator 1 view .LVU95
 372 0018 23F40003 		bic	r3, r3, #8388608
 373              	.LVL30:
 325:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 374              		.loc 1 325 3 is_stmt 1 discriminator 1 view .LVU96
 375              	.LBB40:
 376              	.LBI40:
1119:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 377              		.loc 2 1119 31 discriminator 1 view .LVU97
 378              	.LBB41:
1121:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379              		.loc 2 1121 4 discriminator 1 view .LVU98
1123:../Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 380              		.loc 2 1123 4 discriminator 1 view .LVU99
 381 001c 0832     		adds	r2, r2, #8
 382              	.LVL31:
1123:../Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 383              		.loc 2 1123 4 is_stmt 0 discriminator 1 view .LVU100
 384              		.syntax unified
 385              	@ 1123 "../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 386 001e 42E80031 		strex r1, r3, [r2]
 387              	@ 0 "" 2
 388              	.LVL32:
 389              		.loc 2 1124 4 is_stmt 1 discriminator 1 view .LVU101
 390              		.loc 2 1124 4 is_stmt 0 discriminator 1 view .LVU102
 391              		.thumb
 392              		.syntax unified
 393              	.LBE41:
 394              	.LBE40:
 325:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 395              		.loc 1 325 3 discriminator 1 view .LVU103
 396 0022 0029     		cmp	r1, #0
 397 0024 F3D1     		bne	.L22
 398              	.LBE37:
 325:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 399              		.loc 1 325 3 is_stmt 1 discriminator 2 view .LVU104
 328:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 400              		.loc 1 328 3 discriminator 2 view .LVU105
 328:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 401              		.loc 1 328 3 discriminator 2 view .LVU106
 402 0026 0023     		movs	r3, #0
 403              	.LVL33:
 328:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 404              		.loc 1 328 3 is_stmt 0 discriminator 2 view .LVU107
 405 0028 80F87830 		strb	r3, [r0, #120]
 328:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 406              		.loc 1 328 3 is_stmt 1 discriminator 2 view .LVU108
 330:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 407              		.loc 1 330 3 discriminator 2 view .LVU109
ARM GAS  /tmp/ccKzSNq3.s 			page 43


 330:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 408              		.loc 1 330 10 is_stmt 0 discriminator 2 view .LVU110
 409 002c 1846     		mov	r0, r3
 410              	.LVL34:
 330:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 411              		.loc 1 330 10 discriminator 2 view .LVU111
 412 002e 7047     		bx	lr
 413              	.LVL35:
 414              	.L23:
 322:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 415              		.loc 1 322 3 view .LVU112
 416 0030 0220     		movs	r0, #2
 417              	.LVL36:
 331:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 418              		.loc 1 331 1 view .LVU113
 419 0032 7047     		bx	lr
 420              		.cfi_endproc
 421              	.LFE143:
 423              		.section	.text.HAL_MultiProcessorEx_AddressLength_Set,"ax",%progbits
 424              		.align	1
 425              		.global	HAL_MultiProcessorEx_AddressLength_Set
 426              		.syntax unified
 427              		.thumb
 428              		.thumb_func
 429              		.fpu fpv5-d16
 431              	HAL_MultiProcessorEx_AddressLength_Set:
 432              	.LVL37:
 433              	.LFB144:
 348:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Check the UART handle allocation */
 434              		.loc 1 348 1 is_stmt 1 view -0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 350:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 438              		.loc 1 350 3 view .LVU115
 350:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 439              		.loc 1 350 6 is_stmt 0 view .LVU116
 440 0000 B8B1     		cbz	r0, .L26
 348:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Check the UART handle allocation */
 441              		.loc 1 348 1 view .LVU117
 442 0002 08B5     		push	{r3, lr}
 443              	.LCFI4:
 444              		.cfi_def_cfa_offset 8
 445              		.cfi_offset 3, -8
 446              		.cfi_offset 14, -4
 447 0004 0346     		mov	r3, r0
 356:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 448              		.loc 1 356 3 is_stmt 1 view .LVU118
 358:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 449              		.loc 1 358 3 view .LVU119
 358:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 450              		.loc 1 358 17 is_stmt 0 view .LVU120
 451 0006 2422     		movs	r2, #36
 452 0008 C267     		str	r2, [r0, #124]
 361:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 453              		.loc 1 361 3 is_stmt 1 view .LVU121
 454 000a 0068     		ldr	r0, [r0]
ARM GAS  /tmp/ccKzSNq3.s 			page 44


 455              	.LVL38:
 361:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 456              		.loc 1 361 3 is_stmt 0 view .LVU122
 457 000c 0268     		ldr	r2, [r0]
 458 000e 22F00102 		bic	r2, r2, #1
 459 0012 0260     		str	r2, [r0]
 364:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 460              		.loc 1 364 3 is_stmt 1 view .LVU123
 461 0014 1868     		ldr	r0, [r3]
 462 0016 4268     		ldr	r2, [r0, #4]
 463 0018 22F01002 		bic	r2, r2, #16
 464 001c 1143     		orrs	r1, r1, r2
 465              	.LVL39:
 364:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 466              		.loc 1 364 3 is_stmt 0 view .LVU124
 467 001e 4160     		str	r1, [r0, #4]
 367:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 468              		.loc 1 367 3 is_stmt 1 view .LVU125
 469 0020 1968     		ldr	r1, [r3]
 470 0022 0A68     		ldr	r2, [r1]
 471 0024 42F00102 		orr	r2, r2, #1
 472 0028 0A60     		str	r2, [r1]
 370:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 473              		.loc 1 370 3 view .LVU126
 370:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 474              		.loc 1 370 11 is_stmt 0 view .LVU127
 475 002a 1846     		mov	r0, r3
 476 002c FFF7FEFF 		bl	UART_CheckIdleState
 477              	.LVL40:
 371:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 478              		.loc 1 371 1 view .LVU128
 479 0030 08BD     		pop	{r3, pc}
 480              	.LVL41:
 481              	.L26:
 482              	.LCFI5:
 483              		.cfi_def_cfa_offset 0
 484              		.cfi_restore 3
 485              		.cfi_restore 14
 352:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 486              		.loc 1 352 12 view .LVU129
 487 0032 0120     		movs	r0, #1
 488              	.LVL42:
 371:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 489              		.loc 1 371 1 view .LVU130
 490 0034 7047     		bx	lr
 491              		.cfi_endproc
 492              	.LFE144:
 494              		.section	.text.HAL_UARTEx_StopModeWakeUpSourceConfig,"ax",%progbits
 495              		.align	1
 496              		.global	HAL_UARTEx_StopModeWakeUpSourceConfig
 497              		.syntax unified
 498              		.thumb
 499              		.thumb_func
 500              		.fpu fpv5-d16
 502              	HAL_UARTEx_StopModeWakeUpSourceConfig:
 503              	.LVL43:
 504              	.LFB145:
ARM GAS  /tmp/ccKzSNq3.s 			page 45


 387:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 505              		.loc 1 387 1 is_stmt 1 view -0
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 8
 508              		@ frame_needed = 0, uses_anonymous_args = 0
 387:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 509              		.loc 1 387 1 is_stmt 0 view .LVU132
 510 0000 10B5     		push	{r4, lr}
 511              	.LCFI6:
 512              		.cfi_def_cfa_offset 8
 513              		.cfi_offset 4, -8
 514              		.cfi_offset 14, -4
 515 0002 84B0     		sub	sp, sp, #16
 516              	.LCFI7:
 517              		.cfi_def_cfa_offset 24
 518 0004 04AB     		add	r3, sp, #16
 519 0006 03E90600 		stmdb	r3, {r1, r2}
 388:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   uint32_t tickstart;
 520              		.loc 1 388 3 is_stmt 1 view .LVU133
 521              	.LVL44:
 389:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 522              		.loc 1 389 3 view .LVU134
 392:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* check the wake-up selection parameter */
 523              		.loc 1 392 3 view .LVU135
 394:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 524              		.loc 1 394 3 view .LVU136
 397:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 525              		.loc 1 397 3 view .LVU137
 397:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 526              		.loc 1 397 3 view .LVU138
 527 000a 90F87830 		ldrb	r3, [r0, #120]	@ zero_extendqisi2
 528 000e 012B     		cmp	r3, #1
 529 0010 33D0     		beq	.L35
 530 0012 0446     		mov	r4, r0
 397:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 531              		.loc 1 397 3 discriminator 2 view .LVU139
 532 0014 0123     		movs	r3, #1
 533 0016 80F87830 		strb	r3, [r0, #120]
 397:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 534              		.loc 1 397 3 discriminator 2 view .LVU140
 399:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 535              		.loc 1 399 3 discriminator 2 view .LVU141
 399:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 536              		.loc 1 399 17 is_stmt 0 discriminator 2 view .LVU142
 537 001a 2423     		movs	r3, #36
 538 001c C367     		str	r3, [r0, #124]
 402:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 539              		.loc 1 402 3 is_stmt 1 discriminator 2 view .LVU143
 540 001e 0268     		ldr	r2, [r0]
 541 0020 1368     		ldr	r3, [r2]
 542 0022 23F00103 		bic	r3, r3, #1
 543 0026 1360     		str	r3, [r2]
 406:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** #endif /* USART_CR3_WUS */
 544              		.loc 1 406 3 discriminator 2 view .LVU144
 545 0028 0168     		ldr	r1, [r0]
 546 002a 8B68     		ldr	r3, [r1, #8]
 547 002c 23F44013 		bic	r3, r3, #3145728
ARM GAS  /tmp/ccKzSNq3.s 			page 46


 548 0030 029A     		ldr	r2, [sp, #8]
 549 0032 1343     		orrs	r3, r3, r2
 550 0034 8B60     		str	r3, [r1, #8]
 409:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 551              		.loc 1 409 3 discriminator 2 view .LVU145
 409:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 552              		.loc 1 409 6 is_stmt 0 discriminator 2 view .LVU146
 553 0036 A2B1     		cbz	r2, .L38
 554              	.LVL45:
 555              	.L33:
 415:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 556              		.loc 1 415 3 is_stmt 1 view .LVU147
 557 0038 2268     		ldr	r2, [r4]
 558 003a 1368     		ldr	r3, [r2]
 559 003c 43F00103 		orr	r3, r3, #1
 560 0040 1360     		str	r3, [r2]
 418:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 561              		.loc 1 418 3 view .LVU148
 418:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 562              		.loc 1 418 15 is_stmt 0 view .LVU149
 563 0042 FFF7FEFF 		bl	HAL_GetTick
 564              	.LVL46:
 565 0046 0346     		mov	r3, r0
 566              	.LVL47:
 421:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 567              		.loc 1 421 3 is_stmt 1 view .LVU150
 421:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 568              		.loc 1 421 7 is_stmt 0 view .LVU151
 569 0048 6FF07E42 		mvn	r2, #-33554432
 570 004c 0092     		str	r2, [sp]
 571 004e 0022     		movs	r2, #0
 572 0050 4FF48001 		mov	r1, #4194304
 573 0054 2046     		mov	r0, r4
 574              	.LVL48:
 421:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 575              		.loc 1 421 7 view .LVU152
 576 0056 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 577              	.LVL49:
 421:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 578              		.loc 1 421 6 view .LVU153
 579 005a 40B9     		cbnz	r0, .L36
 428:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 580              		.loc 1 428 5 is_stmt 1 view .LVU154
 428:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 581              		.loc 1 428 19 is_stmt 0 view .LVU155
 582 005c 2023     		movs	r3, #32
 583 005e E367     		str	r3, [r4, #124]
 584 0060 06E0     		b	.L34
 585              	.LVL50:
 586              	.L38:
 411:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 587              		.loc 1 411 5 is_stmt 1 view .LVU156
 588 0062 04AB     		add	r3, sp, #16
 589 0064 13E90600 		ldmdb	r3, {r1, r2}
 590 0068 FFF7FEFF 		bl	UARTEx_Wakeup_AddressConfig
 591              	.LVL51:
 411:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
ARM GAS  /tmp/ccKzSNq3.s 			page 47


 592              		.loc 1 411 5 is_stmt 0 view .LVU157
 593 006c E4E7     		b	.L33
 594              	.L36:
 423:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 595              		.loc 1 423 12 view .LVU158
 596 006e 0320     		movs	r0, #3
 597              	.L34:
 598              	.LVL52:
 432:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 599              		.loc 1 432 3 is_stmt 1 view .LVU159
 432:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 600              		.loc 1 432 3 view .LVU160
 601 0070 0023     		movs	r3, #0
 602 0072 84F87830 		strb	r3, [r4, #120]
 432:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 603              		.loc 1 432 3 view .LVU161
 434:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 604              		.loc 1 434 3 view .LVU162
 605              	.LVL53:
 606              	.L32:
 435:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 607              		.loc 1 435 1 is_stmt 0 view .LVU163
 608 0076 04B0     		add	sp, sp, #16
 609              	.LCFI8:
 610              		.cfi_remember_state
 611              		.cfi_def_cfa_offset 8
 612              		@ sp needed
 613 0078 10BD     		pop	{r4, pc}
 614              	.LVL54:
 615              	.L35:
 616              	.LCFI9:
 617              		.cfi_restore_state
 397:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 618              		.loc 1 397 3 view .LVU164
 619 007a 0220     		movs	r0, #2
 620              	.LVL55:
 397:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 621              		.loc 1 397 3 view .LVU165
 622 007c FBE7     		b	.L32
 623              		.cfi_endproc
 624              	.LFE145:
 626              		.section	.text.HAL_UARTEx_EnableStopMode,"ax",%progbits
 627              		.align	1
 628              		.global	HAL_UARTEx_EnableStopMode
 629              		.syntax unified
 630              		.thumb
 631              		.thumb_func
 632              		.fpu fpv5-d16
 634              	HAL_UARTEx_EnableStopMode:
 635              	.LVL56:
 636              	.LFB146:
 444:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Process Locked */
 637              		.loc 1 444 1 is_stmt 1 view -0
 638              		.cfi_startproc
 639              		@ args = 0, pretend = 0, frame = 0
 640              		@ frame_needed = 0, uses_anonymous_args = 0
 641              		@ link register save eliminated.
ARM GAS  /tmp/ccKzSNq3.s 			page 48


 446:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 642              		.loc 1 446 3 view .LVU167
 446:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 643              		.loc 1 446 3 view .LVU168
 644 0000 90F87830 		ldrb	r3, [r0, #120]	@ zero_extendqisi2
 645 0004 012B     		cmp	r3, #1
 646 0006 10D0     		beq	.L42
 446:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 647              		.loc 1 446 3 discriminator 2 view .LVU169
 648 0008 0123     		movs	r3, #1
 649 000a 80F87830 		strb	r3, [r0, #120]
 650              	.L41:
 446:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 651              		.loc 1 446 3 discriminator 1 view .LVU170
 449:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 652              		.loc 1 449 3 discriminator 1 view .LVU171
 653              	.LBB42:
 449:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 654              		.loc 1 449 3 discriminator 1 view .LVU172
 449:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 655              		.loc 1 449 3 discriminator 1 view .LVU173
 449:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 656              		.loc 1 449 3 discriminator 1 view .LVU174
 657 000e 0268     		ldr	r2, [r0]
 658              	.LVL57:
 659              	.LBB43:
 660              	.LBI43:
1068:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 661              		.loc 2 1068 31 discriminator 1 view .LVU175
 662              	.LBB44:
1070:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 663              		.loc 2 1070 5 discriminator 1 view .LVU176
1072:../Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 664              		.loc 2 1072 4 discriminator 1 view .LVU177
 665              		.syntax unified
 666              	@ 1072 "../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 667 0010 52E8003F 		ldrex r3, [r2]
 668              	@ 0 "" 2
 669              	.LVL58:
1073:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 670              		.loc 2 1073 4 discriminator 1 view .LVU178
1073:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671              		.loc 2 1073 4 is_stmt 0 discriminator 1 view .LVU179
 672              		.thumb
 673              		.syntax unified
 674              	.LBE44:
 675              	.LBE43:
 449:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 676              		.loc 1 449 3 discriminator 1 view .LVU180
 677 0014 43F00203 		orr	r3, r3, #2
 678              	.LVL59:
 449:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 679              		.loc 1 449 3 is_stmt 1 discriminator 1 view .LVU181
 680              	.LBB45:
 681              	.LBI45:
1119:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 682              		.loc 2 1119 31 discriminator 1 view .LVU182
ARM GAS  /tmp/ccKzSNq3.s 			page 49


 683              	.LBB46:
1121:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684              		.loc 2 1121 4 discriminator 1 view .LVU183
1123:../Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 685              		.loc 2 1123 4 discriminator 1 view .LVU184
 686              		.syntax unified
 687              	@ 1123 "../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 688 0018 42E80031 		strex r1, r3, [r2]
 689              	@ 0 "" 2
 690              	.LVL60:
 691              		.loc 2 1124 4 discriminator 1 view .LVU185
 692              		.loc 2 1124 4 is_stmt 0 discriminator 1 view .LVU186
 693              		.thumb
 694              		.syntax unified
 695              	.LBE46:
 696              	.LBE45:
 449:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 697              		.loc 1 449 3 discriminator 1 view .LVU187
 698 001c 0029     		cmp	r1, #0
 699 001e F6D1     		bne	.L41
 700              	.LBE42:
 449:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 701              		.loc 1 449 3 is_stmt 1 discriminator 2 view .LVU188
 452:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 702              		.loc 1 452 3 discriminator 2 view .LVU189
 452:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 703              		.loc 1 452 3 discriminator 2 view .LVU190
 704 0020 0023     		movs	r3, #0
 705              	.LVL61:
 452:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 706              		.loc 1 452 3 is_stmt 0 discriminator 2 view .LVU191
 707 0022 80F87830 		strb	r3, [r0, #120]
 452:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 708              		.loc 1 452 3 is_stmt 1 discriminator 2 view .LVU192
 454:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 709              		.loc 1 454 3 discriminator 2 view .LVU193
 454:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 710              		.loc 1 454 10 is_stmt 0 discriminator 2 view .LVU194
 711 0026 1846     		mov	r0, r3
 712              	.LVL62:
 454:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 713              		.loc 1 454 10 discriminator 2 view .LVU195
 714 0028 7047     		bx	lr
 715              	.LVL63:
 716              	.L42:
 446:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 717              		.loc 1 446 3 view .LVU196
 718 002a 0220     		movs	r0, #2
 719              	.LVL64:
 455:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 720              		.loc 1 455 1 view .LVU197
 721 002c 7047     		bx	lr
 722              		.cfi_endproc
 723              	.LFE146:
 725              		.section	.text.HAL_UARTEx_DisableStopMode,"ax",%progbits
 726              		.align	1
 727              		.global	HAL_UARTEx_DisableStopMode
ARM GAS  /tmp/ccKzSNq3.s 			page 50


 728              		.syntax unified
 729              		.thumb
 730              		.thumb_func
 731              		.fpu fpv5-d16
 733              	HAL_UARTEx_DisableStopMode:
 734              	.LVL65:
 735              	.LFB147:
 463:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Process Locked */
 736              		.loc 1 463 1 is_stmt 1 view -0
 737              		.cfi_startproc
 738              		@ args = 0, pretend = 0, frame = 0
 739              		@ frame_needed = 0, uses_anonymous_args = 0
 740              		@ link register save eliminated.
 465:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 741              		.loc 1 465 3 view .LVU199
 465:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 742              		.loc 1 465 3 view .LVU200
 743 0000 90F87830 		ldrb	r3, [r0, #120]	@ zero_extendqisi2
 744 0004 012B     		cmp	r3, #1
 745 0006 10D0     		beq	.L46
 465:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 746              		.loc 1 465 3 discriminator 2 view .LVU201
 747 0008 0123     		movs	r3, #1
 748 000a 80F87830 		strb	r3, [r0, #120]
 749              	.L45:
 465:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 750              		.loc 1 465 3 discriminator 1 view .LVU202
 468:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 751              		.loc 1 468 3 discriminator 1 view .LVU203
 752              	.LBB47:
 468:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 753              		.loc 1 468 3 discriminator 1 view .LVU204
 468:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 754              		.loc 1 468 3 discriminator 1 view .LVU205
 468:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 755              		.loc 1 468 3 discriminator 1 view .LVU206
 756 000e 0268     		ldr	r2, [r0]
 757              	.LVL66:
 758              	.LBB48:
 759              	.LBI48:
1068:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 760              		.loc 2 1068 31 discriminator 1 view .LVU207
 761              	.LBB49:
1070:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 762              		.loc 2 1070 5 discriminator 1 view .LVU208
1072:../Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 763              		.loc 2 1072 4 discriminator 1 view .LVU209
 764              		.syntax unified
 765              	@ 1072 "../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 766 0010 52E8003F 		ldrex r3, [r2]
 767              	@ 0 "" 2
 768              	.LVL67:
1073:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769              		.loc 2 1073 4 discriminator 1 view .LVU210
1073:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 770              		.loc 2 1073 4 is_stmt 0 discriminator 1 view .LVU211
 771              		.thumb
ARM GAS  /tmp/ccKzSNq3.s 			page 51


 772              		.syntax unified
 773              	.LBE49:
 774              	.LBE48:
 468:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 775              		.loc 1 468 3 discriminator 1 view .LVU212
 776 0014 23F00203 		bic	r3, r3, #2
 777              	.LVL68:
 468:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 778              		.loc 1 468 3 is_stmt 1 discriminator 1 view .LVU213
 779              	.LBB50:
 780              	.LBI50:
1119:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 781              		.loc 2 1119 31 discriminator 1 view .LVU214
 782              	.LBB51:
1121:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 783              		.loc 2 1121 4 discriminator 1 view .LVU215
1123:../Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 784              		.loc 2 1123 4 discriminator 1 view .LVU216
 785              		.syntax unified
 786              	@ 1123 "../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 787 0018 42E80031 		strex r1, r3, [r2]
 788              	@ 0 "" 2
 789              	.LVL69:
 790              		.loc 2 1124 4 discriminator 1 view .LVU217
 791              		.loc 2 1124 4 is_stmt 0 discriminator 1 view .LVU218
 792              		.thumb
 793              		.syntax unified
 794              	.LBE51:
 795              	.LBE50:
 468:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 796              		.loc 1 468 3 discriminator 1 view .LVU219
 797 001c 0029     		cmp	r1, #0
 798 001e F6D1     		bne	.L45
 799              	.LBE47:
 468:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 800              		.loc 1 468 3 is_stmt 1 discriminator 2 view .LVU220
 471:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 801              		.loc 1 471 3 discriminator 2 view .LVU221
 471:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 802              		.loc 1 471 3 discriminator 2 view .LVU222
 803 0020 0023     		movs	r3, #0
 804              	.LVL70:
 471:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 805              		.loc 1 471 3 is_stmt 0 discriminator 2 view .LVU223
 806 0022 80F87830 		strb	r3, [r0, #120]
 471:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 807              		.loc 1 471 3 is_stmt 1 discriminator 2 view .LVU224
 473:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 808              		.loc 1 473 3 discriminator 2 view .LVU225
 473:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 809              		.loc 1 473 10 is_stmt 0 discriminator 2 view .LVU226
 810 0026 1846     		mov	r0, r3
 811              	.LVL71:
 473:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 812              		.loc 1 473 10 discriminator 2 view .LVU227
 813 0028 7047     		bx	lr
 814              	.LVL72:
ARM GAS  /tmp/ccKzSNq3.s 			page 52


 815              	.L46:
 465:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 816              		.loc 1 465 3 view .LVU228
 817 002a 0220     		movs	r0, #2
 818              	.LVL73:
 474:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 819              		.loc 1 474 1 view .LVU229
 820 002c 7047     		bx	lr
 821              		.cfi_endproc
 822              	.LFE147:
 824              		.section	.text.HAL_UARTEx_ReceiveToIdle,"ax",%progbits
 825              		.align	1
 826              		.global	HAL_UARTEx_ReceiveToIdle
 827              		.syntax unified
 828              		.thumb
 829              		.thumb_func
 830              		.fpu fpv5-d16
 832              	HAL_UARTEx_ReceiveToIdle:
 833              	.LVL74:
 834              	.LFB148:
 496:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   uint8_t  *pdata8bits;
 835              		.loc 1 496 1 is_stmt 1 view -0
 836              		.cfi_startproc
 837              		@ args = 4, pretend = 0, frame = 0
 838              		@ frame_needed = 0, uses_anonymous_args = 0
 496:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   uint8_t  *pdata8bits;
 839              		.loc 1 496 1 is_stmt 0 view .LVU231
 840 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 841              	.LCFI10:
 842              		.cfi_def_cfa_offset 32
 843              		.cfi_offset 4, -32
 844              		.cfi_offset 5, -28
 845              		.cfi_offset 6, -24
 846              		.cfi_offset 7, -20
 847              		.cfi_offset 8, -16
 848              		.cfi_offset 9, -12
 849              		.cfi_offset 10, -8
 850              		.cfi_offset 14, -4
 851 0004 1D46     		mov	r5, r3
 852 0006 089E     		ldr	r6, [sp, #32]
 497:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   uint16_t *pdata16bits;
 853              		.loc 1 497 3 is_stmt 1 view .LVU232
 498:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   uint16_t uhMask;
 854              		.loc 1 498 3 view .LVU233
 499:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   uint32_t tickstart;
 855              		.loc 1 499 3 view .LVU234
 500:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 856              		.loc 1 500 3 view .LVU235
 503:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 857              		.loc 1 503 3 view .LVU236
 503:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 858              		.loc 1 503 12 is_stmt 0 view .LVU237
 859 0008 D0F88030 		ldr	r3, [r0, #128]
 860              	.LVL75:
 503:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 861              		.loc 1 503 6 view .LVU238
 862 000c 202B     		cmp	r3, #32
ARM GAS  /tmp/ccKzSNq3.s 			page 53


 863 000e 40F0A380 		bne	.L65
 864 0012 0446     		mov	r4, r0
 865 0014 0F46     		mov	r7, r1
 866 0016 9146     		mov	r9, r2
 505:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 867              		.loc 1 505 5 is_stmt 1 view .LVU239
 505:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 868              		.loc 1 505 8 is_stmt 0 view .LVU240
 869 0018 002A     		cmp	r2, #0
 870 001a 18BF     		it	ne
 871 001c 0029     		cmpne	r1, #0
 872 001e 01D1     		bne	.L70
 507:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     }
 873              		.loc 1 507 15 view .LVU241
 874 0020 0120     		movs	r0, #1
 875              	.LVL76:
 507:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     }
 876              		.loc 1 507 15 view .LVU242
 877 0022 9AE0     		b	.L48
 878              	.LVL77:
 879              	.L70:
 510:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 880              		.loc 1 510 5 is_stmt 1 view .LVU243
 510:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 881              		.loc 1 510 22 is_stmt 0 view .LVU244
 882 0024 0023     		movs	r3, #0
 883 0026 C0F88430 		str	r3, [r0, #132]
 511:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 884              		.loc 1 511 5 is_stmt 1 view .LVU245
 511:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 885              		.loc 1 511 20 is_stmt 0 view .LVU246
 886 002a 2222     		movs	r2, #34
 887              	.LVL78:
 511:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 888              		.loc 1 511 20 view .LVU247
 889 002c C0F88020 		str	r2, [r0, #128]
 512:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 890              		.loc 1 512 5 is_stmt 1 view .LVU248
 512:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 891              		.loc 1 512 26 is_stmt 0 view .LVU249
 892 0030 0122     		movs	r2, #1
 893 0032 0266     		str	r2, [r0, #96]
 513:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 894              		.loc 1 513 5 is_stmt 1 view .LVU250
 513:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 895              		.loc 1 513 24 is_stmt 0 view .LVU251
 896 0034 4366     		str	r3, [r0, #100]
 516:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 897              		.loc 1 516 5 is_stmt 1 view .LVU252
 516:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 898              		.loc 1 516 17 is_stmt 0 view .LVU253
 899 0036 FFF7FEFF 		bl	HAL_GetTick
 900              	.LVL79:
 516:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 901              		.loc 1 516 17 view .LVU254
 902 003a 8046     		mov	r8, r0
 903              	.LVL80:
ARM GAS  /tmp/ccKzSNq3.s 			page 54


 518:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->RxXferCount = Size;
 904              		.loc 1 518 5 is_stmt 1 view .LVU255
 518:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->RxXferCount = Size;
 905              		.loc 1 518 24 is_stmt 0 view .LVU256
 906 003c A4F85890 		strh	r9, [r4, #88]	@ movhi
 519:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 907              		.loc 1 519 5 is_stmt 1 view .LVU257
 519:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 908              		.loc 1 519 24 is_stmt 0 view .LVU258
 909 0040 A4F85A90 		strh	r9, [r4, #90]	@ movhi
 522:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     uhMask = huart->Mask;
 910              		.loc 1 522 5 is_stmt 1 view .LVU259
 522:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     uhMask = huart->Mask;
 911              		.loc 1 522 5 view .LVU260
 912 0044 A368     		ldr	r3, [r4, #8]
 913 0046 B3F5805F 		cmp	r3, #4096
 914 004a 06D0     		beq	.L71
 522:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     uhMask = huart->Mask;
 915              		.loc 1 522 5 discriminator 2 view .LVU261
 916 004c A3B9     		cbnz	r3, .L52
 522:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     uhMask = huart->Mask;
 917              		.loc 1 522 5 discriminator 5 view .LVU262
 918 004e 2269     		ldr	r2, [r4, #16]
 919 0050 72B9     		cbnz	r2, .L53
 522:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     uhMask = huart->Mask;
 920              		.loc 1 522 5 discriminator 7 view .LVU263
 921 0052 FF22     		movs	r2, #255
 922 0054 A4F85C20 		strh	r2, [r4, #92]	@ movhi
 923 0058 14E0     		b	.L51
 924              	.L71:
 522:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     uhMask = huart->Mask;
 925              		.loc 1 522 5 discriminator 1 view .LVU264
 926 005a 2269     		ldr	r2, [r4, #16]
 927 005c 22B9     		cbnz	r2, .L50
 522:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     uhMask = huart->Mask;
 928              		.loc 1 522 5 discriminator 3 view .LVU265
 929 005e 40F2FF12 		movw	r2, #511
 930 0062 A4F85C20 		strh	r2, [r4, #92]	@ movhi
 931 0066 0DE0     		b	.L51
 932              	.L50:
 522:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     uhMask = huart->Mask;
 933              		.loc 1 522 5 discriminator 4 view .LVU266
 934 0068 FF22     		movs	r2, #255
 935 006a A4F85C20 		strh	r2, [r4, #92]	@ movhi
 936 006e 09E0     		b	.L51
 937              	.L53:
 522:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     uhMask = huart->Mask;
 938              		.loc 1 522 5 discriminator 8 view .LVU267
 939 0070 7F22     		movs	r2, #127
 940 0072 A4F85C20 		strh	r2, [r4, #92]	@ movhi
 941 0076 05E0     		b	.L51
 942              	.L52:
 522:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     uhMask = huart->Mask;
 943              		.loc 1 522 5 discriminator 6 view .LVU268
 944 0078 B3F1805F 		cmp	r3, #268435456
 945 007c 0CD0     		beq	.L72
 522:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     uhMask = huart->Mask;
ARM GAS  /tmp/ccKzSNq3.s 			page 55


 946              		.loc 1 522 5 discriminator 10 view .LVU269
 947 007e 0022     		movs	r2, #0
 948 0080 A4F85C20 		strh	r2, [r4, #92]	@ movhi
 949              	.L51:
 522:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     uhMask = huart->Mask;
 950              		.loc 1 522 5 discriminator 13 view .LVU270
 523:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 951              		.loc 1 523 5 discriminator 13 view .LVU271
 523:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 952              		.loc 1 523 12 is_stmt 0 discriminator 13 view .LVU272
 953 0084 B4F85C90 		ldrh	r9, [r4, #92]
 954              	.LVL81:
 526:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 955              		.loc 1 526 5 is_stmt 1 discriminator 13 view .LVU273
 526:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 956              		.loc 1 526 8 is_stmt 0 discriminator 13 view .LVU274
 957 0088 B3F5805F 		cmp	r3, #4096
 958 008c 0ED0     		beq	.L73
 534:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     }
 959              		.loc 1 534 19 view .LVU275
 960 008e 4FF0000A 		mov	r10, #0
 961              	.LVL82:
 962              	.L56:
 538:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 963              		.loc 1 538 5 is_stmt 1 view .LVU276
 538:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 964              		.loc 1 538 12 is_stmt 0 view .LVU277
 965 0092 0023     		movs	r3, #0
 966 0094 2B80     		strh	r3, [r5]	@ movhi
 541:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 967              		.loc 1 541 5 is_stmt 1 view .LVU278
 541:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 968              		.loc 1 541 11 is_stmt 0 view .LVU279
 969 0096 2AE0     		b	.L57
 970              	.LVL83:
 971              	.L72:
 522:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     uhMask = huart->Mask;
 972              		.loc 1 522 5 is_stmt 1 discriminator 9 view .LVU280
 973 0098 2269     		ldr	r2, [r4, #16]
 974 009a 1AB9     		cbnz	r2, .L55
 522:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     uhMask = huart->Mask;
 975              		.loc 1 522 5 discriminator 11 view .LVU281
 976 009c 7F22     		movs	r2, #127
 977 009e A4F85C20 		strh	r2, [r4, #92]	@ movhi
 978 00a2 EFE7     		b	.L51
 979              	.L55:
 522:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     uhMask = huart->Mask;
 980              		.loc 1 522 5 discriminator 12 view .LVU282
 981 00a4 3F22     		movs	r2, #63
 982 00a6 A4F85C20 		strh	r2, [r4, #92]	@ movhi
 983 00aa EBE7     		b	.L51
 984              	.LVL84:
 985              	.L73:
 526:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 986              		.loc 1 526 71 is_stmt 0 discriminator 1 view .LVU283
 987 00ac 2369     		ldr	r3, [r4, #16]
 526:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
ARM GAS  /tmp/ccKzSNq3.s 			page 56


 988              		.loc 1 526 56 discriminator 1 view .LVU284
 989 00ae 13B1     		cbz	r3, .L68
 534:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     }
 990              		.loc 1 534 19 view .LVU285
 991 00b0 4FF0000A 		mov	r10, #0
 992 00b4 EDE7     		b	.L56
 993              	.L68:
 529:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     }
 994              		.loc 1 529 19 view .LVU286
 995 00b6 BA46     		mov	r10, r7
 528:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       pdata16bits = (uint16_t *) pData;
 996              		.loc 1 528 19 view .LVU287
 997 00b8 0027     		movs	r7, #0
 998              	.LVL85:
 528:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       pdata16bits = (uint16_t *) pData;
 999              		.loc 1 528 19 view .LVU288
 1000 00ba EAE7     		b	.L56
 1001              	.LVL86:
 1002              	.L76:
 553:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****           huart->RxState = HAL_UART_STATE_READY;
 1003              		.loc 1 553 11 is_stmt 1 view .LVU289
 553:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****           huart->RxState = HAL_UART_STATE_READY;
 1004              		.loc 1 553 30 is_stmt 0 view .LVU290
 1005 00bc 0223     		movs	r3, #2
 1006 00be 6366     		str	r3, [r4, #100]
 554:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 1007              		.loc 1 554 11 is_stmt 1 view .LVU291
 554:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 1008              		.loc 1 554 26 is_stmt 0 view .LVU292
 1009 00c0 2023     		movs	r3, #32
 1010 00c2 C4F88030 		str	r3, [r4, #128]
 556:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         }
 1011              		.loc 1 556 11 is_stmt 1 view .LVU293
 556:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         }
 1012              		.loc 1 556 18 is_stmt 0 view .LVU294
 1013 00c6 0020     		movs	r0, #0
 1014 00c8 47E0     		b	.L48
 1015              	.L77:
 565:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****           pdata16bits++;
 1016              		.loc 1 565 11 is_stmt 1 view .LVU295
 565:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****           pdata16bits++;
 1017              		.loc 1 565 52 is_stmt 0 view .LVU296
 1018 00ca 5B6A     		ldr	r3, [r3, #36]
 565:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****           pdata16bits++;
 1019              		.loc 1 565 26 view .LVU297
 1020 00cc 09EA0303 		and	r3, r9, r3
 565:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****           pdata16bits++;
 1021              		.loc 1 565 24 view .LVU298
 1022 00d0 2AF8023B 		strh	r3, [r10], #2	@ movhi
 1023              	.LVL87:
 566:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         }
 1024              		.loc 1 566 11 is_stmt 1 view .LVU299
 1025              	.L61:
 574:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         huart->RxXferCount--;
 1026              		.loc 1 574 9 view .LVU300
 574:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         huart->RxXferCount--;
 1027              		.loc 1 574 16 is_stmt 0 view .LVU301
ARM GAS  /tmp/ccKzSNq3.s 			page 57


 1028 00d4 2B88     		ldrh	r3, [r5]
 1029 00d6 0133     		adds	r3, r3, #1
 1030 00d8 2B80     		strh	r3, [r5]	@ movhi
 575:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 1031              		.loc 1 575 9 is_stmt 1 view .LVU302
 575:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 1032              		.loc 1 575 14 is_stmt 0 view .LVU303
 1033 00da B4F85A30 		ldrh	r3, [r4, #90]
 1034 00de 9BB2     		uxth	r3, r3
 575:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 1035              		.loc 1 575 27 view .LVU304
 1036 00e0 013B     		subs	r3, r3, #1
 1037 00e2 9BB2     		uxth	r3, r3
 1038 00e4 A4F85A30 		strh	r3, [r4, #90]	@ movhi
 1039              	.L59:
 579:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       {
 1040              		.loc 1 579 7 is_stmt 1 view .LVU305
 579:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       {
 1041              		.loc 1 579 10 is_stmt 0 view .LVU306
 1042 00e8 B6F1FF3F 		cmp	r6, #-1
 1043 00ec 1BD1     		bne	.L74
 1044              	.L57:
 541:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 1045              		.loc 1 541 11 is_stmt 1 view .LVU307
 541:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 1046              		.loc 1 541 17 is_stmt 0 view .LVU308
 1047 00ee B4F85A20 		ldrh	r2, [r4, #90]
 1048 00f2 92B2     		uxth	r2, r2
 541:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 1049              		.loc 1 541 11 view .LVU309
 1050 00f4 22B3     		cbz	r2, .L75
 544:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       {
 1051              		.loc 1 544 7 is_stmt 1 view .LVU310
 544:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       {
 1052              		.loc 1 544 11 is_stmt 0 view .LVU311
 1053 00f6 2368     		ldr	r3, [r4]
 1054 00f8 DA69     		ldr	r2, [r3, #28]
 544:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       {
 1055              		.loc 1 544 10 view .LVU312
 1056 00fa 12F0100F 		tst	r2, #16
 1057 00fe 04D0     		beq	.L58
 547:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 1058              		.loc 1 547 9 is_stmt 1 view .LVU313
 1059 0100 1022     		movs	r2, #16
 1060 0102 1A62     		str	r2, [r3, #32]
 551:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         {
 1061              		.loc 1 551 9 view .LVU314
 551:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         {
 1062              		.loc 1 551 13 is_stmt 0 view .LVU315
 1063 0104 2B88     		ldrh	r3, [r5]
 551:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         {
 1064              		.loc 1 551 12 view .LVU316
 1065 0106 002B     		cmp	r3, #0
 1066 0108 D8D1     		bne	.L76
 1067              	.L58:
 561:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       {
 1068              		.loc 1 561 7 is_stmt 1 view .LVU317
ARM GAS  /tmp/ccKzSNq3.s 			page 58


 561:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       {
 1069              		.loc 1 561 11 is_stmt 0 view .LVU318
 1070 010a 2368     		ldr	r3, [r4]
 1071 010c DA69     		ldr	r2, [r3, #28]
 561:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       {
 1072              		.loc 1 561 10 view .LVU319
 1073 010e 12F0200F 		tst	r2, #32
 1074 0112 E9D0     		beq	.L59
 563:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         {
 1075              		.loc 1 563 9 is_stmt 1 view .LVU320
 563:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         {
 1076              		.loc 1 563 12 is_stmt 0 view .LVU321
 1077 0114 002F     		cmp	r7, #0
 1078 0116 D8D0     		beq	.L77
 570:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****           pdata8bits++;
 1079              		.loc 1 570 11 is_stmt 1 view .LVU322
 570:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****           pdata8bits++;
 1080              		.loc 1 570 50 is_stmt 0 view .LVU323
 1081 0118 5A6A     		ldr	r2, [r3, #36]
 570:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****           pdata8bits++;
 1082              		.loc 1 570 58 view .LVU324
 1083 011a 5FFA89F3 		uxtb	r3, r9
 570:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****           pdata8bits++;
 1084              		.loc 1 570 25 view .LVU325
 1085 011e 1340     		ands	r3, r3, r2
 570:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****           pdata8bits++;
 1086              		.loc 1 570 23 view .LVU326
 1087 0120 07F8013B 		strb	r3, [r7], #1
 1088              	.LVL88:
 571:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         }
 1089              		.loc 1 571 11 is_stmt 1 view .LVU327
 571:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         }
 1090              		.loc 1 571 11 is_stmt 0 view .LVU328
 1091 0124 D6E7     		b	.L61
 1092              	.L74:
 581:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         {
 1093              		.loc 1 581 9 is_stmt 1 view .LVU329
 581:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         {
 1094              		.loc 1 581 15 is_stmt 0 view .LVU330
 1095 0126 FFF7FEFF 		bl	HAL_GetTick
 1096              	.LVL89:
 581:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         {
 1097              		.loc 1 581 29 view .LVU331
 1098 012a A0EB0800 		sub	r0, r0, r8
 581:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         {
 1099              		.loc 1 581 12 view .LVU332
 1100 012e B042     		cmp	r0, r6
 1101 0130 01D8     		bhi	.L63
 581:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         {
 1102              		.loc 1 581 53 discriminator 1 view .LVU333
 1103 0132 002E     		cmp	r6, #0
 1104 0134 DBD1     		bne	.L57
 1105              	.L63:
 583:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 1106              		.loc 1 583 11 is_stmt 1 view .LVU334
 583:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 1107              		.loc 1 583 26 is_stmt 0 view .LVU335
ARM GAS  /tmp/ccKzSNq3.s 			page 59


 1108 0136 2023     		movs	r3, #32
 1109 0138 C4F88030 		str	r3, [r4, #128]
 585:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         }
 1110              		.loc 1 585 11 is_stmt 1 view .LVU336
 585:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         }
 1111              		.loc 1 585 18 is_stmt 0 view .LVU337
 1112 013c 0320     		movs	r0, #3
 1113 013e 0CE0     		b	.L48
 1114              	.L75:
 591:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     /* At end of Rx process, restore huart->RxState to Ready */
 1115              		.loc 1 591 5 is_stmt 1 view .LVU338
 591:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     /* At end of Rx process, restore huart->RxState to Ready */
 1116              		.loc 1 591 19 is_stmt 0 view .LVU339
 1117 0140 B4F85830 		ldrh	r3, [r4, #88]
 591:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     /* At end of Rx process, restore huart->RxState to Ready */
 1118              		.loc 1 591 39 view .LVU340
 1119 0144 B4F85A20 		ldrh	r2, [r4, #90]
 1120 0148 92B2     		uxth	r2, r2
 591:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     /* At end of Rx process, restore huart->RxState to Ready */
 1121              		.loc 1 591 32 view .LVU341
 1122 014a 9B1A     		subs	r3, r3, r2
 591:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     /* At end of Rx process, restore huart->RxState to Ready */
 1123              		.loc 1 591 12 view .LVU342
 1124 014c 2B80     		strh	r3, [r5]	@ movhi
 593:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 1125              		.loc 1 593 5 is_stmt 1 view .LVU343
 593:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 1126              		.loc 1 593 20 is_stmt 0 view .LVU344
 1127 014e 2023     		movs	r3, #32
 1128 0150 C4F88030 		str	r3, [r4, #128]
 595:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 1129              		.loc 1 595 5 is_stmt 1 view .LVU345
 595:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 1130              		.loc 1 595 12 is_stmt 0 view .LVU346
 1131 0154 0020     		movs	r0, #0
 1132 0156 00E0     		b	.L48
 1133              	.LVL90:
 1134              	.L65:
 599:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 1135              		.loc 1 599 12 view .LVU347
 1136 0158 0220     		movs	r0, #2
 1137              	.LVL91:
 1138              	.L48:
 601:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 1139              		.loc 1 601 1 view .LVU348
 1140 015a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 601:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 1141              		.loc 1 601 1 view .LVU349
 1142              		.cfi_endproc
 1143              	.LFE148:
 1145              		.section	.text.HAL_UARTEx_ReceiveToIdle_IT,"ax",%progbits
 1146              		.align	1
 1147              		.global	HAL_UARTEx_ReceiveToIdle_IT
 1148              		.syntax unified
 1149              		.thumb
 1150              		.thumb_func
 1151              		.fpu fpv5-d16
ARM GAS  /tmp/ccKzSNq3.s 			page 60


 1153              	HAL_UARTEx_ReceiveToIdle_IT:
 1154              	.LVL92:
 1155              	.LFB149:
 618:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   HAL_StatusTypeDef status;
 1156              		.loc 1 618 1 is_stmt 1 view -0
 1157              		.cfi_startproc
 1158              		@ args = 0, pretend = 0, frame = 0
 1159              		@ frame_needed = 0, uses_anonymous_args = 0
 619:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 1160              		.loc 1 619 3 view .LVU351
 622:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 1161              		.loc 1 622 3 view .LVU352
 622:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 1162              		.loc 1 622 12 is_stmt 0 view .LVU353
 1163 0000 D0F88030 		ldr	r3, [r0, #128]
 622:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 1164              		.loc 1 622 6 view .LVU354
 1165 0004 202B     		cmp	r3, #32
 1166 0006 21D1     		bne	.L82
 618:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   HAL_StatusTypeDef status;
 1167              		.loc 1 618 1 view .LVU355
 1168 0008 10B5     		push	{r4, lr}
 1169              	.LCFI11:
 1170              		.cfi_def_cfa_offset 8
 1171              		.cfi_offset 4, -8
 1172              		.cfi_offset 14, -4
 1173 000a 0446     		mov	r4, r0
 624:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 1174              		.loc 1 624 5 is_stmt 1 view .LVU356
 624:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 1175              		.loc 1 624 8 is_stmt 0 view .LVU357
 1176 000c 002A     		cmp	r2, #0
 1177 000e 18BF     		it	ne
 1178 0010 0029     		cmpne	r1, #0
 1179 0012 01D1     		bne	.L89
 626:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     }
 1180              		.loc 1 626 14 view .LVU358
 1181 0014 0120     		movs	r0, #1
 1182              	.LVL93:
 1183              	.L79:
 659:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 1184              		.loc 1 659 1 view .LVU359
 1185 0016 10BD     		pop	{r4, pc}
 1186              	.LVL94:
 1187              	.L89:
 630:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 1188              		.loc 1 630 5 is_stmt 1 view .LVU360
 630:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 1189              		.loc 1 630 26 is_stmt 0 view .LVU361
 1190 0018 0123     		movs	r3, #1
 1191 001a 0366     		str	r3, [r0, #96]
 631:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 1192              		.loc 1 631 5 is_stmt 1 view .LVU362
 631:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 1193              		.loc 1 631 24 is_stmt 0 view .LVU363
 1194 001c 0023     		movs	r3, #0
 1195 001e 4366     		str	r3, [r0, #100]
ARM GAS  /tmp/ccKzSNq3.s 			page 61


 633:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 1196              		.loc 1 633 5 is_stmt 1 view .LVU364
 633:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 1197              		.loc 1 633 15 is_stmt 0 view .LVU365
 1198 0020 FFF7FEFF 		bl	UART_Start_Receive_IT
 1199              	.LVL95:
 636:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 1200              		.loc 1 636 5 is_stmt 1 view .LVU366
 636:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 1201              		.loc 1 636 8 is_stmt 0 view .LVU367
 1202 0024 0028     		cmp	r0, #0
 1203 0026 F6D1     		bne	.L79
 638:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       {
 1204              		.loc 1 638 7 is_stmt 1 view .LVU368
 638:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       {
 1205              		.loc 1 638 16 is_stmt 0 view .LVU369
 1206 0028 236E     		ldr	r3, [r4, #96]
 638:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       {
 1207              		.loc 1 638 10 view .LVU370
 1208 002a 012B     		cmp	r3, #1
 1209 002c 01D0     		beq	.L90
 649:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 1210              		.loc 1 649 16 view .LVU371
 1211 002e 0120     		movs	r0, #1
 1212              	.LVL96:
 653:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 1213              		.loc 1 653 5 is_stmt 1 view .LVU372
 653:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 1214              		.loc 1 653 12 is_stmt 0 view .LVU373
 1215 0030 F1E7     		b	.L79
 1216              	.LVL97:
 1217              	.L90:
 640:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 1218              		.loc 1 640 9 is_stmt 1 view .LVU374
 1219 0032 2368     		ldr	r3, [r4]
 1220 0034 1022     		movs	r2, #16
 1221 0036 1A62     		str	r2, [r3, #32]
 1222              	.L81:
 641:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 1223              		.loc 1 641 9 discriminator 1 view .LVU375
 1224              	.LBB52:
 641:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 1225              		.loc 1 641 9 discriminator 1 view .LVU376
 641:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 1226              		.loc 1 641 9 discriminator 1 view .LVU377
 641:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 1227              		.loc 1 641 9 discriminator 1 view .LVU378
 1228 0038 2268     		ldr	r2, [r4]
 1229              	.LVL98:
 1230              	.LBB53:
 1231              	.LBI53:
1068:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1232              		.loc 2 1068 31 discriminator 1 view .LVU379
 1233              	.LBB54:
1070:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 1234              		.loc 2 1070 5 discriminator 1 view .LVU380
1072:../Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  /tmp/ccKzSNq3.s 			page 62


 1235              		.loc 2 1072 4 discriminator 1 view .LVU381
 1236              		.syntax unified
 1237              	@ 1072 "../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1238 003a 52E8003F 		ldrex r3, [r2]
 1239              	@ 0 "" 2
 1240              	.LVL99:
1073:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1241              		.loc 2 1073 4 discriminator 1 view .LVU382
1073:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1242              		.loc 2 1073 4 is_stmt 0 discriminator 1 view .LVU383
 1243              		.thumb
 1244              		.syntax unified
 1245              	.LBE54:
 1246              	.LBE53:
 641:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 1247              		.loc 1 641 9 discriminator 1 view .LVU384
 1248 003e 43F01003 		orr	r3, r3, #16
 1249              	.LVL100:
 641:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 1250              		.loc 1 641 9 is_stmt 1 discriminator 1 view .LVU385
 1251              	.LBB55:
 1252              	.LBI55:
1119:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1253              		.loc 2 1119 31 discriminator 1 view .LVU386
 1254              	.LBB56:
1121:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 1255              		.loc 2 1121 4 discriminator 1 view .LVU387
1123:../Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1256              		.loc 2 1123 4 discriminator 1 view .LVU388
 1257              		.syntax unified
 1258              	@ 1123 "../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1259 0042 42E80031 		strex r1, r3, [r2]
 1260              	@ 0 "" 2
 1261              	.LVL101:
 1262              		.loc 2 1124 4 discriminator 1 view .LVU389
 1263              		.loc 2 1124 4 is_stmt 0 discriminator 1 view .LVU390
 1264              		.thumb
 1265              		.syntax unified
 1266              	.LBE56:
 1267              	.LBE55:
 641:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 1268              		.loc 1 641 9 discriminator 1 view .LVU391
 1269 0046 0029     		cmp	r1, #0
 1270 0048 F6D1     		bne	.L81
 1271 004a E4E7     		b	.L79
 1272              	.LVL102:
 1273              	.L82:
 1274              	.LCFI12:
 1275              		.cfi_def_cfa_offset 0
 1276              		.cfi_restore 4
 1277              		.cfi_restore 14
 641:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 1278              		.loc 1 641 9 discriminator 1 view .LVU392
 1279              	.LBE52:
 657:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 1280              		.loc 1 657 12 view .LVU393
 1281 004c 0220     		movs	r0, #2
ARM GAS  /tmp/ccKzSNq3.s 			page 63


 1282              	.LVL103:
 659:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 1283              		.loc 1 659 1 view .LVU394
 1284 004e 7047     		bx	lr
 1285              		.cfi_endproc
 1286              	.LFE149:
 1288              		.section	.text.HAL_UARTEx_ReceiveToIdle_DMA,"ax",%progbits
 1289              		.align	1
 1290              		.global	HAL_UARTEx_ReceiveToIdle_DMA
 1291              		.syntax unified
 1292              		.thumb
 1293              		.thumb_func
 1294              		.fpu fpv5-d16
 1296              	HAL_UARTEx_ReceiveToIdle_DMA:
 1297              	.LVL104:
 1298              	.LFB150:
 679:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   HAL_StatusTypeDef status;
 1299              		.loc 1 679 1 is_stmt 1 view -0
 1300              		.cfi_startproc
 1301              		@ args = 0, pretend = 0, frame = 0
 1302              		@ frame_needed = 0, uses_anonymous_args = 0
 680:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 1303              		.loc 1 680 3 view .LVU396
 683:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 1304              		.loc 1 683 3 view .LVU397
 683:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 1305              		.loc 1 683 12 is_stmt 0 view .LVU398
 1306 0000 D0F88030 		ldr	r3, [r0, #128]
 683:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   {
 1307              		.loc 1 683 6 view .LVU399
 1308 0004 202B     		cmp	r3, #32
 1309 0006 21D1     		bne	.L95
 679:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   HAL_StatusTypeDef status;
 1310              		.loc 1 679 1 view .LVU400
 1311 0008 10B5     		push	{r4, lr}
 1312              	.LCFI13:
 1313              		.cfi_def_cfa_offset 8
 1314              		.cfi_offset 4, -8
 1315              		.cfi_offset 14, -4
 1316 000a 0446     		mov	r4, r0
 685:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 1317              		.loc 1 685 5 is_stmt 1 view .LVU401
 685:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 1318              		.loc 1 685 8 is_stmt 0 view .LVU402
 1319 000c 002A     		cmp	r2, #0
 1320 000e 18BF     		it	ne
 1321 0010 0029     		cmpne	r1, #0
 1322 0012 01D1     		bne	.L102
 687:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     }
 1323              		.loc 1 687 14 view .LVU403
 1324 0014 0120     		movs	r0, #1
 1325              	.LVL105:
 1326              	.L92:
 720:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 1327              		.loc 1 720 1 view .LVU404
 1328 0016 10BD     		pop	{r4, pc}
 1329              	.LVL106:
ARM GAS  /tmp/ccKzSNq3.s 			page 64


 1330              	.L102:
 691:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 1331              		.loc 1 691 5 is_stmt 1 view .LVU405
 691:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 1332              		.loc 1 691 26 is_stmt 0 view .LVU406
 1333 0018 0123     		movs	r3, #1
 1334 001a 0366     		str	r3, [r0, #96]
 692:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 1335              		.loc 1 692 5 is_stmt 1 view .LVU407
 692:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 1336              		.loc 1 692 24 is_stmt 0 view .LVU408
 1337 001c 0023     		movs	r3, #0
 1338 001e 4366     		str	r3, [r0, #100]
 694:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 1339              		.loc 1 694 5 is_stmt 1 view .LVU409
 694:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 1340              		.loc 1 694 15 is_stmt 0 view .LVU410
 1341 0020 FFF7FEFF 		bl	UART_Start_Receive_DMA
 1342              	.LVL107:
 697:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 1343              		.loc 1 697 5 is_stmt 1 view .LVU411
 697:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****     {
 1344              		.loc 1 697 8 is_stmt 0 view .LVU412
 1345 0024 0028     		cmp	r0, #0
 1346 0026 F6D1     		bne	.L92
 699:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       {
 1347              		.loc 1 699 7 is_stmt 1 view .LVU413
 699:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       {
 1348              		.loc 1 699 16 is_stmt 0 view .LVU414
 1349 0028 236E     		ldr	r3, [r4, #96]
 699:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       {
 1350              		.loc 1 699 10 view .LVU415
 1351 002a 012B     		cmp	r3, #1
 1352 002c 01D0     		beq	.L103
 710:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 1353              		.loc 1 710 16 view .LVU416
 1354 002e 0120     		movs	r0, #1
 1355              	.LVL108:
 714:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 1356              		.loc 1 714 5 is_stmt 1 view .LVU417
 714:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 1357              		.loc 1 714 12 is_stmt 0 view .LVU418
 1358 0030 F1E7     		b	.L92
 1359              	.LVL109:
 1360              	.L103:
 701:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****         ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 1361              		.loc 1 701 9 is_stmt 1 view .LVU419
 1362 0032 2368     		ldr	r3, [r4]
 1363 0034 1022     		movs	r2, #16
 1364 0036 1A62     		str	r2, [r3, #32]
 1365              	.L94:
 702:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 1366              		.loc 1 702 9 discriminator 1 view .LVU420
 1367              	.LBB57:
 702:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 1368              		.loc 1 702 9 discriminator 1 view .LVU421
 702:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
ARM GAS  /tmp/ccKzSNq3.s 			page 65


 1369              		.loc 1 702 9 discriminator 1 view .LVU422
 702:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 1370              		.loc 1 702 9 discriminator 1 view .LVU423
 1371 0038 2268     		ldr	r2, [r4]
 1372              	.LVL110:
 1373              	.LBB58:
 1374              	.LBI58:
1068:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1375              		.loc 2 1068 31 discriminator 1 view .LVU424
 1376              	.LBB59:
1070:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 1377              		.loc 2 1070 5 discriminator 1 view .LVU425
1072:../Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1378              		.loc 2 1072 4 discriminator 1 view .LVU426
 1379              		.syntax unified
 1380              	@ 1072 "../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1381 003a 52E8003F 		ldrex r3, [r2]
 1382              	@ 0 "" 2
 1383              	.LVL111:
1073:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1384              		.loc 2 1073 4 discriminator 1 view .LVU427
1073:../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1385              		.loc 2 1073 4 is_stmt 0 discriminator 1 view .LVU428
 1386              		.thumb
 1387              		.syntax unified
 1388              	.LBE59:
 1389              	.LBE58:
 702:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 1390              		.loc 1 702 9 discriminator 1 view .LVU429
 1391 003e 43F01003 		orr	r3, r3, #16
 1392              	.LVL112:
 702:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 1393              		.loc 1 702 9 is_stmt 1 discriminator 1 view .LVU430
 1394              	.LBB60:
 1395              	.LBI60:
1119:../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1396              		.loc 2 1119 31 discriminator 1 view .LVU431
 1397              	.LBB61:
1121:../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 1398              		.loc 2 1121 4 discriminator 1 view .LVU432
1123:../Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1399              		.loc 2 1123 4 discriminator 1 view .LVU433
 1400              		.syntax unified
 1401              	@ 1123 "../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1402 0042 42E80031 		strex r1, r3, [r2]
 1403              	@ 0 "" 2
 1404              	.LVL113:
 1405              		.loc 2 1124 4 discriminator 1 view .LVU434
 1406              		.loc 2 1124 4 is_stmt 0 discriminator 1 view .LVU435
 1407              		.thumb
 1408              		.syntax unified
 1409              	.LBE61:
 1410              	.LBE60:
 702:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 1411              		.loc 1 702 9 discriminator 1 view .LVU436
 1412 0046 0029     		cmp	r1, #0
 1413 0048 F6D1     		bne	.L94
ARM GAS  /tmp/ccKzSNq3.s 			page 66


 1414 004a E4E7     		b	.L92
 1415              	.LVL114:
 1416              	.L95:
 1417              	.LCFI14:
 1418              		.cfi_def_cfa_offset 0
 1419              		.cfi_restore 4
 1420              		.cfi_restore 14
 702:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****       }
 1421              		.loc 1 702 9 discriminator 1 view .LVU437
 1422              	.LBE57:
 718:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   }
 1423              		.loc 1 718 12 view .LVU438
 1424 004c 0220     		movs	r0, #2
 1425              	.LVL115:
 720:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 1426              		.loc 1 720 1 view .LVU439
 1427 004e 7047     		bx	lr
 1428              		.cfi_endproc
 1429              	.LFE150:
 1431              		.section	.text.HAL_UARTEx_GetRxEventType,"ax",%progbits
 1432              		.align	1
 1433              		.global	HAL_UARTEx_GetRxEventType
 1434              		.syntax unified
 1435              		.thumb
 1436              		.thumb_func
 1437              		.fpu fpv5-d16
 1439              	HAL_UARTEx_GetRxEventType:
 1440              	.LVL116:
 1441              	.LFB151:
 747:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c ****   /* Return Rx Event type value, as stored in UART handle */
 1442              		.loc 1 747 1 is_stmt 1 view -0
 1443              		.cfi_startproc
 1444              		@ args = 0, pretend = 0, frame = 0
 1445              		@ frame_needed = 0, uses_anonymous_args = 0
 1446              		@ link register save eliminated.
 749:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 1447              		.loc 1 749 3 view .LVU441
 749:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** }
 1448              		.loc 1 749 15 is_stmt 0 view .LVU442
 1449 0000 406E     		ldr	r0, [r0, #100]
 1450              	.LVL117:
 750:../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart_ex.c **** 
 1451              		.loc 1 750 1 view .LVU443
 1452 0002 7047     		bx	lr
 1453              		.cfi_endproc
 1454              	.LFE151:
 1456              		.text
 1457              	.Letext0:
 1458              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 1459              		.file 4 "../Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f767xx.h"
 1460              		.file 5 "../Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 1461              		.file 6 "../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 1462              		.file 7 "../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 1463              		.file 8 "../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 1464              		.file 9 "../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart_ex.h"
 1465              		.file 10 "../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
ARM GAS  /tmp/ccKzSNq3.s 			page 67


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f7xx_hal_uart_ex.c
     /tmp/ccKzSNq3.s:17     .text.UARTEx_Wakeup_AddressConfig:0000000000000000 $t
     /tmp/ccKzSNq3.s:24     .text.UARTEx_Wakeup_AddressConfig:0000000000000000 UARTEx_Wakeup_AddressConfig
     /tmp/ccKzSNq3.s:64     .text.HAL_RS485Ex_Init:0000000000000000 $t
     /tmp/ccKzSNq3.s:71     .text.HAL_RS485Ex_Init:0000000000000000 HAL_RS485Ex_Init
     /tmp/ccKzSNq3.s:208    .text.HAL_RS485Ex_Init:0000000000000080 $d
     /tmp/ccKzSNq3.s:213    .text.HAL_UARTEx_EnableClockStopMode:0000000000000000 $t
     /tmp/ccKzSNq3.s:220    .text.HAL_UARTEx_EnableClockStopMode:0000000000000000 HAL_UARTEx_EnableClockStopMode
     /tmp/ccKzSNq3.s:319    .text.HAL_UARTEx_DisableClockStopMode:0000000000000000 $t
     /tmp/ccKzSNq3.s:326    .text.HAL_UARTEx_DisableClockStopMode:0000000000000000 HAL_UARTEx_DisableClockStopMode
     /tmp/ccKzSNq3.s:424    .text.HAL_MultiProcessorEx_AddressLength_Set:0000000000000000 $t
     /tmp/ccKzSNq3.s:431    .text.HAL_MultiProcessorEx_AddressLength_Set:0000000000000000 HAL_MultiProcessorEx_AddressLength_Set
     /tmp/ccKzSNq3.s:495    .text.HAL_UARTEx_StopModeWakeUpSourceConfig:0000000000000000 $t
     /tmp/ccKzSNq3.s:502    .text.HAL_UARTEx_StopModeWakeUpSourceConfig:0000000000000000 HAL_UARTEx_StopModeWakeUpSourceConfig
     /tmp/ccKzSNq3.s:627    .text.HAL_UARTEx_EnableStopMode:0000000000000000 $t
     /tmp/ccKzSNq3.s:634    .text.HAL_UARTEx_EnableStopMode:0000000000000000 HAL_UARTEx_EnableStopMode
     /tmp/ccKzSNq3.s:726    .text.HAL_UARTEx_DisableStopMode:0000000000000000 $t
     /tmp/ccKzSNq3.s:733    .text.HAL_UARTEx_DisableStopMode:0000000000000000 HAL_UARTEx_DisableStopMode
     /tmp/ccKzSNq3.s:825    .text.HAL_UARTEx_ReceiveToIdle:0000000000000000 $t
     /tmp/ccKzSNq3.s:832    .text.HAL_UARTEx_ReceiveToIdle:0000000000000000 HAL_UARTEx_ReceiveToIdle
     /tmp/ccKzSNq3.s:1146   .text.HAL_UARTEx_ReceiveToIdle_IT:0000000000000000 $t
     /tmp/ccKzSNq3.s:1153   .text.HAL_UARTEx_ReceiveToIdle_IT:0000000000000000 HAL_UARTEx_ReceiveToIdle_IT
     /tmp/ccKzSNq3.s:1289   .text.HAL_UARTEx_ReceiveToIdle_DMA:0000000000000000 $t
     /tmp/ccKzSNq3.s:1296   .text.HAL_UARTEx_ReceiveToIdle_DMA:0000000000000000 HAL_UARTEx_ReceiveToIdle_DMA
     /tmp/ccKzSNq3.s:1432   .text.HAL_UARTEx_GetRxEventType:0000000000000000 $t
     /tmp/ccKzSNq3.s:1439   .text.HAL_UARTEx_GetRxEventType:0000000000000000 HAL_UARTEx_GetRxEventType

UNDEFINED SYMBOLS
UART_SetConfig
UART_CheckIdleState
HAL_UART_MspInit
UART_AdvFeatureConfig
HAL_GetTick
UART_WaitOnFlagUntilTimeout
UART_Start_Receive_IT
UART_Start_Receive_DMA
