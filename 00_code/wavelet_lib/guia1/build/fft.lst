ARM GAS  /tmp/ccVulUFC.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"fft.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.fft,"ax",%progbits
  17              		.align	1
  18              		.global	fft
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	fft:
  26              	.LVL0:
  27              	.LFB0:
  28              		.file 1 "../Core/Src/fft.c"
   1:../Core/Src/fft.c **** #include "fft.h"
   2:../Core/Src/fft.c **** 
   3:../Core/Src/fft.c **** #include "errdef.h"
   4:../Core/Src/fft.c **** 
   5:../Core/Src/fft.c **** #include <math.h> // -lm flag needed
   6:../Core/Src/fft.c **** 
   7:../Core/Src/fft.c **** /**
   8:../Core/Src/fft.c ****  * @brief   Applies fft over an time-series array
   9:../Core/Src/fft.c ****  * 					Will be executed recursively through the stages 
  10:../Core/Src/fft.c ****  * 						The number of stages are equal to --------------------------------------
  11:../Core/Src/fft.c ****  * 
  12:../Core/Src/fft.c ****  * @param   y_io - time-series array, returns by reference 
  13:../Core/Src/fft.c ****  * 										in the frequency domain
  14:../Core/Src/fft.c ****  * @param	N_i - length of the array
  15:../Core/Src/fft.c ****  * @param 	aux_i - auxiliary array with the same size of y_io
  16:../Core/Src/fft.c ****  * 										used to point to the odd and even arrays
  17:../Core/Src/fft.c ****  * 
  18:../Core/Src/fft.c ****  * @retval	success
  19:../Core/Src/fft.c ****  * */
  20:../Core/Src/fft.c **** uint8_t fft(complex *y_io, uint32_t N_i, complex *aux_i)
  21:../Core/Src/fft.c **** {
  29              		.loc 1 21 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 16
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		.loc 1 21 1 is_stmt 0 view .LVU1
  34 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 24
  37              		.cfi_offset 4, -24
ARM GAS  /tmp/ccVulUFC.s 			page 2


  38              		.cfi_offset 5, -20
  39              		.cfi_offset 6, -16
  40              		.cfi_offset 7, -12
  41              		.cfi_offset 8, -8
  42              		.cfi_offset 14, -4
  43 0004 2DED048B 		vpush.64	{d8, d9}
  44              	.LCFI1:
  45              		.cfi_def_cfa_offset 40
  46              		.cfi_offset 80, -40
  47              		.cfi_offset 81, -36
  48              		.cfi_offset 82, -32
  49              		.cfi_offset 83, -28
  50 0008 84B0     		sub	sp, sp, #16
  51              	.LCFI2:
  52              		.cfi_def_cfa_offset 56
  53 000a 0546     		mov	r5, r0
  54 000c 08EE901A 		vmov	s17, r1	@ int
  55 0010 1746     		mov	r7, r2
  22:../Core/Src/fft.c ****     complex z, w;
  56              		.loc 1 22 5 is_stmt 1 view .LVU2
  23:../Core/Src/fft.c ****     uint32_t half_N_i = (N_i >> 1);         /* N_i/2 */
  57              		.loc 1 23 5 view .LVU3
  58              		.loc 1 23 14 is_stmt 0 view .LVU4
  59 0012 4E08     		lsrs	r6, r1, #1
  60              	.LVL1:
  24:../Core/Src/fft.c **** 
  25:../Core/Src/fft.c ****     complex *vo = aux_i;                    /* even array points to first position */ 
  61              		.loc 1 25 5 is_stmt 1 view .LVU5
  26:../Core/Src/fft.c ****     complex *ve = aux_i + half_N_i;         /* odd  array points to middle position */
  62              		.loc 1 26 5 view .LVU6
  63              		.loc 1 26 14 is_stmt 0 view .LVU7
  64 0014 02EBC608 		add	r8, r2, r6, lsl #3
  65              	.LVL2:
  27:../Core/Src/fft.c **** 
  28:../Core/Src/fft.c ****     for(int k = 0; k < half_N_i; k++) 
  66              		.loc 1 28 5 is_stmt 1 view .LVU8
  67              	.LBB2:
  68              		.loc 1 28 9 view .LVU9
  69              		.loc 1 28 13 is_stmt 0 view .LVU10
  70 0018 0023     		movs	r3, #0
  71              		.loc 1 28 5 view .LVU11
  72 001a 10E0     		b	.L2
  73              	.LVL3:
  74              	.L3:
  29:../Core/Src/fft.c ****     {
  30:../Core/Src/fft.c ****         /* ve[k] = y_io[k * 2]; */
  31:../Core/Src/fft.c ****         ve[k] = y_io[k << 1];
  75              		.loc 1 31 9 is_stmt 1 discriminator 3 view .LVU12
  76              		.loc 1 31 24 is_stmt 0 discriminator 3 view .LVU13
  77 001c 5C00     		lsls	r4, r3, #1
  78              		.loc 1 31 21 discriminator 3 view .LVU14
  79 001e 05EB0311 		add	r1, r5, r3, lsl #4
  80              		.loc 1 31 11 discriminator 3 view .LVU15
  81 0022 08EBC302 		add	r2, r8, r3, lsl #3
  82              		.loc 1 31 15 discriminator 3 view .LVU16
  83 0026 03C9     		ldm	r1, {r0, r1}
  84 0028 82E80300 		stm	r2, {r0, r1}
ARM GAS  /tmp/ccVulUFC.s 			page 3


  32:../Core/Src/fft.c ****         vo[k] = y_io[(k << 1) + 1];
  85              		.loc 1 32 9 is_stmt 1 discriminator 3 view .LVU17
  86              		.loc 1 32 21 is_stmt 0 discriminator 3 view .LVU18
  87 002c 611C     		adds	r1, r4, #1
  88 002e 05EBC101 		add	r1, r5, r1, lsl #3
  89              		.loc 1 32 11 discriminator 3 view .LVU19
  90 0032 07EBC302 		add	r2, r7, r3, lsl #3
  91              		.loc 1 32 15 discriminator 3 view .LVU20
  92 0036 03C9     		ldm	r1, {r0, r1}
  93 0038 82E80300 		stm	r2, {r0, r1}
  28:../Core/Src/fft.c ****     {
  94              		.loc 1 28 34 is_stmt 1 discriminator 3 view .LVU21
  28:../Core/Src/fft.c ****     {
  95              		.loc 1 28 35 is_stmt 0 discriminator 3 view .LVU22
  96 003c 0133     		adds	r3, r3, #1
  97              	.LVL4:
  98              	.L2:
  28:../Core/Src/fft.c ****     {
  99              		.loc 1 28 20 is_stmt 1 discriminator 1 view .LVU23
  28:../Core/Src/fft.c ****     {
 100              		.loc 1 28 5 is_stmt 0 discriminator 1 view .LVU24
 101 003e B342     		cmp	r3, r6
 102 0040 ECD3     		bcc	.L3
 103              	.LBE2:
  33:../Core/Src/fft.c ****     }
  34:../Core/Src/fft.c **** 
  35:../Core/Src/fft.c ****     /* not last stage? */
  36:../Core/Src/fft.c ****     if(half_N_i > 1)
 104              		.loc 1 36 5 is_stmt 1 view .LVU25
 105              		.loc 1 36 7 is_stmt 0 view .LVU26
 106 0042 012E     		cmp	r6, #1
 107 0044 01D8     		bhi	.L8
 108              	.LVL5:
 109              	.L4:
 110              	.LBB3:
  28:../Core/Src/fft.c ****     {
 111              		.loc 1 28 13 discriminator 1 view .LVU27
 112 0046 0024     		movs	r4, #0
 113 0048 5EE0     		b	.L5
 114              	.LVL6:
 115              	.L8:
  28:../Core/Src/fft.c ****     {
 116              		.loc 1 28 13 discriminator 1 view .LVU28
 117              	.LBE3:
  37:../Core/Src/fft.c ****     {
  38:../Core/Src/fft.c ****         fft(ve, half_N_i, y_io);		/* FFT on even-indexed elements of y_io[] */
 118              		.loc 1 38 9 is_stmt 1 view .LVU29
 119 004a 2A46     		mov	r2, r5
 120 004c 3146     		mov	r1, r6
 121 004e 4046     		mov	r0, r8
 122 0050 FFF7FEFF 		bl	fft
 123              	.LVL7:
  39:../Core/Src/fft.c ****         fft(vo, half_N_i, y_io);		/* FFT on odd-indexed elements of y_io[] */
 124              		.loc 1 39 9 view .LVU30
 125 0054 2A46     		mov	r2, r5
 126 0056 3146     		mov	r1, r6
 127 0058 3846     		mov	r0, r7
ARM GAS  /tmp/ccVulUFC.s 			page 4


 128 005a FFF7FEFF 		bl	fft
 129              	.LVL8:
 130 005e F2E7     		b	.L4
 131              	.LVL9:
 132              	.L6:
 133              	.LBB4:
  40:../Core/Src/fft.c ****     }
  41:../Core/Src/fft.c **** 
  42:../Core/Src/fft.c ****     /* apply twiddle factor of this stage and 2-pt DFT*/
  43:../Core/Src/fft.c ****     for(int m = 0; m < (half_N_i + 1); m++) 
  44:../Core/Src/fft.c ****     {
  45:../Core/Src/fft.c ****         /* Twiddle factor:
  46:../Core/Src/fft.c ****             w = exp(-2i*PI*m/N_i):
  47:../Core/Src/fft.c ****             	Re(e^-ix) = cos(x)
  48:../Core/Src/fft.c ****             	Im(e^-ix) = -sen(x) */
  49:../Core/Src/fft.c ****         w.Re =  cos((2 * M_PI * m) / (double)N_i);
 134              		.loc 1 49 9 discriminator 3 view .LVU31
 135              		.loc 1 49 31 is_stmt 0 discriminator 3 view .LVU32
 136 0060 07EE904A 		vmov	s15, r4	@ int
 137 0064 B8EEE77B 		vcvt.f64.s32	d7, s15
 138 0068 9FED2D6B 		vldr.64	d6, .L9
 139 006c 27EE067B 		vmul.f64	d7, d7, d6
 140              		.loc 1 49 38 discriminator 3 view .LVU33
 141 0070 B8EE686B 		vcvt.f64.u32	d6, s17
 142              		.loc 1 49 17 discriminator 3 view .LVU34
 143 0074 87EE069B 		vdiv.f64	d9, d7, d6
 144 0078 B0EE490B 		vmov.f64	d0, d9
 145 007c FFF7FEFF 		bl	cos
 146              	.LVL10:
 147 0080 B7EEC08B 		vcvt.f32.f64	s16, d0
 148              		.loc 1 49 14 discriminator 3 view .LVU35
 149 0084 8DED008A 		vstr.32	s16, [sp]
  50:../Core/Src/fft.c ****         w.Im = -sin((2 * M_PI * m) / (double)N_i);
 150              		.loc 1 50 9 is_stmt 1 discriminator 3 view .LVU36
 151              		.loc 1 50 17 is_stmt 0 discriminator 3 view .LVU37
 152 0088 B0EE490B 		vmov.f64	d0, d9
 153 008c FFF7FEFF 		bl	sin
 154              	.LVL11:
 155 0090 B7EEC00B 		vcvt.f32.f64	s0, d0
 156              		.loc 1 50 14 discriminator 3 view .LVU38
 157 0094 F1EE407A 		vneg.f32	s15, s0
 158 0098 CDED017A 		vstr.32	s15, [sp, #4]
  51:../Core/Src/fft.c **** 
  52:../Core/Src/fft.c ****         /* w * vo[m] */
  53:../Core/Src/fft.c ****         z.Re = complex_mul_re(w.Re, w.Im, vo[m].Re, vo[m].Im);   /* Re(w*vo[m]) */
 159              		.loc 1 53 9 is_stmt 1 discriminator 3 view .LVU39
 160              		.loc 1 53 16 is_stmt 0 discriminator 3 view .LVU40
 161 009c 07EBC403 		add	r3, r7, r4, lsl #3
 162 00a0 D3ED006A 		vldr.32	s13, [r3]
 163 00a4 28EE267A 		vmul.f32	s14, s16, s13
 164 00a8 93ED010A 		vldr.32	s0, [r3, #4]
 165 00ac 27EE806A 		vmul.f32	s12, s15, s0
 166 00b0 37EE467A 		vsub.f32	s14, s14, s12
 167              		.loc 1 53 14 discriminator 3 view .LVU41
 168 00b4 8DED027A 		vstr.32	s14, [sp, #8]
  54:../Core/Src/fft.c ****         z.Im = complex_mul_im(w.Re, w.Im, vo[m].Re, vo[m].Im);   /* Im(w*vo[m]) */
 169              		.loc 1 54 9 is_stmt 1 discriminator 3 view .LVU42
ARM GAS  /tmp/ccVulUFC.s 			page 5


 170              		.loc 1 54 16 is_stmt 0 discriminator 3 view .LVU43
 171 00b8 28EE000A 		vmul.f32	s0, s16, s0
 172 00bc 67EEA67A 		vmul.f32	s15, s15, s13
 173 00c0 30EE270A 		vadd.f32	s0, s0, s15
 174              		.loc 1 54 14 discriminator 3 view .LVU44
 175 00c4 8DED030A 		vstr.32	s0, [sp, #12]
  55:../Core/Src/fft.c **** 
  56:../Core/Src/fft.c ****         /* out1 = ve + w(m)*vo */ 
  57:../Core/Src/fft.c ****         y_io[m].Re = ve[m].Re + z.Re;
 176              		.loc 1 57 9 is_stmt 1 discriminator 3 view .LVU45
 177              		.loc 1 57 24 is_stmt 0 discriminator 3 view .LVU46
 178 00c8 08EBC402 		add	r2, r8, r4, lsl #3
 179              		.loc 1 57 27 discriminator 3 view .LVU47
 180 00cc D2ED007A 		vldr.32	s15, [r2]
 181              		.loc 1 57 13 discriminator 3 view .LVU48
 182 00d0 05EBC403 		add	r3, r5, r4, lsl #3
 183              		.loc 1 57 31 discriminator 3 view .LVU49
 184 00d4 77EE277A 		vadd.f32	s15, s14, s15
 185              		.loc 1 57 20 discriminator 3 view .LVU50
 186 00d8 C3ED007A 		vstr.32	s15, [r3]
  58:../Core/Src/fft.c ****         y_io[m].Im = ve[m].Im + z.Im;
 187              		.loc 1 58 9 is_stmt 1 discriminator 3 view .LVU51
 188              		.loc 1 58 27 is_stmt 0 discriminator 3 view .LVU52
 189 00dc D2ED017A 		vldr.32	s15, [r2, #4]
 190              		.loc 1 58 31 discriminator 3 view .LVU53
 191 00e0 70EE277A 		vadd.f32	s15, s0, s15
 192              		.loc 1 58 20 discriminator 3 view .LVU54
 193 00e4 C3ED017A 		vstr.32	s15, [r3, #4]
  59:../Core/Src/fft.c **** 
  60:../Core/Src/fft.c ****         /* out2 = ve - w(m+(N_i/2))*vo */ 
  61:../Core/Src/fft.c ****         y_io[m + half_N_i].Re = ve[m].Re - z.Re;
 194              		.loc 1 61 9 is_stmt 1 discriminator 3 view .LVU55
 195              		.loc 1 61 38 is_stmt 0 discriminator 3 view .LVU56
 196 00e8 D2ED007A 		vldr.32	s15, [r2]
 197              		.loc 1 61 16 discriminator 3 view .LVU57
 198 00ec A319     		adds	r3, r4, r6
 199              		.loc 1 61 13 discriminator 3 view .LVU58
 200 00ee 05EBC303 		add	r3, r5, r3, lsl #3
 201              		.loc 1 61 42 discriminator 3 view .LVU59
 202 00f2 37EEC77A 		vsub.f32	s14, s15, s14
 203              		.loc 1 61 31 discriminator 3 view .LVU60
 204 00f6 83ED007A 		vstr.32	s14, [r3]
  62:../Core/Src/fft.c ****         y_io[m + half_N_i].Im = ve[m].Im - z.Im;
 205              		.loc 1 62 9 is_stmt 1 discriminator 3 view .LVU61
 206              		.loc 1 62 38 is_stmt 0 discriminator 3 view .LVU62
 207 00fa 92ED018A 		vldr.32	s16, [r2, #4]
 208              		.loc 1 62 42 discriminator 3 view .LVU63
 209 00fe 38EE400A 		vsub.f32	s0, s16, s0
 210              		.loc 1 62 31 discriminator 3 view .LVU64
 211 0102 83ED010A 		vstr.32	s0, [r3, #4]
  43:../Core/Src/fft.c ****     {
 212              		.loc 1 43 40 is_stmt 1 discriminator 3 view .LVU65
  43:../Core/Src/fft.c ****     {
 213              		.loc 1 43 41 is_stmt 0 discriminator 3 view .LVU66
 214 0106 0134     		adds	r4, r4, #1
 215              	.LVL12:
 216              	.L5:
ARM GAS  /tmp/ccVulUFC.s 			page 6


  43:../Core/Src/fft.c ****     {
 217              		.loc 1 43 20 is_stmt 1 discriminator 1 view .LVU67
  43:../Core/Src/fft.c ****     {
 218              		.loc 1 43 34 is_stmt 0 discriminator 1 view .LVU68
 219 0108 731C     		adds	r3, r6, #1
  43:../Core/Src/fft.c ****     {
 220              		.loc 1 43 5 discriminator 1 view .LVU69
 221 010a A342     		cmp	r3, r4
 222 010c A8D8     		bhi	.L6
 223              	.LBE4:
  63:../Core/Src/fft.c ****     }
  64:../Core/Src/fft.c **** 
  65:../Core/Src/fft.c ****     return _EXIT_SUCCESS;
 224              		.loc 1 65 5 is_stmt 1 view .LVU70
  66:../Core/Src/fft.c **** }
 225              		.loc 1 66 1 is_stmt 0 view .LVU71
 226 010e 0020     		movs	r0, #0
 227 0110 04B0     		add	sp, sp, #16
 228              	.LCFI3:
 229              		.cfi_def_cfa_offset 40
 230              		@ sp needed
 231 0112 BDEC048B 		vldm	sp!, {d8-d9}
 232              	.LCFI4:
 233              		.cfi_restore 82
 234              		.cfi_restore 83
 235              		.cfi_restore 80
 236              		.cfi_restore 81
 237              		.cfi_def_cfa_offset 24
 238 0116 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 239              	.LVL13:
 240              	.L10:
 241              		.loc 1 66 1 view .LVU72
 242 011a 00BFAFF3 		.align	3
 242      0080
 243              	.L9:
 244 0120 182D4454 		.word	1413754136
 245 0124 FB211940 		.word	1075388923
 246              		.cfi_endproc
 247              	.LFE0:
 249              		.section	.text.ifft,"ax",%progbits
 250              		.align	1
 251              		.global	ifft
 252              		.syntax unified
 253              		.thumb
 254              		.thumb_func
 255              		.fpu fpv5-d16
 257              	ifft:
 258              	.LVL14:
 259              	.LFB1:
  67:../Core/Src/fft.c **** 
  68:../Core/Src/fft.c **** /**
  69:../Core/Src/fft.c ****  * @brief   Applies ifft over an frequency-series array
  70:../Core/Src/fft.c ****  *                  Will be executed recursively through the stages 
  71:../Core/Src/fft.c ****  *                      The number of stages are equal to --------------------------------------
  72:../Core/Src/fft.c ****  * 
  73:../Core/Src/fft.c ****  * @param   y_io - frequency-series array, returns by reference 
  74:../Core/Src/fft.c ****  *                                      in the time domain
ARM GAS  /tmp/ccVulUFC.s 			page 7


  75:../Core/Src/fft.c ****  * @param   N_i - length of the array
  76:../Core/Src/fft.c ****  * @param   aux_i - auxiliary array with the same size of y_io
  77:../Core/Src/fft.c ****  *                                      used to point to the odd and even arrays
  78:../Core/Src/fft.c ****  * 
  79:../Core/Src/fft.c ****  * @retval  success
  80:../Core/Src/fft.c ****  * */
  81:../Core/Src/fft.c **** uint8_t ifft(complex *y_io, uint32_t N_i, complex *aux_i)
  82:../Core/Src/fft.c **** {
 260              		.loc 1 82 1 is_stmt 1 view -0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 16
 263              		@ frame_needed = 0, uses_anonymous_args = 0
 264              		.loc 1 82 1 is_stmt 0 view .LVU74
 265 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 266              	.LCFI5:
 267              		.cfi_def_cfa_offset 24
 268              		.cfi_offset 4, -24
 269              		.cfi_offset 5, -20
 270              		.cfi_offset 6, -16
 271              		.cfi_offset 7, -12
 272              		.cfi_offset 8, -8
 273              		.cfi_offset 14, -4
 274 0004 2DED048B 		vpush.64	{d8, d9}
 275              	.LCFI6:
 276              		.cfi_def_cfa_offset 40
 277              		.cfi_offset 80, -40
 278              		.cfi_offset 81, -36
 279              		.cfi_offset 82, -32
 280              		.cfi_offset 83, -28
 281 0008 84B0     		sub	sp, sp, #16
 282              	.LCFI7:
 283              		.cfi_def_cfa_offset 56
 284 000a 0546     		mov	r5, r0
 285 000c 08EE901A 		vmov	s17, r1	@ int
 286 0010 1746     		mov	r7, r2
  83:../Core/Src/fft.c ****     complex z, w;
 287              		.loc 1 83 5 is_stmt 1 view .LVU75
  84:../Core/Src/fft.c ****     uint32_t half_N_i = (N_i >> 1);         /* N_i/2 */
 288              		.loc 1 84 5 view .LVU76
 289              		.loc 1 84 14 is_stmt 0 view .LVU77
 290 0012 4E08     		lsrs	r6, r1, #1
 291              	.LVL15:
  85:../Core/Src/fft.c **** 
  86:../Core/Src/fft.c ****     complex *vo = aux_i;                    /* even array points to first position */ 
 292              		.loc 1 86 5 is_stmt 1 view .LVU78
  87:../Core/Src/fft.c ****     complex *ve = aux_i + half_N_i;         /* odd  array points to middle position */
 293              		.loc 1 87 5 view .LVU79
 294              		.loc 1 87 14 is_stmt 0 view .LVU80
 295 0014 02EBC608 		add	r8, r2, r6, lsl #3
 296              	.LVL16:
  88:../Core/Src/fft.c ****     
  89:../Core/Src/fft.c ****     for(int k = 0; k < half_N_i; k++) 
 297              		.loc 1 89 5 is_stmt 1 view .LVU81
 298              	.LBB5:
 299              		.loc 1 89 9 view .LVU82
 300              		.loc 1 89 13 is_stmt 0 view .LVU83
 301 0018 0023     		movs	r3, #0
ARM GAS  /tmp/ccVulUFC.s 			page 8


 302              		.loc 1 89 5 view .LVU84
 303 001a 10E0     		b	.L12
 304              	.LVL17:
 305              	.L13:
  90:../Core/Src/fft.c ****     {
  91:../Core/Src/fft.c ****         /* ve[k] = y_io[k * 2]; */
  92:../Core/Src/fft.c ****         ve[k] = y_io[k << 1];
 306              		.loc 1 92 9 is_stmt 1 discriminator 3 view .LVU85
 307              		.loc 1 92 24 is_stmt 0 discriminator 3 view .LVU86
 308 001c 5C00     		lsls	r4, r3, #1
 309              		.loc 1 92 21 discriminator 3 view .LVU87
 310 001e 05EB0311 		add	r1, r5, r3, lsl #4
 311              		.loc 1 92 11 discriminator 3 view .LVU88
 312 0022 08EBC302 		add	r2, r8, r3, lsl #3
 313              		.loc 1 92 15 discriminator 3 view .LVU89
 314 0026 03C9     		ldm	r1, {r0, r1}
 315 0028 82E80300 		stm	r2, {r0, r1}
  93:../Core/Src/fft.c ****         vo[k] = y_io[(k << 1) + 1];
 316              		.loc 1 93 9 is_stmt 1 discriminator 3 view .LVU90
 317              		.loc 1 93 21 is_stmt 0 discriminator 3 view .LVU91
 318 002c 611C     		adds	r1, r4, #1
 319 002e 05EBC101 		add	r1, r5, r1, lsl #3
 320              		.loc 1 93 11 discriminator 3 view .LVU92
 321 0032 07EBC302 		add	r2, r7, r3, lsl #3
 322              		.loc 1 93 15 discriminator 3 view .LVU93
 323 0036 03C9     		ldm	r1, {r0, r1}
 324 0038 82E80300 		stm	r2, {r0, r1}
  89:../Core/Src/fft.c ****     {
 325              		.loc 1 89 34 is_stmt 1 discriminator 3 view .LVU94
  89:../Core/Src/fft.c ****     {
 326              		.loc 1 89 35 is_stmt 0 discriminator 3 view .LVU95
 327 003c 0133     		adds	r3, r3, #1
 328              	.LVL18:
 329              	.L12:
  89:../Core/Src/fft.c ****     {
 330              		.loc 1 89 20 is_stmt 1 discriminator 1 view .LVU96
  89:../Core/Src/fft.c ****     {
 331              		.loc 1 89 5 is_stmt 0 discriminator 1 view .LVU97
 332 003e B342     		cmp	r3, r6
 333 0040 ECD3     		bcc	.L13
 334              	.LBE5:
  94:../Core/Src/fft.c ****     }
  95:../Core/Src/fft.c ****     
  96:../Core/Src/fft.c ****     /* not last stage? */
  97:../Core/Src/fft.c ****     if(half_N_i > 1)
 335              		.loc 1 97 5 is_stmt 1 view .LVU98
 336              		.loc 1 97 7 is_stmt 0 view .LVU99
 337 0042 012E     		cmp	r6, #1
 338 0044 01D8     		bhi	.L18
 339              	.LVL19:
 340              	.L14:
 341              	.LBB6:
  89:../Core/Src/fft.c ****     {
 342              		.loc 1 89 13 discriminator 1 view .LVU100
 343 0046 0024     		movs	r4, #0
 344 0048 5EE0     		b	.L15
 345              	.LVL20:
ARM GAS  /tmp/ccVulUFC.s 			page 9


 346              	.L18:
  89:../Core/Src/fft.c ****     {
 347              		.loc 1 89 13 discriminator 1 view .LVU101
 348              	.LBE6:
  98:../Core/Src/fft.c ****     {
  99:../Core/Src/fft.c ****         ifft(ve, half_N_i, y_io);        /* FFT on even-indexed elements of y_io[] */
 349              		.loc 1 99 9 is_stmt 1 view .LVU102
 350 004a 2A46     		mov	r2, r5
 351 004c 3146     		mov	r1, r6
 352 004e 4046     		mov	r0, r8
 353 0050 FFF7FEFF 		bl	ifft
 354              	.LVL21:
 100:../Core/Src/fft.c ****         ifft(vo, half_N_i, y_io);        /* FFT on odd-indexed elements of y_io[] */
 355              		.loc 1 100 9 view .LVU103
 356 0054 2A46     		mov	r2, r5
 357 0056 3146     		mov	r1, r6
 358 0058 3846     		mov	r0, r7
 359 005a FFF7FEFF 		bl	ifft
 360              	.LVL22:
 361 005e F2E7     		b	.L14
 362              	.LVL23:
 363              	.L16:
 364              	.LBB7:
 101:../Core/Src/fft.c ****     }
 102:../Core/Src/fft.c ****     
 103:../Core/Src/fft.c ****     /* apply twiddle factor of this stage and 2-pt DFT*/
 104:../Core/Src/fft.c ****     for(int m = 0; m < (half_N_i + 1); m++) 
 105:../Core/Src/fft.c ****     {
 106:../Core/Src/fft.c ****         w.Re =  cos((2 * M_PI * m) / (double)N_i);
 365              		.loc 1 106 9 discriminator 3 view .LVU104
 366              		.loc 1 106 31 is_stmt 0 discriminator 3 view .LVU105
 367 0060 07EE904A 		vmov	s15, r4	@ int
 368 0064 B8EEE77B 		vcvt.f64.s32	d7, s15
 369 0068 9FED2D6B 		vldr.64	d6, .L19
 370 006c 27EE067B 		vmul.f64	d7, d7, d6
 371              		.loc 1 106 38 discriminator 3 view .LVU106
 372 0070 B8EE686B 		vcvt.f64.u32	d6, s17
 373              		.loc 1 106 17 discriminator 3 view .LVU107
 374 0074 87EE069B 		vdiv.f64	d9, d7, d6
 375 0078 B0EE490B 		vmov.f64	d0, d9
 376 007c FFF7FEFF 		bl	cos
 377              	.LVL24:
 378 0080 B7EEC08B 		vcvt.f32.f64	s16, d0
 379              		.loc 1 106 14 discriminator 3 view .LVU108
 380 0084 8DED008A 		vstr.32	s16, [sp]
 107:../Core/Src/fft.c ****         w.Im = -sin((2 * M_PI * m) / (double)N_i);
 381              		.loc 1 107 9 is_stmt 1 discriminator 3 view .LVU109
 382              		.loc 1 107 17 is_stmt 0 discriminator 3 view .LVU110
 383 0088 B0EE490B 		vmov.f64	d0, d9
 384 008c FFF7FEFF 		bl	sin
 385              	.LVL25:
 386 0090 B7EEC00B 		vcvt.f32.f64	s0, d0
 387              		.loc 1 107 14 discriminator 3 view .LVU111
 388 0094 F1EE407A 		vneg.f32	s15, s0
 389 0098 CDED017A 		vstr.32	s15, [sp, #4]
 108:../Core/Src/fft.c **** 
 109:../Core/Src/fft.c ****         /* w * vo[m] */
ARM GAS  /tmp/ccVulUFC.s 			page 10


 110:../Core/Src/fft.c ****         z.Re = complex_mul_re(w.Re, w.Im, vo[m].Re, vo[m].Im);   /* Re(w*vo[m]) */
 390              		.loc 1 110 9 is_stmt 1 discriminator 3 view .LVU112
 391              		.loc 1 110 16 is_stmt 0 discriminator 3 view .LVU113
 392 009c 07EBC403 		add	r3, r7, r4, lsl #3
 393 00a0 D3ED006A 		vldr.32	s13, [r3]
 394 00a4 28EE267A 		vmul.f32	s14, s16, s13
 395 00a8 93ED010A 		vldr.32	s0, [r3, #4]
 396 00ac 27EE806A 		vmul.f32	s12, s15, s0
 397 00b0 37EE467A 		vsub.f32	s14, s14, s12
 398              		.loc 1 110 14 discriminator 3 view .LVU114
 399 00b4 8DED027A 		vstr.32	s14, [sp, #8]
 111:../Core/Src/fft.c ****         z.Im = complex_mul_im(w.Re, w.Im, vo[m].Re, vo[m].Im);   /* Im(w*vo[m]) */
 400              		.loc 1 111 9 is_stmt 1 discriminator 3 view .LVU115
 401              		.loc 1 111 16 is_stmt 0 discriminator 3 view .LVU116
 402 00b8 28EE000A 		vmul.f32	s0, s16, s0
 403 00bc 67EEA67A 		vmul.f32	s15, s15, s13
 404 00c0 30EE270A 		vadd.f32	s0, s0, s15
 405              		.loc 1 111 14 discriminator 3 view .LVU117
 406 00c4 8DED030A 		vstr.32	s0, [sp, #12]
 112:../Core/Src/fft.c **** 
 113:../Core/Src/fft.c ****         /* out1 = ve + w(m)*vo */ 
 114:../Core/Src/fft.c ****         y_io[m].Re = ve[m].Re + z.Re;
 407              		.loc 1 114 9 is_stmt 1 discriminator 3 view .LVU118
 408              		.loc 1 114 24 is_stmt 0 discriminator 3 view .LVU119
 409 00c8 08EBC402 		add	r2, r8, r4, lsl #3
 410              		.loc 1 114 27 discriminator 3 view .LVU120
 411 00cc D2ED007A 		vldr.32	s15, [r2]
 412              		.loc 1 114 13 discriminator 3 view .LVU121
 413 00d0 05EBC403 		add	r3, r5, r4, lsl #3
 414              		.loc 1 114 31 discriminator 3 view .LVU122
 415 00d4 77EE277A 		vadd.f32	s15, s14, s15
 416              		.loc 1 114 20 discriminator 3 view .LVU123
 417 00d8 C3ED007A 		vstr.32	s15, [r3]
 115:../Core/Src/fft.c ****         y_io[m].Im = ve[m].Im + z.Im;
 418              		.loc 1 115 9 is_stmt 1 discriminator 3 view .LVU124
 419              		.loc 1 115 27 is_stmt 0 discriminator 3 view .LVU125
 420 00dc D2ED017A 		vldr.32	s15, [r2, #4]
 421              		.loc 1 115 31 discriminator 3 view .LVU126
 422 00e0 70EE277A 		vadd.f32	s15, s0, s15
 423              		.loc 1 115 20 discriminator 3 view .LVU127
 424 00e4 C3ED017A 		vstr.32	s15, [r3, #4]
 116:../Core/Src/fft.c **** 
 117:../Core/Src/fft.c ****         /* out2 = ve - w(m+(N_i/2))*vo */ 
 118:../Core/Src/fft.c ****         y_io[m + half_N_i].Re = ve[m].Re - z.Re;
 425              		.loc 1 118 9 is_stmt 1 discriminator 3 view .LVU128
 426              		.loc 1 118 38 is_stmt 0 discriminator 3 view .LVU129
 427 00e8 D2ED007A 		vldr.32	s15, [r2]
 428              		.loc 1 118 16 discriminator 3 view .LVU130
 429 00ec A319     		adds	r3, r4, r6
 430              		.loc 1 118 13 discriminator 3 view .LVU131
 431 00ee 05EBC303 		add	r3, r5, r3, lsl #3
 432              		.loc 1 118 42 discriminator 3 view .LVU132
 433 00f2 37EEC77A 		vsub.f32	s14, s15, s14
 434              		.loc 1 118 31 discriminator 3 view .LVU133
 435 00f6 83ED007A 		vstr.32	s14, [r3]
 119:../Core/Src/fft.c ****         y_io[m + half_N_i].Im = ve[m].Im - z.Im;
 436              		.loc 1 119 9 is_stmt 1 discriminator 3 view .LVU134
ARM GAS  /tmp/ccVulUFC.s 			page 11


 437              		.loc 1 119 38 is_stmt 0 discriminator 3 view .LVU135
 438 00fa 92ED018A 		vldr.32	s16, [r2, #4]
 439              		.loc 1 119 42 discriminator 3 view .LVU136
 440 00fe 38EE400A 		vsub.f32	s0, s16, s0
 441              		.loc 1 119 31 discriminator 3 view .LVU137
 442 0102 83ED010A 		vstr.32	s0, [r3, #4]
 104:../Core/Src/fft.c ****     {
 443              		.loc 1 104 40 is_stmt 1 discriminator 3 view .LVU138
 104:../Core/Src/fft.c ****     {
 444              		.loc 1 104 41 is_stmt 0 discriminator 3 view .LVU139
 445 0106 0134     		adds	r4, r4, #1
 446              	.LVL26:
 447              	.L15:
 104:../Core/Src/fft.c ****     {
 448              		.loc 1 104 20 is_stmt 1 discriminator 1 view .LVU140
 104:../Core/Src/fft.c ****     {
 449              		.loc 1 104 34 is_stmt 0 discriminator 1 view .LVU141
 450 0108 731C     		adds	r3, r6, #1
 104:../Core/Src/fft.c ****     {
 451              		.loc 1 104 5 discriminator 1 view .LVU142
 452 010a A342     		cmp	r3, r4
 453 010c A8D8     		bhi	.L16
 454              	.LBE7:
 120:../Core/Src/fft.c ****     }
 121:../Core/Src/fft.c **** 
 122:../Core/Src/fft.c ****     return _EXIT_SUCCESS;
 455              		.loc 1 122 5 is_stmt 1 view .LVU143
 123:../Core/Src/fft.c **** }...
 456              		.loc 1 123 1 is_stmt 0 view .LVU144
 457 010e 0020     		movs	r0, #0
 458 0110 04B0     		add	sp, sp, #16
 459              	.LCFI8:
 460              		.cfi_def_cfa_offset 40
 461              		@ sp needed
 462 0112 BDEC048B 		vldm	sp!, {d8-d9}
 463              	.LCFI9:
 464              		.cfi_restore 82
 465              		.cfi_restore 83
 466              		.cfi_restore 80
 467              		.cfi_restore 81
 468              		.cfi_def_cfa_offset 24
 469 0116 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 470              	.LVL27:
 471              	.L20:
 472              		.loc 1 123 1 view .LVU145
 473 011a 00BFAFF3 		.align	3
 473      0080
 474              	.L19:
 475 0120 182D4454 		.word	1413754136
 476 0124 FB211940 		.word	1075388923
 477              		.cfi_endproc
 478              	.LFE1:
 480              		.text
 481              	.Letext0:
 482              		.file 2 "../Core/Inc/complex.h"
 483              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 484              		.file 4 "/usr/include/newlib/math.h"
ARM GAS  /tmp/ccVulUFC.s 			page 12


ARM GAS  /tmp/ccVulUFC.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 fft.c
     /tmp/ccVulUFC.s:17     .text.fft:0000000000000000 $t
     /tmp/ccVulUFC.s:25     .text.fft:0000000000000000 fft
     /tmp/ccVulUFC.s:244    .text.fft:0000000000000120 $d
     /tmp/ccVulUFC.s:250    .text.ifft:0000000000000000 $t
     /tmp/ccVulUFC.s:257    .text.ifft:0000000000000000 ifft
     /tmp/ccVulUFC.s:475    .text.ifft:0000000000000120 $d

UNDEFINED SYMBOLS
cos
sin
