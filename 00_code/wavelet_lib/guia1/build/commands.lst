ARM GAS  /tmp/ccJTin3X.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"commands.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.rodata.help_cb.str1.4,"aMS",%progbits,1
  17              		.align	2
  18              	.LC0:
  19 0000 4C697374 		.ascii	"List of utils:\012\015\000"
  19      206F6620 
  19      7574696C 
  19      733A0A0D 
  19      00
  20 0011 000000   		.align	2
  21              	.LC1:
  22 0014 24202020 		.ascii	"$      Insert last valid command\012\015\000"
  22      20202049 
  22      6E736572 
  22      74206C61 
  22      73742076 
  23 0037 00       		.align	2
  24              	.LC2:
  25 0038 45534320 		.ascii	"ESC    Clears input line\012\012\015\000"
  25      20202043 
  25      6C656172 
  25      7320696E 
  25      70757420 
  26              		.align	2
  27              	.LC3:
  28 0054 4C697374 		.ascii	"List of valid commands:\012\015\000"
  28      206F6620 
  28      76616C69 
  28      6420636F 
  28      6D6D616E 
  29 006e 0000     		.align	2
  30              	.LC4:
  31 0070 436F6D6D 		.ascii	"Command [%s] not found.\012\015\000"
  31      616E6420 
  31      5B25735D 
  31      206E6F74 
  31      20666F75 
  32              		.section	.text.help_cb,"ax",%progbits
  33              		.align	1
  34              		.global	help_cb
  35              		.arch armv7e-m
  36              		.syntax unified
  37              		.thumb
ARM GAS  /tmp/ccJTin3X.s 			page 2


  38              		.thumb_func
  39              		.fpu fpv5-d16
  41              	help_cb:
  42              	.LVL0:
  43              	.LFB147:
  44              		.file 1 "../Core/Src/commands.c"
   1:../Core/Src/commands.c **** #include "commands.h"
   2:../Core/Src/commands.c **** #include "usart.h"
   3:../Core/Src/commands.c **** #include <stdio.h>
   4:../Core/Src/commands.c **** 
   5:../Core/Src/commands.c **** // Callbacks Includes
   6:../Core/Src/commands.c **** #include "interface.h"
   7:../Core/Src/commands.c **** #include "sampling.h"
   8:../Core/Src/commands.c **** 
   9:../Core/Src/commands.c **** /******************************************************************************
  10:../Core/Src/commands.c **** @name			cmd_list
  11:../Core/Src/commands.c **** @brief	 	List of commands, used in parsing. Each command is made of:
  12:../Core/Src/commands.c **** 					- Command name
  13:../Core/Src/commands.c **** 					- Command help text
  14:../Core/Src/commands.c **** 					- Command callback function
  15:../Core/Src/commands.c **** ******************************************************************************/
  16:../Core/Src/commands.c **** const Command_t cmd_list[] = 
  17:../Core/Src/commands.c **** {
  18:../Core/Src/commands.c **** 	{ 
  19:../Core/Src/commands.c **** 		"?",
  20:../Core/Src/commands.c **** 		"Help information",
  21:../Core/Src/commands.c **** 		"Display extended information on a given command\n\r? <cmd>",
  22:../Core/Src/commands.c **** 		help_cb 
  23:../Core/Src/commands.c **** 	},
  24:../Core/Src/commands.c **** 	{ 
  25:../Core/Src/commands.c **** 		"VER",
  26:../Core/Src/commands.c **** 		"Display firmware version",
  27:../Core/Src/commands.c **** 		"",
  28:../Core/Src/commands.c **** 		ver_cb
  29:../Core/Src/commands.c **** 	},
  30:../Core/Src/commands.c **** 	{ 
  31:../Core/Src/commands.c **** 		"MR",
  32:../Core/Src/commands.c **** 		"Memory Read",
  33:../Core/Src/commands.c **** 		"MR <addr16> <length8>",
  34:../Core/Src/commands.c **** 		mr_cb 
  35:../Core/Src/commands.c **** 	},
  36:../Core/Src/commands.c **** 	{	
  37:../Core/Src/commands.c **** 		"MW",	
  38:../Core/Src/commands.c **** 		"Memory Write",
  39:../Core/Src/commands.c **** 		"MW <addr16> <length8> <byte8>",
  40:../Core/Src/commands.c **** 		mw_cb 
  41:../Core/Src/commands.c **** 	},
  42:../Core/Src/commands.c **** 	{	
  43:../Core/Src/commands.c **** 		"MI",
  44:../Core/Src/commands.c **** 		"Make Input",
  45:../Core/Src/commands.c **** 		"MI <port_addr8> <pin_setting16>",
  46:../Core/Src/commands.c **** 		mi_cb
  47:../Core/Src/commands.c **** 	},	
  48:../Core/Src/commands.c **** 	{
  49:../Core/Src/commands.c **** 		"MO",
  50:../Core/Src/commands.c **** 		"Make Output",
  51:../Core/Src/commands.c **** 		"MO <port_addr8> <pin_setting16>",
ARM GAS  /tmp/ccJTin3X.s 			page 3


  52:../Core/Src/commands.c **** 		mo_cb
  53:../Core/Src/commands.c **** 	},
  54:../Core/Src/commands.c **** 	{
  55:../Core/Src/commands.c **** 		"RD",
  56:../Core/Src/commands.c **** 		"Read Digital Pin",
  57:../Core/Src/commands.c **** 		"RD <port_addr8> <pin_setting16>",
  58:../Core/Src/commands.c **** 		rd_cb
  59:../Core/Src/commands.c **** 	},
  60:../Core/Src/commands.c **** 	{
  61:../Core/Src/commands.c **** 		"WD",
  62:../Core/Src/commands.c **** 		"Write Digital Pin",
  63:../Core/Src/commands.c **** 		"WD <port_addr8> <pin_setting16> <pin_values8>",
  64:../Core/Src/commands.c **** 		wd_cb
  65:../Core/Src/commands.c **** 	},	
  66:../Core/Src/commands.c **** 	{
  67:../Core/Src/commands.c **** 		"RA",
  68:../Core/Src/commands.c **** 		"Read Analog",
  69:../Core/Src/commands.c **** 		"RA <addr4>",
  70:../Core/Src/commands.c **** 		ra_cb
  71:../Core/Src/commands.c **** 	},
  72:../Core/Src/commands.c **** 	{
  73:../Core/Src/commands.c **** 		"SP",
  74:../Core/Src/commands.c **** 		"Sampling Period",
  75:../Core/Src/commands.c **** 		"SP <timeScale> <timeVal>\n\r  <timeScale>: s - seconds; ms - milissecs.; micro - microsecs.\n\r 
  76:../Core/Src/commands.c **** 		sp_cb
  77:../Core/Src/commands.c **** 	},
  78:../Core/Src/commands.c **** 	{
  79:../Core/Src/commands.c **** 		"AC",
  80:../Core/Src/commands.c **** 		"Analog Channel",
  81:../Core/Src/commands.c **** 		"AC <adcCHnum>",
  82:../Core/Src/commands.c **** 		ac_cb
  83:../Core/Src/commands.c **** 	},
  84:../Core/Src/commands.c **** 	{
  85:../Core/Src/commands.c **** 		"FN",
  86:../Core/Src/commands.c **** 		"Filter ON",
  87:../Core/Src/commands.c **** 		"FN <filter>\n\r  <filter>: LP - low pass; HP - high pass; BP - band pass",
  88:../Core/Src/commands.c **** 		fn_cb
  89:../Core/Src/commands.c **** 	},
  90:../Core/Src/commands.c **** 	{
  91:../Core/Src/commands.c **** 		"FF",
  92:../Core/Src/commands.c **** 		"Filter OFF",
  93:../Core/Src/commands.c **** 		"",
  94:../Core/Src/commands.c **** 		ff_cb
  95:../Core/Src/commands.c **** 	},
  96:../Core/Src/commands.c **** 	{
  97:../Core/Src/commands.c **** 		"S",
  98:../Core/Src/commands.c **** 		"Sample",
  99:../Core/Src/commands.c **** 		"S [<k>]\n\r\t<k> Sample k values",
 100:../Core/Src/commands.c **** 		s_cb
 101:../Core/Src/commands.c **** 	},
 102:../Core/Src/commands.c **** 	{
 103:../Core/Src/commands.c **** 		"ST",
 104:../Core/Src/commands.c **** 		"Stop Sampling",
 105:../Core/Src/commands.c **** 		"",
 106:../Core/Src/commands.c **** 		st_cb
 107:../Core/Src/commands.c **** 	},
 108:../Core/Src/commands.c **** 	{
ARM GAS  /tmp/ccJTin3X.s 			page 4


 109:../Core/Src/commands.c **** 		"WG",
 110:../Core/Src/commands.c **** 		"Wave Generator",
 111:../Core/Src/commands.c **** 		"WG <wave> <freq>\n\r  <wave>: sqr - square; sin - sine; tri - triangular\n\r  <freq>: hex value,
 112:../Core/Src/commands.c **** 		wg_cb
 113:../Core/Src/commands.c **** 	},
 114:../Core/Src/commands.c **** 	{ //end of Command list
 115:../Core/Src/commands.c **** 		0,
 116:../Core/Src/commands.c **** 		0,
 117:../Core/Src/commands.c **** 		0
 118:../Core/Src/commands.c **** 	},
 119:../Core/Src/commands.c **** };
 120:../Core/Src/commands.c **** 
 121:../Core/Src/commands.c **** char exec_cmd(const char *str)
 122:../Core/Src/commands.c **** {
 123:../Core/Src/commands.c **** 	char err;
 124:../Core/Src/commands.c **** 	
 125:../Core/Src/commands.c **** 	err = parse_cmd(cmd_list, str);
 126:../Core/Src/commands.c **** 	
 127:../Core/Src/commands.c **** 	switch(err)
 128:../Core/Src/commands.c **** 	{
 129:../Core/Src/commands.c **** 		case (char)(-ECMDNF):
 130:../Core/Src/commands.c **** 			// No command found
 131:../Core/Src/commands.c **** 			UART_puts("Command [");
 132:../Core/Src/commands.c **** 			UART_puts(Rx_Buffer);
 133:../Core/Src/commands.c **** 			UART_puts("] not found.\n\r");
 134:../Core/Src/commands.c **** 			break;
 135:../Core/Src/commands.c **** 		
 136:../Core/Src/commands.c **** 		case (char)(-EINVARG):
 137:../Core/Src/commands.c **** 			// Invalid Arguments
 138:../Core/Src/commands.c **** 			UART_puts("Invalid arguments.\n\r");
 139:../Core/Src/commands.c **** 			break;
 140:../Core/Src/commands.c **** 		
 141:../Core/Src/commands.c **** 		case (char)(-ENOCMD):
 142:../Core/Src/commands.c **** 			// Command is empty
 143:../Core/Src/commands.c **** 		case (char)(-ENOMEM):
 144:../Core/Src/commands.c **** 			// Command list is empty
 145:../Core/Src/commands.c **** 		//case (char)(-ENOLIST):
 146:../Core/Src/commands.c **** 			// No memory available or bad allocation of memory
 147:../Core/Src/commands.c **** 			break;
 148:../Core/Src/commands.c **** 		case (char)(-EPERM):
 149:../Core/Src/commands.c **** 			UART_puts("No permission.\n\r");
 150:../Core/Src/commands.c **** 			break;
 151:../Core/Src/commands.c **** 	}
 152:../Core/Src/commands.c **** 	
 153:../Core/Src/commands.c **** 	return err;
 154:../Core/Src/commands.c **** }
 155:../Core/Src/commands.c **** 
 156:../Core/Src/commands.c **** /******************************************************************************
 157:../Core/Src/commands.c **** @function  Help
 158:../Core/Src/commands.c **** @usage		 ?
 159:../Core/Src/commands.c **** 
 160:../Core/Src/commands.c **** @brief	 	 Print a list of the valid commands
 161:../Core/Src/commands.c **** ******************************************************************************/
 162:../Core/Src/commands.c **** #define OPDONE 		2
 163:../Core/Src/commands.c **** 
 164:../Core/Src/commands.c **** static char print_arg_help(const Command_t *p, char arg[])
 165:../Core/Src/commands.c **** {
ARM GAS  /tmp/ccJTin3X.s 			page 5


 166:../Core/Src/commands.c **** 	char str[256];
 167:../Core/Src/commands.c **** 
 168:../Core/Src/commands.c **** 	if(strcmp(p->cmd,arg) == 0)
 169:../Core/Src/commands.c **** 	{
 170:../Core/Src/commands.c **** 		snprintf(str, sizeof(str), "%-6s %-28s\n\r%s\n\r", p->cmd, p->help, p->usage);
 171:../Core/Src/commands.c **** 		UART_puts(str);
 172:../Core/Src/commands.c **** 		return OPDONE;
 173:../Core/Src/commands.c **** 	}
 174:../Core/Src/commands.c **** 
 175:../Core/Src/commands.c **** 	return ECMDNF;
 176:../Core/Src/commands.c **** }
 177:../Core/Src/commands.c **** 
 178:../Core/Src/commands.c **** static char print_full_help(const Command_t *p, char arg[])
 179:../Core/Src/commands.c **** {
 180:../Core/Src/commands.c **** 	char str[128];
 181:../Core/Src/commands.c **** 
 182:../Core/Src/commands.c **** //	snprintf(str, sizeof(str), "%-6s %-28s %s\n\r", p->cmd, p->help, p->usage);
 183:../Core/Src/commands.c **** 	snprintf(str, sizeof(str), "%-6s %s\n\r", p->cmd, p->help);
 184:../Core/Src/commands.c **** 	UART_puts(str);
 185:../Core/Src/commands.c **** 
 186:../Core/Src/commands.c **** 	return 0;
 187:../Core/Src/commands.c **** }
 188:../Core/Src/commands.c **** 
 189:../Core/Src/commands.c **** char help_cb(uint8_t argc, char** argv)
 190:../Core/Src/commands.c **** {
  45              		.loc 1 190 1 view -0
  46              		.cfi_startproc
  47              		@ args = 0, pretend = 0, frame = 128
  48              		@ frame_needed = 0, uses_anonymous_args = 0
 191:../Core/Src/commands.c **** 	const Command_t *p = cmd_list;
  49              		.loc 1 191 2 view .LVU1
 192:../Core/Src/commands.c **** 	char str[128]; // Output message. Max message len is the same as buffer used in UART_puts
  50              		.loc 1 192 2 view .LVU2
 193:../Core/Src/commands.c **** 	char (*fun_ptr)(const Command_t *, char*) = &print_full_help;
  51              		.loc 1 193 2 view .LVU3
 194:../Core/Src/commands.c **** 	char retval = 0;
  52              		.loc 1 194 2 view .LVU4
 195:../Core/Src/commands.c **** 	
 196:../Core/Src/commands.c **** 	if(argc > 2) // number of arguments invalid?
  53              		.loc 1 196 2 view .LVU5
  54              		.loc 1 196 4 is_stmt 0 view .LVU6
  55 0000 0228     		cmp	r0, #2
  56 0002 2DD8     		bhi	.L7
 190:../Core/Src/commands.c **** 	const Command_t *p = cmd_list;
  57              		.loc 1 190 1 view .LVU7
  58 0004 70B5     		push	{r4, r5, r6, lr}
  59              	.LCFI0:
  60              		.cfi_def_cfa_offset 16
  61              		.cfi_offset 4, -16
  62              		.cfi_offset 5, -12
  63              		.cfi_offset 6, -8
  64              		.cfi_offset 14, -4
  65 0006 A0B0     		sub	sp, sp, #128
  66              	.LCFI1:
  67              		.cfi_def_cfa_offset 144
  68 0008 0D46     		mov	r5, r1
 197:../Core/Src/commands.c **** 		return (char)(-EINVARG);
ARM GAS  /tmp/ccJTin3X.s 			page 6


 198:../Core/Src/commands.c **** 	
 199:../Core/Src/commands.c **** 	if(argc == 2)
  69              		.loc 1 199 2 is_stmt 1 view .LVU8
  70              		.loc 1 199 4 is_stmt 0 view .LVU9
  71 000a 03D1     		bne	.L14
 200:../Core/Src/commands.c **** 	{
 201:../Core/Src/commands.c **** 		fun_ptr = &print_arg_help;
  72              		.loc 1 201 11 view .LVU10
  73 000c 154E     		ldr	r6, .L16
  74              	.LVL1:
  75              	.L3:
  76              		.loc 1 201 11 view .LVU11
  77 000e 0020     		movs	r0, #0
  78 0010 154C     		ldr	r4, .L16+4
  79 0012 11E0     		b	.L4
  80              	.LVL2:
  81              	.L14:
 202:../Core/Src/commands.c **** 	}
 203:../Core/Src/commands.c **** 	else
 204:../Core/Src/commands.c **** 	{
 205:../Core/Src/commands.c **** 		UART_puts("List of utils:\n\r");
  82              		.loc 1 205 3 is_stmt 1 view .LVU12
  83 0014 1548     		ldr	r0, .L16+8
  84              	.LVL3:
  85              		.loc 1 205 3 is_stmt 0 view .LVU13
  86 0016 FFF7FEFF 		bl	UART_puts
  87              	.LVL4:
 206:../Core/Src/commands.c **** 		UART_puts("$      Insert last valid command\n\r");
  88              		.loc 1 206 3 is_stmt 1 view .LVU14
  89 001a 1548     		ldr	r0, .L16+12
  90 001c FFF7FEFF 		bl	UART_puts
  91              	.LVL5:
 207:../Core/Src/commands.c **** 		UART_puts("ESC    Clears input line\n\n\r");
  92              		.loc 1 207 3 view .LVU15
  93 0020 1448     		ldr	r0, .L16+16
  94 0022 FFF7FEFF 		bl	UART_puts
  95              	.LVL6:
 208:../Core/Src/commands.c **** 
 209:../Core/Src/commands.c **** 		UART_puts("List of valid commands:\n\r");
  96              		.loc 1 209 3 view .LVU16
  97 0026 1448     		ldr	r0, .L16+20
  98 0028 FFF7FEFF 		bl	UART_puts
  99              	.LVL7:
 193:../Core/Src/commands.c **** 	char retval = 0;
 100              		.loc 1 193 9 is_stmt 0 view .LVU17
 101 002c 134E     		ldr	r6, .L16+24
 102 002e EEE7     		b	.L3
 103              	.LVL8:
 104              	.L6:
 210:../Core/Src/commands.c **** //		snprintf(str, sizeof(str), "%-6s|%-28s|%-s\n\n\r", "CMD", "HELP TEXT", "USAGE");
 211:../Core/Src/commands.c **** //		UART_puts(str);
 212:../Core/Src/commands.c **** 	}
 213:../Core/Src/commands.c **** 
 214:../Core/Src/commands.c **** 	while (p->cmd && (retval != OPDONE))
 215:../Core/Src/commands.c **** 	{
 216:../Core/Src/commands.c **** 		retval = fun_ptr(p, argv[1]);
 105              		.loc 1 216 3 is_stmt 1 view .LVU18
ARM GAS  /tmp/ccJTin3X.s 			page 7


 106              		.loc 1 216 12 is_stmt 0 view .LVU19
 107 0030 6968     		ldr	r1, [r5, #4]
 108 0032 2046     		mov	r0, r4
 109              	.LVL9:
 110              		.loc 1 216 12 view .LVU20
 111 0034 B047     		blx	r6
 112              	.LVL10:
 217:../Core/Src/commands.c **** 		p++;
 113              		.loc 1 217 3 is_stmt 1 view .LVU21
 114              		.loc 1 217 4 is_stmt 0 view .LVU22
 115 0036 1034     		adds	r4, r4, #16
 116              	.LVL11:
 117              	.L4:
 214:../Core/Src/commands.c **** 	{
 118              		.loc 1 214 8 is_stmt 1 view .LVU23
 214:../Core/Src/commands.c **** 	{
 119              		.loc 1 214 10 is_stmt 0 view .LVU24
 120 0038 2368     		ldr	r3, [r4]
 214:../Core/Src/commands.c **** 	{
 121              		.loc 1 214 8 view .LVU25
 122 003a 0BB1     		cbz	r3, .L5
 214:../Core/Src/commands.c **** 	{
 123              		.loc 1 214 16 discriminator 1 view .LVU26
 124 003c 0228     		cmp	r0, #2
 125 003e F7D1     		bne	.L6
 126              	.L5:
 218:../Core/Src/commands.c **** 	}
 219:../Core/Src/commands.c **** 
 220:../Core/Src/commands.c **** 	if(retval == ECMDNF)
 127              		.loc 1 220 2 is_stmt 1 view .LVU27
 128              		.loc 1 220 4 is_stmt 0 view .LVU28
 129 0040 0528     		cmp	r0, #5
 130 0042 02D0     		beq	.L15
 221:../Core/Src/commands.c **** 	{
 222:../Core/Src/commands.c **** 		snprintf(str, sizeof(str), "Command [%s] not found.\n\r", argv[1]);
 223:../Core/Src/commands.c **** 		UART_puts(str);
 224:../Core/Src/commands.c **** 	}
 225:../Core/Src/commands.c **** 
 226:../Core/Src/commands.c **** 	return 0;
 131              		.loc 1 226 9 view .LVU29
 132 0044 0020     		movs	r0, #0
 133              	.LVL12:
 134              	.L2:
 227:../Core/Src/commands.c **** }
 135              		.loc 1 227 1 view .LVU30
 136 0046 20B0     		add	sp, sp, #128
 137              	.LCFI2:
 138              		.cfi_remember_state
 139              		.cfi_def_cfa_offset 16
 140              		@ sp needed
 141 0048 70BD     		pop	{r4, r5, r6, pc}
 142              	.LVL13:
 143              	.L15:
 144              	.LCFI3:
 145              		.cfi_restore_state
 222:../Core/Src/commands.c **** 		UART_puts(str);
 146              		.loc 1 222 3 is_stmt 1 view .LVU31
ARM GAS  /tmp/ccJTin3X.s 			page 8


 147 004a 6B68     		ldr	r3, [r5, #4]
 148 004c 0C4A     		ldr	r2, .L16+28
 149 004e 8021     		movs	r1, #128
 150 0050 6846     		mov	r0, sp
 151              	.LVL14:
 222:../Core/Src/commands.c **** 		UART_puts(str);
 152              		.loc 1 222 3 is_stmt 0 view .LVU32
 153 0052 FFF7FEFF 		bl	snprintf
 154              	.LVL15:
 223:../Core/Src/commands.c **** 	}
 155              		.loc 1 223 3 is_stmt 1 view .LVU33
 156 0056 6846     		mov	r0, sp
 157 0058 FFF7FEFF 		bl	UART_puts
 158              	.LVL16:
 226:../Core/Src/commands.c **** }
 159              		.loc 1 226 9 is_stmt 0 view .LVU34
 160 005c 0020     		movs	r0, #0
 161 005e F2E7     		b	.L2
 162              	.LVL17:
 163              	.L7:
 164              	.LCFI4:
 165              		.cfi_def_cfa_offset 0
 166              		.cfi_restore 4
 167              		.cfi_restore 5
 168              		.cfi_restore 6
 169              		.cfi_restore 14
 197:../Core/Src/commands.c **** 	
 170              		.loc 1 197 10 view .LVU35
 171 0060 FA20     		movs	r0, #250
 172              	.LVL18:
 173              		.loc 1 227 1 view .LVU36
 174 0062 7047     		bx	lr
 175              	.L17:
 176              		.align	2
 177              	.L16:
 178 0064 00000000 		.word	print_arg_help
 179 0068 00000000 		.word	.LANCHOR0
 180 006c 00000000 		.word	.LC0
 181 0070 14000000 		.word	.LC1
 182 0074 38000000 		.word	.LC2
 183 0078 54000000 		.word	.LC3
 184 007c 00000000 		.word	print_full_help
 185 0080 70000000 		.word	.LC4
 186              		.cfi_endproc
 187              	.LFE147:
 189              		.section	.rodata.print_full_help.str1.4,"aMS",%progbits,1
 190              		.align	2
 191              	.LC5:
 192 0000 252D3673 		.ascii	"%-6s %s\012\015\000"
 192      2025730A 
 192      0D00
 193              		.section	.text.print_full_help,"ax",%progbits
 194              		.align	1
 195              		.syntax unified
 196              		.thumb
 197              		.thumb_func
 198              		.fpu fpv5-d16
ARM GAS  /tmp/ccJTin3X.s 			page 9


 200              	print_full_help:
 201              	.LVL19:
 202              	.LFB146:
 179:../Core/Src/commands.c **** 	char str[128];
 203              		.loc 1 179 1 is_stmt 1 view -0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 128
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 179:../Core/Src/commands.c **** 	char str[128];
 207              		.loc 1 179 1 is_stmt 0 view .LVU38
 208 0000 00B5     		push	{lr}
 209              	.LCFI5:
 210              		.cfi_def_cfa_offset 4
 211              		.cfi_offset 14, -4
 212 0002 A3B0     		sub	sp, sp, #140
 213              	.LCFI6:
 214              		.cfi_def_cfa_offset 144
 180:../Core/Src/commands.c **** 
 215              		.loc 1 180 2 is_stmt 1 view .LVU39
 183:../Core/Src/commands.c **** 	UART_puts(str);
 216              		.loc 1 183 2 view .LVU40
 217 0004 4368     		ldr	r3, [r0, #4]
 218 0006 0093     		str	r3, [sp]
 219 0008 0368     		ldr	r3, [r0]
 220 000a 064A     		ldr	r2, .L20
 221 000c 8021     		movs	r1, #128
 222              	.LVL20:
 183:../Core/Src/commands.c **** 	UART_puts(str);
 223              		.loc 1 183 2 is_stmt 0 view .LVU41
 224 000e 02A8     		add	r0, sp, #8
 225              	.LVL21:
 183:../Core/Src/commands.c **** 	UART_puts(str);
 226              		.loc 1 183 2 view .LVU42
 227 0010 FFF7FEFF 		bl	snprintf
 228              	.LVL22:
 184:../Core/Src/commands.c **** 
 229              		.loc 1 184 2 is_stmt 1 view .LVU43
 230 0014 02A8     		add	r0, sp, #8
 231 0016 FFF7FEFF 		bl	UART_puts
 232              	.LVL23:
 186:../Core/Src/commands.c **** }
 233              		.loc 1 186 2 view .LVU44
 187:../Core/Src/commands.c **** 
 234              		.loc 1 187 1 is_stmt 0 view .LVU45
 235 001a 0020     		movs	r0, #0
 236 001c 23B0     		add	sp, sp, #140
 237              	.LCFI7:
 238              		.cfi_def_cfa_offset 4
 239              		@ sp needed
 240 001e 5DF804FB 		ldr	pc, [sp], #4
 241              	.L21:
 242 0022 00BF     		.align	2
 243              	.L20:
 244 0024 00000000 		.word	.LC5
 245              		.cfi_endproc
 246              	.LFE146:
 248              		.section	.rodata.print_arg_help.str1.4,"aMS",%progbits,1
ARM GAS  /tmp/ccJTin3X.s 			page 10


 249              		.align	2
 250              	.LC6:
 251 0000 252D3673 		.ascii	"%-6s %-28s\012\015%s\012\015\000"
 251      20252D32 
 251      38730A0D 
 251      25730A0D 
 251      00
 252              		.section	.text.print_arg_help,"ax",%progbits
 253              		.align	1
 254              		.syntax unified
 255              		.thumb
 256              		.thumb_func
 257              		.fpu fpv5-d16
 259              	print_arg_help:
 260              	.LVL24:
 261              	.LFB145:
 165:../Core/Src/commands.c **** 	char str[256];
 262              		.loc 1 165 1 is_stmt 1 view -0
 263              		.cfi_startproc
 264              		@ args = 0, pretend = 0, frame = 256
 265              		@ frame_needed = 0, uses_anonymous_args = 0
 165:../Core/Src/commands.c **** 	char str[256];
 266              		.loc 1 165 1 is_stmt 0 view .LVU47
 267 0000 30B5     		push	{r4, r5, lr}
 268              	.LCFI8:
 269              		.cfi_def_cfa_offset 12
 270              		.cfi_offset 4, -12
 271              		.cfi_offset 5, -8
 272              		.cfi_offset 14, -4
 273 0002 C3B0     		sub	sp, sp, #268
 274              	.LCFI9:
 275              		.cfi_def_cfa_offset 280
 276 0004 0446     		mov	r4, r0
 166:../Core/Src/commands.c **** 
 277              		.loc 1 166 2 is_stmt 1 view .LVU48
 168:../Core/Src/commands.c **** 	{
 278              		.loc 1 168 2 view .LVU49
 168:../Core/Src/commands.c **** 	{
 279              		.loc 1 168 5 is_stmt 0 view .LVU50
 280 0006 0568     		ldr	r5, [r0]
 281 0008 2846     		mov	r0, r5
 282              	.LVL25:
 168:../Core/Src/commands.c **** 	{
 283              		.loc 1 168 5 view .LVU51
 284 000a FFF7FEFF 		bl	strcmp
 285              	.LVL26:
 168:../Core/Src/commands.c **** 	{
 286              		.loc 1 168 4 view .LVU52
 287 000e 10B1     		cbz	r0, .L26
 175:../Core/Src/commands.c **** }
 288              		.loc 1 175 9 view .LVU53
 289 0010 0520     		movs	r0, #5
 290              	.L23:
 176:../Core/Src/commands.c **** 
 291              		.loc 1 176 1 view .LVU54
 292 0012 43B0     		add	sp, sp, #268
 293              	.LCFI10:
ARM GAS  /tmp/ccJTin3X.s 			page 11


 294              		.cfi_remember_state
 295              		.cfi_def_cfa_offset 12
 296              		@ sp needed
 297 0014 30BD     		pop	{r4, r5, pc}
 298              	.LVL27:
 299              	.L26:
 300              	.LCFI11:
 301              		.cfi_restore_state
 170:../Core/Src/commands.c **** 		UART_puts(str);
 302              		.loc 1 170 3 is_stmt 1 view .LVU55
 303 0016 A368     		ldr	r3, [r4, #8]
 304 0018 0193     		str	r3, [sp, #4]
 305 001a 6368     		ldr	r3, [r4, #4]
 306 001c 0093     		str	r3, [sp]
 307 001e 2B46     		mov	r3, r5
 308 0020 054A     		ldr	r2, .L27
 309 0022 4FF48071 		mov	r1, #256
 310 0026 02A8     		add	r0, sp, #8
 311 0028 FFF7FEFF 		bl	snprintf
 312              	.LVL28:
 171:../Core/Src/commands.c **** 		return OPDONE;
 313              		.loc 1 171 3 view .LVU56
 314 002c 02A8     		add	r0, sp, #8
 315 002e FFF7FEFF 		bl	UART_puts
 316              	.LVL29:
 172:../Core/Src/commands.c **** 	}
 317              		.loc 1 172 3 view .LVU57
 172:../Core/Src/commands.c **** 	}
 318              		.loc 1 172 10 is_stmt 0 view .LVU58
 319 0032 0220     		movs	r0, #2
 320 0034 EDE7     		b	.L23
 321              	.L28:
 322 0036 00BF     		.align	2
 323              	.L27:
 324 0038 00000000 		.word	.LC6
 325              		.cfi_endproc
 326              	.LFE145:
 328              		.section	.rodata.exec_cmd.str1.4,"aMS",%progbits,1
 329              		.align	2
 330              	.LC7:
 331 0000 436F6D6D 		.ascii	"Command [\000"
 331      616E6420 
 331      5B00
 332 000a 0000     		.align	2
 333              	.LC8:
 334 000c 5D206E6F 		.ascii	"] not found.\012\015\000"
 334      7420666F 
 334      756E642E 
 334      0A0D00
 335 001b 00       		.align	2
 336              	.LC9:
 337 001c 496E7661 		.ascii	"Invalid arguments.\012\015\000"
 337      6C696420 
 337      61726775 
 337      6D656E74 
 337      732E0A0D 
 338 0031 000000   		.align	2
ARM GAS  /tmp/ccJTin3X.s 			page 12


 339              	.LC10:
 340 0034 4E6F2070 		.ascii	"No permission.\012\015\000"
 340      65726D69 
 340      7373696F 
 340      6E2E0A0D 
 340      00
 341              		.section	.text.exec_cmd,"ax",%progbits
 342              		.align	1
 343              		.global	exec_cmd
 344              		.syntax unified
 345              		.thumb
 346              		.thumb_func
 347              		.fpu fpv5-d16
 349              	exec_cmd:
 350              	.LVL30:
 351              	.LFB144:
 122:../Core/Src/commands.c **** 	char err;
 352              		.loc 1 122 1 is_stmt 1 view -0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 0
 355              		@ frame_needed = 0, uses_anonymous_args = 0
 122:../Core/Src/commands.c **** 	char err;
 356              		.loc 1 122 1 is_stmt 0 view .LVU60
 357 0000 10B5     		push	{r4, lr}
 358              	.LCFI12:
 359              		.cfi_def_cfa_offset 8
 360              		.cfi_offset 4, -8
 361              		.cfi_offset 14, -4
 362 0002 0146     		mov	r1, r0
 123:../Core/Src/commands.c **** 	
 363              		.loc 1 123 2 is_stmt 1 view .LVU61
 125:../Core/Src/commands.c **** 	
 364              		.loc 1 125 2 view .LVU62
 125:../Core/Src/commands.c **** 	
 365              		.loc 1 125 8 is_stmt 0 view .LVU63
 366 0004 0E48     		ldr	r0, .L36
 367              	.LVL31:
 125:../Core/Src/commands.c **** 	
 368              		.loc 1 125 8 view .LVU64
 369 0006 FFF7FEFF 		bl	parse_cmd
 370              	.LVL32:
 125:../Core/Src/commands.c **** 	
 371              		.loc 1 125 8 view .LVU65
 372 000a 0446     		mov	r4, r0
 373              	.LVL33:
 127:../Core/Src/commands.c **** 	{
 374              		.loc 1 127 2 is_stmt 1 view .LVU66
 375 000c FA28     		cmp	r0, #250
 376 000e 0FD0     		beq	.L30
 377 0010 FB28     		cmp	r0, #251
 378 0012 03D0     		beq	.L31
 379 0014 F928     		cmp	r0, #249
 380 0016 0FD0     		beq	.L35
 381              	.LVL34:
 382              	.L33:
 153:../Core/Src/commands.c **** }
 383              		.loc 1 153 2 view .LVU67
ARM GAS  /tmp/ccJTin3X.s 			page 13


 154:../Core/Src/commands.c **** 
 384              		.loc 1 154 1 is_stmt 0 view .LVU68
 385 0018 2046     		mov	r0, r4
 386 001a 10BD     		pop	{r4, pc}
 387              	.LVL35:
 388              	.L31:
 131:../Core/Src/commands.c **** 			UART_puts(Rx_Buffer);
 389              		.loc 1 131 4 is_stmt 1 view .LVU69
 390 001c 0948     		ldr	r0, .L36+4
 391              	.LVL36:
 131:../Core/Src/commands.c **** 			UART_puts(Rx_Buffer);
 392              		.loc 1 131 4 is_stmt 0 view .LVU70
 393 001e FFF7FEFF 		bl	UART_puts
 394              	.LVL37:
 132:../Core/Src/commands.c **** 			UART_puts("] not found.\n\r");
 395              		.loc 1 132 4 is_stmt 1 view .LVU71
 396 0022 0948     		ldr	r0, .L36+8
 397 0024 FFF7FEFF 		bl	UART_puts
 398              	.LVL38:
 133:../Core/Src/commands.c **** 			break;
 399              		.loc 1 133 4 view .LVU72
 400 0028 0848     		ldr	r0, .L36+12
 401 002a FFF7FEFF 		bl	UART_puts
 402              	.LVL39:
 134:../Core/Src/commands.c **** 		
 403              		.loc 1 134 4 view .LVU73
 404 002e F3E7     		b	.L33
 405              	.LVL40:
 406              	.L30:
 138:../Core/Src/commands.c **** 			break;
 407              		.loc 1 138 4 view .LVU74
 408 0030 0748     		ldr	r0, .L36+16
 409              	.LVL41:
 138:../Core/Src/commands.c **** 			break;
 410              		.loc 1 138 4 is_stmt 0 view .LVU75
 411 0032 FFF7FEFF 		bl	UART_puts
 412              	.LVL42:
 139:../Core/Src/commands.c **** 		
 413              		.loc 1 139 4 is_stmt 1 view .LVU76
 414 0036 EFE7     		b	.L33
 415              	.LVL43:
 416              	.L35:
 149:../Core/Src/commands.c **** 			break;
 417              		.loc 1 149 4 view .LVU77
 418 0038 0648     		ldr	r0, .L36+20
 419              	.LVL44:
 149:../Core/Src/commands.c **** 			break;
 420              		.loc 1 149 4 is_stmt 0 view .LVU78
 421 003a FFF7FEFF 		bl	UART_puts
 422              	.LVL45:
 150:../Core/Src/commands.c **** 	}
 423              		.loc 1 150 4 is_stmt 1 view .LVU79
 424 003e EBE7     		b	.L33
 425              	.L37:
 426              		.align	2
 427              	.L36:
 428 0040 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/ccJTin3X.s 			page 14


 429 0044 00000000 		.word	.LC7
 430 0048 00000000 		.word	Rx_Buffer
 431 004c 0C000000 		.word	.LC8
 432 0050 1C000000 		.word	.LC9
 433 0054 34000000 		.word	.LC10
 434              		.cfi_endproc
 435              	.LFE144:
 437              		.global	cmd_list
 438              		.section	.rodata.str1.4,"aMS",%progbits,1
 439              		.align	2
 440              	.LC11:
 441 0000 3F00     		.ascii	"?\000"
 442 0002 0000     		.align	2
 443              	.LC12:
 444 0004 48656C70 		.ascii	"Help information\000"
 444      20696E66 
 444      6F726D61 
 444      74696F6E 
 444      00
 445 0015 000000   		.align	2
 446              	.LC13:
 447 0018 44697370 		.ascii	"Display extended information on a given command\012"
 447      6C617920 
 447      65787465 
 447      6E646564 
 447      20696E66 
 448 0048 0D3F203C 		.ascii	"\015? <cmd>\000"
 448      636D643E 
 448      00
 449 0051 000000   		.align	2
 450              	.LC14:
 451 0054 56455200 		.ascii	"VER\000"
 452              		.align	2
 453              	.LC15:
 454 0058 44697370 		.ascii	"Display firmware version\000"
 454      6C617920 
 454      6669726D 
 454      77617265 
 454      20766572 
 455 0071 000000   		.align	2
 456              	.LC16:
 457 0074 00       		.ascii	"\000"
 458 0075 000000   		.align	2
 459              	.LC17:
 460 0078 4D5200   		.ascii	"MR\000"
 461 007b 00       		.align	2
 462              	.LC18:
 463 007c 4D656D6F 		.ascii	"Memory Read\000"
 463      72792052 
 463      65616400 
 464              		.align	2
 465              	.LC19:
 466 0088 4D52203C 		.ascii	"MR <addr16> <length8>\000"
 466      61646472 
 466      31363E20 
 466      3C6C656E 
 466      67746838 
ARM GAS  /tmp/ccJTin3X.s 			page 15


 467 009e 0000     		.align	2
 468              	.LC20:
 469 00a0 4D5700   		.ascii	"MW\000"
 470 00a3 00       		.align	2
 471              	.LC21:
 472 00a4 4D656D6F 		.ascii	"Memory Write\000"
 472      72792057 
 472      72697465 
 472      00
 473 00b1 000000   		.align	2
 474              	.LC22:
 475 00b4 4D57203C 		.ascii	"MW <addr16> <length8> <byte8>\000"
 475      61646472 
 475      31363E20 
 475      3C6C656E 
 475      67746838 
 476 00d2 0000     		.align	2
 477              	.LC23:
 478 00d4 4D4900   		.ascii	"MI\000"
 479 00d7 00       		.align	2
 480              	.LC24:
 481 00d8 4D616B65 		.ascii	"Make Input\000"
 481      20496E70 
 481      757400
 482 00e3 00       		.align	2
 483              	.LC25:
 484 00e4 4D49203C 		.ascii	"MI <port_addr8> <pin_setting16>\000"
 484      706F7274 
 484      5F616464 
 484      72383E20 
 484      3C70696E 
 485              		.align	2
 486              	.LC26:
 487 0104 4D4F00   		.ascii	"MO\000"
 488 0107 00       		.align	2
 489              	.LC27:
 490 0108 4D616B65 		.ascii	"Make Output\000"
 490      204F7574 
 490      70757400 
 491              		.align	2
 492              	.LC28:
 493 0114 4D4F203C 		.ascii	"MO <port_addr8> <pin_setting16>\000"
 493      706F7274 
 493      5F616464 
 493      72383E20 
 493      3C70696E 
 494              		.align	2
 495              	.LC29:
 496 0134 524400   		.ascii	"RD\000"
 497 0137 00       		.align	2
 498              	.LC30:
 499 0138 52656164 		.ascii	"Read Digital Pin\000"
 499      20446967 
 499      6974616C 
 499      2050696E 
 499      00
 500 0149 000000   		.align	2
ARM GAS  /tmp/ccJTin3X.s 			page 16


 501              	.LC31:
 502 014c 5244203C 		.ascii	"RD <port_addr8> <pin_setting16>\000"
 502      706F7274 
 502      5F616464 
 502      72383E20 
 502      3C70696E 
 503              		.align	2
 504              	.LC32:
 505 016c 574400   		.ascii	"WD\000"
 506 016f 00       		.align	2
 507              	.LC33:
 508 0170 57726974 		.ascii	"Write Digital Pin\000"
 508      65204469 
 508      67697461 
 508      6C205069 
 508      6E00
 509 0182 0000     		.align	2
 510              	.LC34:
 511 0184 5744203C 		.ascii	"WD <port_addr8> <pin_setting16> <pin_values8>\000"
 511      706F7274 
 511      5F616464 
 511      72383E20 
 511      3C70696E 
 512 01b2 0000     		.align	2
 513              	.LC35:
 514 01b4 524100   		.ascii	"RA\000"
 515 01b7 00       		.align	2
 516              	.LC36:
 517 01b8 52656164 		.ascii	"Read Analog\000"
 517      20416E61 
 517      6C6F6700 
 518              		.align	2
 519              	.LC37:
 520 01c4 5241203C 		.ascii	"RA <addr4>\000"
 520      61646472 
 520      343E00
 521 01cf 00       		.align	2
 522              	.LC38:
 523 01d0 535000   		.ascii	"SP\000"
 524 01d3 00       		.align	2
 525              	.LC39:
 526 01d4 53616D70 		.ascii	"Sampling Period\000"
 526      6C696E67 
 526      20506572 
 526      696F6400 
 527              		.align	2
 528              	.LC40:
 529 01e4 5350203C 		.ascii	"SP <timeScale> <timeVal>\012\015  <timeScale>: s - "
 529      74696D65 
 529      5363616C 
 529      653E203C 
 529      74696D65 
 530 0211 7365636F 		.ascii	"seconds; ms - milissecs.; micro - microsecs.\012\015"
 530      6E64733B 
 530      206D7320 
 530      2D206D69 
 530      6C697373 
ARM GAS  /tmp/ccJTin3X.s 			page 17


 531 023f 20203C74 		.ascii	"  <timeVal>: hex value\000"
 531      696D6556 
 531      616C3E3A 
 531      20686578 
 531      2076616C 
 532 0256 0000     		.align	2
 533              	.LC41:
 534 0258 414300   		.ascii	"AC\000"
 535 025b 00       		.align	2
 536              	.LC42:
 537 025c 416E616C 		.ascii	"Analog Channel\000"
 537      6F672043 
 537      68616E6E 
 537      656C00
 538 026b 00       		.align	2
 539              	.LC43:
 540 026c 4143203C 		.ascii	"AC <adcCHnum>\000"
 540      61646343 
 540      486E756D 
 540      3E00
 541 027a 0000     		.align	2
 542              	.LC44:
 543 027c 464E00   		.ascii	"FN\000"
 544 027f 00       		.align	2
 545              	.LC45:
 546 0280 46696C74 		.ascii	"Filter ON\000"
 546      6572204F 
 546      4E00
 547 028a 0000     		.align	2
 548              	.LC46:
 549 028c 464E203C 		.ascii	"FN <filter>\012\015  <filter>: LP - low pass; HP - "
 549      66696C74 
 549      65723E0A 
 549      0D20203C 
 549      66696C74 
 550 02b9 68696768 		.ascii	"high pass; BP - band pass\000"
 550      20706173 
 550      733B2042 
 550      50202D20 
 550      62616E64 
 551 02d3 00       		.align	2
 552              	.LC47:
 553 02d4 464600   		.ascii	"FF\000"
 554 02d7 00       		.align	2
 555              	.LC48:
 556 02d8 46696C74 		.ascii	"Filter OFF\000"
 556      6572204F 
 556      464600
 557 02e3 00       		.align	2
 558              	.LC49:
 559 02e4 5300     		.ascii	"S\000"
 560 02e6 0000     		.align	2
 561              	.LC50:
 562 02e8 53616D70 		.ascii	"Sample\000"
 562      6C6500
 563 02ef 00       		.align	2
 564              	.LC51:
ARM GAS  /tmp/ccJTin3X.s 			page 18


 565 02f0 53205B3C 		.ascii	"S [<k>]\012\015\011<k> Sample k values\000"
 565      6B3E5D0A 
 565      0D093C6B 
 565      3E205361 
 565      6D706C65 
 566 030e 0000     		.align	2
 567              	.LC52:
 568 0310 535400   		.ascii	"ST\000"
 569 0313 00       		.align	2
 570              	.LC53:
 571 0314 53746F70 		.ascii	"Stop Sampling\000"
 571      2053616D 
 571      706C696E 
 571      6700
 572 0322 0000     		.align	2
 573              	.LC54:
 574 0324 574700   		.ascii	"WG\000"
 575 0327 00       		.align	2
 576              	.LC55:
 577 0328 57617665 		.ascii	"Wave Generator\000"
 577      2047656E 
 577      65726174 
 577      6F7200
 578 0337 00       		.align	2
 579              	.LC56:
 580 0338 5747203C 		.ascii	"WG <wave> <freq>\012\015  <wave>: sqr - square; sin"
 580      77617665 
 580      3E203C66 
 580      7265713E 
 580      0A0D2020 
 581 0365 202D2073 		.ascii	" - sine; tri - triangular\012\015  <freq>: hex valu"
 581      696E653B 
 581      20747269 
 581      202D2074 
 581      7269616E 
 582 0392 652C2069 		.ascii	"e, in Hz. Max 0x64 = 100hz\000"
 582      6E20487A 
 582      2E204D61 
 582      78203078 
 582      3634203D 
 583              		.section	.rodata.cmd_list,"a"
 584              		.align	2
 585              		.set	.LANCHOR0,. + 0
 588              	cmd_list:
 589 0000 00000000 		.word	.LC11
 590 0004 04000000 		.word	.LC12
 591 0008 18000000 		.word	.LC13
 592 000c 00000000 		.word	help_cb
 593 0010 54000000 		.word	.LC14
 594 0014 58000000 		.word	.LC15
 595 0018 74000000 		.word	.LC16
 596 001c 00000000 		.word	ver_cb
 597 0020 78000000 		.word	.LC17
 598 0024 7C000000 		.word	.LC18
 599 0028 88000000 		.word	.LC19
 600 002c 00000000 		.word	mr_cb
 601 0030 A0000000 		.word	.LC20
ARM GAS  /tmp/ccJTin3X.s 			page 19


 602 0034 A4000000 		.word	.LC21
 603 0038 B4000000 		.word	.LC22
 604 003c 00000000 		.word	mw_cb
 605 0040 D4000000 		.word	.LC23
 606 0044 D8000000 		.word	.LC24
 607 0048 E4000000 		.word	.LC25
 608 004c 00000000 		.word	mi_cb
 609 0050 04010000 		.word	.LC26
 610 0054 08010000 		.word	.LC27
 611 0058 14010000 		.word	.LC28
 612 005c 00000000 		.word	mo_cb
 613 0060 34010000 		.word	.LC29
 614 0064 38010000 		.word	.LC30
 615 0068 4C010000 		.word	.LC31
 616 006c 00000000 		.word	rd_cb
 617 0070 6C010000 		.word	.LC32
 618 0074 70010000 		.word	.LC33
 619 0078 84010000 		.word	.LC34
 620 007c 00000000 		.word	wd_cb
 621 0080 B4010000 		.word	.LC35
 622 0084 B8010000 		.word	.LC36
 623 0088 C4010000 		.word	.LC37
 624 008c 00000000 		.word	ra_cb
 625 0090 D0010000 		.word	.LC38
 626 0094 D4010000 		.word	.LC39
 627 0098 E4010000 		.word	.LC40
 628 009c 00000000 		.word	sp_cb
 629 00a0 58020000 		.word	.LC41
 630 00a4 5C020000 		.word	.LC42
 631 00a8 6C020000 		.word	.LC43
 632 00ac 00000000 		.word	ac_cb
 633 00b0 7C020000 		.word	.LC44
 634 00b4 80020000 		.word	.LC45
 635 00b8 8C020000 		.word	.LC46
 636 00bc 00000000 		.word	fn_cb
 637 00c0 D4020000 		.word	.LC47
 638 00c4 D8020000 		.word	.LC48
 639 00c8 74000000 		.word	.LC16
 640 00cc 00000000 		.word	ff_cb
 641 00d0 E4020000 		.word	.LC49
 642 00d4 E8020000 		.word	.LC50
 643 00d8 F0020000 		.word	.LC51
 644 00dc 00000000 		.word	s_cb
 645 00e0 10030000 		.word	.LC52
 646 00e4 14030000 		.word	.LC53
 647 00e8 74000000 		.word	.LC16
 648 00ec 00000000 		.word	st_cb
 649 00f0 24030000 		.word	.LC54
 650 00f4 28030000 		.word	.LC55
 651 00f8 38030000 		.word	.LC56
 652 00fc 00000000 		.word	wg_cb
 653 0100 00000000 		.word	0
 654 0104 00000000 		.word	0
 655 0108 00000000 		.word	0
 656 010c 00000000 		.space	4
 657              		.text
 658              	.Letext0:
ARM GAS  /tmp/ccJTin3X.s 			page 20


 659              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 660              		.file 3 "../Core/Inc/parser.h"
 661              		.file 4 "../Core/Inc/commands.h"
 662              		.file 5 "../Core/Inc/usart.h"
 663              		.file 6 "/usr/include/newlib/stdio.h"
 664              		.file 7 "/usr/include/newlib/string.h"
ARM GAS  /tmp/ccJTin3X.s 			page 21


DEFINED SYMBOLS
                            *ABS*:0000000000000000 commands.c
     /tmp/ccJTin3X.s:17     .rodata.help_cb.str1.4:0000000000000000 $d
     /tmp/ccJTin3X.s:33     .text.help_cb:0000000000000000 $t
     /tmp/ccJTin3X.s:41     .text.help_cb:0000000000000000 help_cb
     /tmp/ccJTin3X.s:178    .text.help_cb:0000000000000064 $d
     /tmp/ccJTin3X.s:259    .text.print_arg_help:0000000000000000 print_arg_help
     /tmp/ccJTin3X.s:200    .text.print_full_help:0000000000000000 print_full_help
     /tmp/ccJTin3X.s:190    .rodata.print_full_help.str1.4:0000000000000000 $d
     /tmp/ccJTin3X.s:194    .text.print_full_help:0000000000000000 $t
     /tmp/ccJTin3X.s:244    .text.print_full_help:0000000000000024 $d
     /tmp/ccJTin3X.s:249    .rodata.print_arg_help.str1.4:0000000000000000 $d
     /tmp/ccJTin3X.s:253    .text.print_arg_help:0000000000000000 $t
     /tmp/ccJTin3X.s:324    .text.print_arg_help:0000000000000038 $d
     /tmp/ccJTin3X.s:329    .rodata.exec_cmd.str1.4:0000000000000000 $d
     /tmp/ccJTin3X.s:342    .text.exec_cmd:0000000000000000 $t
     /tmp/ccJTin3X.s:349    .text.exec_cmd:0000000000000000 exec_cmd
     /tmp/ccJTin3X.s:428    .text.exec_cmd:0000000000000040 $d
     /tmp/ccJTin3X.s:588    .rodata.cmd_list:0000000000000000 cmd_list
     /tmp/ccJTin3X.s:439    .rodata.str1.4:0000000000000000 $d
     /tmp/ccJTin3X.s:584    .rodata.cmd_list:0000000000000000 $d

UNDEFINED SYMBOLS
UART_puts
snprintf
strcmp
parse_cmd
Rx_Buffer
ver_cb
mr_cb
mw_cb
mi_cb
mo_cb
rd_cb
wd_cb
ra_cb
sp_cb
ac_cb
fn_cb
ff_cb
s_cb
st_cb
wg_cb
